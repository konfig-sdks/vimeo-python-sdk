# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel

from vimeo_python_sdk.pydantic.live_event_schedule import LiveEventSchedule
from vimeo_python_sdk.pydantic.picture import Picture
from vimeo_python_sdk.pydantic.project import Project
from vimeo_python_sdk.pydantic.user import User
from vimeo_python_sdk.pydantic.webinar_event_album import WebinarEventAlbum
from vimeo_python_sdk.pydantic.webinar_event_allowed_privacies import WebinarEventAllowedPrivacies
from vimeo_python_sdk.pydantic.webinar_event_content_rating import WebinarEventContentRating
from vimeo_python_sdk.pydantic.webinar_event_email_quota import WebinarEventEmailQuota
from vimeo_python_sdk.pydantic.webinar_event_embed import WebinarEventEmbed
from vimeo_python_sdk.pydantic.webinar_event_interaction_tools_settings import WebinarEventInteractionToolsSettings
from vimeo_python_sdk.pydantic.webinar_event_live_clips import WebinarEventLiveClips
from vimeo_python_sdk.pydantic.webinar_event_live_destinations import WebinarEventLiveDestinations
from vimeo_python_sdk.pydantic.webinar_event_metadata import WebinarEventMetadata
from vimeo_python_sdk.pydantic.webinar_event_stream_privacy import WebinarEventStreamPrivacy
from vimeo_python_sdk.pydantic.webinar_event_webinar import WebinarEventWebinar

class WebinarEvent(BaseModel):
    # The title of the event. This field is also optionally used as the base title for videos created by streaming to the event.
    title: str = Field(alias='title')

    album: WebinarEventAlbum = Field(alias='album')

    # Whether the share link for the videos generated by streaming to the event is usable.
    allow_share_link: bool = Field(alias='allow_share_link')

    allowed_privacies: WebinarEventAllowedPrivacies = Field(alias='allowed_privacies')

    # Whether the automated closed captions feature is enabled.
    auto_cc_enabled: typing.Optional[bool] = Field(alias='auto_cc_enabled')

    # A comma-separated list of keywords for enhancing the speech detection of automated closed captions.
    auto_cc_keywords: typing.Optional[str] = Field(alias='auto_cc_keywords')

    # The language of the automated closed captions.  Option descriptions:  * `de-DE` - The language is German.  * `en-US` - The language is English.  * `es-ES` - The language is Spanish.  * `fr-FR` - The language is French.  * `pt-BR` - The language is Portuguese. 
    auto_cc_language: Literal["de-DE", "en-US", "es-ES", "fr-FR", "pt-BR"] = Field(alias='auto_cc_language')

    # The amount of time remaining to the user to access the automated closed captions feature.
    auto_cc_remaining: typing.Optional[typing.Union[int, float]] = Field(alias='auto_cc_remaining')

    # When the value of this field is `true`, the title for the next video in the event is generated based on the time of the stream and the **title** field of the event.
    automatically_title_stream: bool = Field(alias='automatically_title_stream')

    # Whether to display live chat on the event page on Vimeo.
    chat_enabled: bool = Field(alias='chat_enabled')

    # The time in ISO 8601 format when the event was completed.
    completed_on: str = Field(alias='completed_on')

    content_rating: WebinarEventContentRating = Field(alias='content_rating')

    # The time in ISO 8601 format when the event was created.
    created_time: str = Field(alias='created_time')

    # Whether the DVR feature is enabled.
    dvr: bool = Field(alias='dvr')

    email_quota: WebinarEventEmailQuota = Field(alias='email_quota')

    embed: WebinarEventEmbed = Field(alias='embed')

    # Whether the event was created from a showcase.
    from_showcase: bool = Field(alias='from_showcase')

    # The first video to be played in the playlist.
    head_clip: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(alias='head_clip')

    interaction_tools_settings: WebinarEventInteractionToolsSettings = Field(alias='interaction_tools_settings')

    # The type of latency.  Option descriptions:  * `fail-safe` - The latency is in the failsafe range, with a delay of 60-75 seconds.  * `low` - The latency is low, with a delay of 5-7 seconds.  * `standard` - The latency is standard, with a delay of 15-20 seconds. 
    latency: Literal["fail-safe", "low", "standard"] = Field(alias='latency')

    # The unique ID for the registered viewer.
    lead_uuid: str = Field(alias='lead_uuid')

    # The URI to access the event on Vimeo.
    link: str = Field(alias='link')

    live_clips: WebinarEventLiveClips = Field(alias='live_clips')

    live_destinations: WebinarEventLiveDestinations = Field(alias='live_destinations')

    # Whether the low-latency feature is enabled.
    low_latency: bool = Field(alias='low_latency')

    metadata: WebinarEventMetadata = Field(alias='metadata')

    # The date in ISO 8601 format on which the next occurrence of the event is expected to be live.
    next_occurrence_time: typing.Optional[str] = Field(alias='next_occurrence_time')

    # Information about the folder that contains the event.
    parent_folder: Project = Field(alias='parent_folder')

    # The active thumbnail image of the event.
    pictures: Picture = Field(alias='pictures')

    # The order in which the videos inside the event appear in the playlist.  Option descriptions:  * `added_first` - The videos appear according to when they were added to the event, with the most recently added first.  * `added_last` - The videos appear according to when they were added to the event, with the most recently added last.  * `alphabetical` - The videos appear alphabetically by their title.  * `arranged` - The videos appear as arranged by the owner of the event.  * `comments` - The videos appear according to their number of comments.  * `duration` - The videos appear in order of duration.  * `likes` - The videos appear according to their number of likes.  * `newest` - The videos appear in chronological order, with the newest first.  * `oldest` - The videos appear in chronological order, with the oldest first.  * `plays` - The videos appear according to their number of plays. 
    playlist_sort: Literal["added_first", "added_last", "alphabetical", "arranged", "comments", "duration", "likes", "newest", "oldest", "plays"] = Field(alias='playlist_sort')

    # The preferred streaming method.  Option descriptions:  * `browser` - Stream in the browser.  * `encoder` - Stream by the encoder. 
    preferred_stream_method: Literal["browser", "encoder"] = Field(alias='preferred_stream_method')

    # The upstream RTMP link. Send your live content to this link to create a live video on the event.
    rtmp_link: typing.Optional[str] = Field(alias='rtmp_link')

    # Whether to preview the RTMP stream before the event goes live.
    rtmp_preview: bool = Field(alias='rtmp_preview')

    # The upstream RTMPS link. Send your live content to this link to create a live video on the event.
    rtmps_link: typing.Optional[str] = Field(alias='rtmps_link')

    # The description of the time or times that the event is expected to be live.
    schedule: LiveEventSchedule = Field(alias='schedule')

    # Whether the scheduled playback feature is enabled.
    scheduled_playback: bool = Field(alias='scheduled_playback')

    # The status of the event.  Option descriptions:  * `ended` - The user ended the event.  * `started` - The user started the event. 
    status: Literal["ended", "started"] = Field(alias='status')

    # The description of the next video streamed to the event.
    stream_description: typing.Optional[str] = Field(alias='stream_description')

    # The stream key used in conjunction with the RTMP and RTMPS links.
    stream_key: typing.Optional[str] = Field(alias='stream_key')

    # The stream mode of the event.  Option descriptions:  * `live` - The stream is live playback.  * `record` - The stream is in record mode.  * `simulive` - The stream is scheduled media playback. 
    stream_mode: Literal["live", "record", "simulive"] = Field(alias='stream_mode')

    # The password that anyone can use to access the videos generated by streaming to the event.
    stream_password: typing.Optional[str] = Field(alias='stream_password')

    stream_privacy: WebinarEventStreamPrivacy = Field(alias='stream_privacy')

    # The title of the next video streamed to the event. This field applies only when **automatically_title_stream** is `false`.
    stream_title: str = Field(alias='stream_title')

    # The event's video. An event always has a video, which is either in a pre-live state (ready to be streamed to) or in a live state (which is currently being streamed to).
    streamable_clip: typing.Optional[typing.Dict[str, typing.Union[bool, date, datetime, dict, float, int, list, str, None]]] = Field(alias='streamable_clip')

    # The time zone used in resolving the timestamps included in auto-generated video titles.
    time_zone: str = Field(alias='time_zone')

    # Whether to ignore the time limit of the automated closed captions feature.
    unlimited_auto_cc: typing.Optional[bool] = Field(alias='unlimited_auto_cc')

    # Whether 24/7 streaming is enabled for the event.
    unlimited_duration: bool = Field(alias='unlimited_duration')

    # The webinar event's canonical relative URI.
    uri: str = Field(alias='uri')

    # The owner of the event.
    user: User = Field(alias='user')

    # The URI to access the event on Vimeo with or without an unlisted hash.
    view_link: str = Field(alias='view_link')

    webinar: WebinarEventWebinar = Field(alias='webinar')

    # Whether the event was created from a webinar.
    from_webinar: typing.Optional[bool] = Field(None, alias='from_webinar')
    class Config:
        arbitrary_types_allowed = True
