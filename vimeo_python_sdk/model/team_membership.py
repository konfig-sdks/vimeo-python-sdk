# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class TeamMembership(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created_time",
            "metadata",
            "role",
            "joined_time",
            "applicable_permission_policies",
            "active",
            "uri",
            "applicable_roles",
            "permission_level",
            "modified_time",
            "resource_key",
            "invite_url",
            "access_grant",
            "user",
            "email",
            "status",
        }
        
        class properties:
            
            
            class access_grant(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'access_grant':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            active = schemas.BoolSchema
        
            @staticmethod
            def applicable_permission_policies() -> typing.Type['TeamMembershipApplicablePermissionPolicies']:
                return TeamMembershipApplicablePermissionPolicies
            
            
            class applicable_roles(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['TeamRole']:
                        return TeamRole
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['TeamRole'], typing.List['TeamRole']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'applicable_roles':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'TeamRole':
                    return super().__getitem__(i)
            created_time = schemas.StrSchema
            email = schemas.StrSchema
            
            
            class invite_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'invite_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            joined_time = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['TeamMembershipMetadata']:
                return TeamMembershipMetadata
            modified_time = schemas.StrSchema
            
            
            class permission_level(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Admin": "ADMIN",
                        "Contributor": "CONTRIBUTOR",
                        "Contributor Plus": "CONTRIBUTOR_PLUS",
                        "Owner": "OWNER",
                        "Uploader": "UPLOADER",
                        "Viewer": "VIEWER",
                    }
                
                @schemas.classproperty
                def ADMIN(cls):
                    return cls("Admin")
                
                @schemas.classproperty
                def CONTRIBUTOR(cls):
                    return cls("Contributor")
                
                @schemas.classproperty
                def CONTRIBUTOR_PLUS(cls):
                    return cls("Contributor Plus")
                
                @schemas.classproperty
                def OWNER(cls):
                    return cls("Owner")
                
                @schemas.classproperty
                def UPLOADER(cls):
                    return cls("Uploader")
                
                @schemas.classproperty
                def VIEWER(cls):
                    return cls("Viewer")
            resource_key = schemas.StrSchema
            role = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "accepted": "ACCEPTED",
                        "pending": "PENDING",
                    }
                
                @schemas.classproperty
                def ACCEPTED(cls):
                    return cls("accepted")
                
                @schemas.classproperty
                def PENDING(cls):
                    return cls("pending")
            uri = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            has_folder_access = schemas.BoolSchema
            recently_reminded = schemas.BoolSchema
            __annotations__ = {
                "access_grant": access_grant,
                "active": active,
                "applicable_permission_policies": applicable_permission_policies,
                "applicable_roles": applicable_roles,
                "created_time": created_time,
                "email": email,
                "invite_url": invite_url,
                "joined_time": joined_time,
                "metadata": metadata,
                "modified_time": modified_time,
                "permission_level": permission_level,
                "resource_key": resource_key,
                "role": role,
                "status": status,
                "uri": uri,
                "user": user,
                "has_folder_access": has_folder_access,
                "recently_reminded": recently_reminded,
            }
    
    created_time: MetaOapg.properties.created_time
    metadata: 'TeamMembershipMetadata'
    role: MetaOapg.properties.role
    joined_time: MetaOapg.properties.joined_time
    applicable_permission_policies: 'TeamMembershipApplicablePermissionPolicies'
    active: MetaOapg.properties.active
    uri: MetaOapg.properties.uri
    applicable_roles: MetaOapg.properties.applicable_roles
    permission_level: MetaOapg.properties.permission_level
    modified_time: MetaOapg.properties.modified_time
    resource_key: MetaOapg.properties.resource_key
    invite_url: MetaOapg.properties.invite_url
    access_grant: MetaOapg.properties.access_grant
    user: 'User'
    email: MetaOapg.properties.email
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_grant"]) -> MetaOapg.properties.access_grant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicable_permission_policies"]) -> 'TeamMembershipApplicablePermissionPolicies': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicable_roles"]) -> MetaOapg.properties.applicable_roles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invite_url"]) -> MetaOapg.properties.invite_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["joined_time"]) -> MetaOapg.properties.joined_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'TeamMembershipMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permission_level"]) -> MetaOapg.properties.permission_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_folder_access"]) -> MetaOapg.properties.has_folder_access: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recently_reminded"]) -> MetaOapg.properties.recently_reminded: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_grant", "active", "applicable_permission_policies", "applicable_roles", "created_time", "email", "invite_url", "joined_time", "metadata", "modified_time", "permission_level", "resource_key", "role", "status", "uri", "user", "has_folder_access", "recently_reminded", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_grant"]) -> MetaOapg.properties.access_grant: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicable_permission_policies"]) -> 'TeamMembershipApplicablePermissionPolicies': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicable_roles"]) -> MetaOapg.properties.applicable_roles: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invite_url"]) -> MetaOapg.properties.invite_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["joined_time"]) -> MetaOapg.properties.joined_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'TeamMembershipMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permission_level"]) -> MetaOapg.properties.permission_level: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_folder_access"]) -> typing.Union[MetaOapg.properties.has_folder_access, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recently_reminded"]) -> typing.Union[MetaOapg.properties.recently_reminded, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_grant", "active", "applicable_permission_policies", "applicable_roles", "created_time", "email", "invite_url", "joined_time", "metadata", "modified_time", "permission_level", "resource_key", "role", "status", "uri", "user", "has_folder_access", "recently_reminded", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        metadata: 'TeamMembershipMetadata',
        role: typing.Union[MetaOapg.properties.role, str, ],
        joined_time: typing.Union[MetaOapg.properties.joined_time, str, ],
        applicable_permission_policies: 'TeamMembershipApplicablePermissionPolicies',
        active: typing.Union[MetaOapg.properties.active, bool, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        applicable_roles: typing.Union[MetaOapg.properties.applicable_roles, list, tuple, ],
        permission_level: typing.Union[MetaOapg.properties.permission_level, str, ],
        modified_time: typing.Union[MetaOapg.properties.modified_time, str, ],
        resource_key: typing.Union[MetaOapg.properties.resource_key, str, ],
        invite_url: typing.Union[MetaOapg.properties.invite_url, None, str, ],
        access_grant: typing.Union[MetaOapg.properties.access_grant, dict, frozendict.frozendict, None, ],
        user: 'User',
        email: typing.Union[MetaOapg.properties.email, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        has_folder_access: typing.Union[MetaOapg.properties.has_folder_access, bool, schemas.Unset] = schemas.unset,
        recently_reminded: typing.Union[MetaOapg.properties.recently_reminded, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TeamMembership':
        return super().__new__(
            cls,
            *args,
            created_time=created_time,
            metadata=metadata,
            role=role,
            joined_time=joined_time,
            applicable_permission_policies=applicable_permission_policies,
            active=active,
            uri=uri,
            applicable_roles=applicable_roles,
            permission_level=permission_level,
            modified_time=modified_time,
            resource_key=resource_key,
            invite_url=invite_url,
            access_grant=access_grant,
            user=user,
            email=email,
            status=status,
            has_folder_access=has_folder_access,
            recently_reminded=recently_reminded,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.team_membership_applicable_permission_policies import TeamMembershipApplicablePermissionPolicies
from vimeo_python_sdk.model.team_membership_metadata import TeamMembershipMetadata
from vimeo_python_sdk.model.team_role import TeamRole
from vimeo_python_sdk.model.user import User
