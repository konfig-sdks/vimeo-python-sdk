# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class OnDemandPage(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "metadata",
            "thumbnail",
            "domain_link",
            "link",
            "rating",
            "description",
            "published",
            "subscription",
            "type",
            "uri",
            "colors",
            "pictures",
            "trailer",
            "resource_key",
            "background",
            "genres",
            "name",
            "content_rating",
            "theme",
            "user",
            "episodes",
            "preorder",
        }
        
        class properties:
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def background() -> typing.Type['Picture']:
                return Picture
        
            @staticmethod
            def colors() -> typing.Type['OnDemandPageColors']:
                return OnDemandPageColors
        
            @staticmethod
            def content_rating() -> typing.Type['OnDemandPageContentRating']:
                return OnDemandPageContentRating
            
            
            class domain_link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'domain_link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def episodes() -> typing.Type['OnDemandPageEpisodes']:
                return OnDemandPageEpisodes
            
            
            class genres(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['OnDemandGenre']:
                        return OnDemandGenre
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['OnDemandGenre'], typing.List['OnDemandGenre']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'genres':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'OnDemandGenre':
                    return super().__getitem__(i)
            link = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['OnDemandPageMetadata']:
                return OnDemandPageMetadata
            name = schemas.StrSchema
        
            @staticmethod
            def pictures() -> typing.Type['Picture']:
                return Picture
        
            @staticmethod
            def preorder() -> typing.Type['OnDemandPagePreorder']:
                return OnDemandPagePreorder
        
            @staticmethod
            def published() -> typing.Type['OnDemandPagePublished']:
                return OnDemandPagePublished
            
            
            class rating(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rating':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            resource_key = schemas.StrSchema
        
            @staticmethod
            def subscription() -> typing.Type['OnDemandPageSubscription']:
                return OnDemandPageSubscription
            theme = schemas.StrSchema
        
            @staticmethod
            def thumbnail() -> typing.Type['Picture']:
                return Picture
        
            @staticmethod
            def trailer() -> typing.Type['Video']:
                return Video
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "film": "FILM",
                        "series": "SERIES",
                    }
                
                @schemas.classproperty
                def FILM(cls):
                    return cls("film")
                
                @schemas.classproperty
                def SERIES(cls):
                    return cls("series")
            uri = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            created_time = schemas.StrSchema
        
            @staticmethod
            def film() -> typing.Type['Video']:
                return Video
            modified_time = schemas.StrSchema
            
            
            class sku(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sku':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "description": description,
                "background": background,
                "colors": colors,
                "content_rating": content_rating,
                "domain_link": domain_link,
                "episodes": episodes,
                "genres": genres,
                "link": link,
                "metadata": metadata,
                "name": name,
                "pictures": pictures,
                "preorder": preorder,
                "published": published,
                "rating": rating,
                "resource_key": resource_key,
                "subscription": subscription,
                "theme": theme,
                "thumbnail": thumbnail,
                "trailer": trailer,
                "type": type,
                "uri": uri,
                "user": user,
                "created_time": created_time,
                "film": film,
                "modified_time": modified_time,
                "sku": sku,
            }
    
    metadata: 'OnDemandPageMetadata'
    thumbnail: 'Picture'
    domain_link: MetaOapg.properties.domain_link
    link: MetaOapg.properties.link
    rating: MetaOapg.properties.rating
    description: MetaOapg.properties.description
    published: 'OnDemandPagePublished'
    subscription: 'OnDemandPageSubscription'
    type: MetaOapg.properties.type
    uri: MetaOapg.properties.uri
    colors: 'OnDemandPageColors'
    pictures: 'Picture'
    trailer: 'Video'
    resource_key: MetaOapg.properties.resource_key
    background: 'Picture'
    genres: MetaOapg.properties.genres
    name: MetaOapg.properties.name
    content_rating: 'OnDemandPageContentRating'
    theme: MetaOapg.properties.theme
    user: 'User'
    episodes: 'OnDemandPageEpisodes'
    preorder: 'OnDemandPagePreorder'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["background"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colors"]) -> 'OnDemandPageColors': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_rating"]) -> 'OnDemandPageContentRating': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain_link"]) -> MetaOapg.properties.domain_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["episodes"]) -> 'OnDemandPageEpisodes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["genres"]) -> MetaOapg.properties.genres: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'OnDemandPageMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preorder"]) -> 'OnDemandPagePreorder': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["published"]) -> 'OnDemandPagePublished': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rating"]) -> MetaOapg.properties.rating: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription"]) -> 'OnDemandPageSubscription': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["theme"]) -> MetaOapg.properties.theme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thumbnail"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trailer"]) -> 'Video': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["film"]) -> 'Video': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sku"]) -> MetaOapg.properties.sku: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "background", "colors", "content_rating", "domain_link", "episodes", "genres", "link", "metadata", "name", "pictures", "preorder", "published", "rating", "resource_key", "subscription", "theme", "thumbnail", "trailer", "type", "uri", "user", "created_time", "film", "modified_time", "sku", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["background"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colors"]) -> 'OnDemandPageColors': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_rating"]) -> 'OnDemandPageContentRating': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain_link"]) -> MetaOapg.properties.domain_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["episodes"]) -> 'OnDemandPageEpisodes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["genres"]) -> MetaOapg.properties.genres: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'OnDemandPageMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preorder"]) -> 'OnDemandPagePreorder': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["published"]) -> 'OnDemandPagePublished': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rating"]) -> MetaOapg.properties.rating: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription"]) -> 'OnDemandPageSubscription': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["theme"]) -> MetaOapg.properties.theme: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thumbnail"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trailer"]) -> 'Video': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> typing.Union[MetaOapg.properties.created_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["film"]) -> typing.Union['Video', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_time"]) -> typing.Union[MetaOapg.properties.modified_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sku"]) -> typing.Union[MetaOapg.properties.sku, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "background", "colors", "content_rating", "domain_link", "episodes", "genres", "link", "metadata", "name", "pictures", "preorder", "published", "rating", "resource_key", "subscription", "theme", "thumbnail", "trailer", "type", "uri", "user", "created_time", "film", "modified_time", "sku", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        metadata: 'OnDemandPageMetadata',
        thumbnail: 'Picture',
        domain_link: typing.Union[MetaOapg.properties.domain_link, None, str, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        rating: typing.Union[MetaOapg.properties.rating, None, decimal.Decimal, int, float, ],
        description: typing.Union[MetaOapg.properties.description, None, str, ],
        published: 'OnDemandPagePublished',
        subscription: 'OnDemandPageSubscription',
        type: typing.Union[MetaOapg.properties.type, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        colors: 'OnDemandPageColors',
        pictures: 'Picture',
        trailer: 'Video',
        resource_key: typing.Union[MetaOapg.properties.resource_key, str, ],
        background: 'Picture',
        genres: typing.Union[MetaOapg.properties.genres, list, tuple, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        content_rating: 'OnDemandPageContentRating',
        theme: typing.Union[MetaOapg.properties.theme, str, ],
        user: 'User',
        episodes: 'OnDemandPageEpisodes',
        preorder: 'OnDemandPagePreorder',
        created_time: typing.Union[MetaOapg.properties.created_time, str, schemas.Unset] = schemas.unset,
        film: typing.Union['Video', schemas.Unset] = schemas.unset,
        modified_time: typing.Union[MetaOapg.properties.modified_time, str, schemas.Unset] = schemas.unset,
        sku: typing.Union[MetaOapg.properties.sku, None, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnDemandPage':
        return super().__new__(
            cls,
            *args,
            metadata=metadata,
            thumbnail=thumbnail,
            domain_link=domain_link,
            link=link,
            rating=rating,
            description=description,
            published=published,
            subscription=subscription,
            type=type,
            uri=uri,
            colors=colors,
            pictures=pictures,
            trailer=trailer,
            resource_key=resource_key,
            background=background,
            genres=genres,
            name=name,
            content_rating=content_rating,
            theme=theme,
            user=user,
            episodes=episodes,
            preorder=preorder,
            created_time=created_time,
            film=film,
            modified_time=modified_time,
            sku=sku,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.on_demand_genre import OnDemandGenre
from vimeo_python_sdk.model.on_demand_page_colors import OnDemandPageColors
from vimeo_python_sdk.model.on_demand_page_content_rating import OnDemandPageContentRating
from vimeo_python_sdk.model.on_demand_page_episodes import OnDemandPageEpisodes
from vimeo_python_sdk.model.on_demand_page_metadata import OnDemandPageMetadata
from vimeo_python_sdk.model.on_demand_page_preorder import OnDemandPagePreorder
from vimeo_python_sdk.model.on_demand_page_published import OnDemandPagePublished
from vimeo_python_sdk.model.on_demand_page_subscription import OnDemandPageSubscription
from vimeo_python_sdk.model.picture import Picture
from vimeo_python_sdk.model.user import User
from vimeo_python_sdk.model.video import Video
