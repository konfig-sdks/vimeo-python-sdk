# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class TextTrack(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "display_language",
            "link_expires_time",
            "hls_link_expires_time",
            "link",
            "name",
            "active",
            "language",
            "id",
            "type",
            "uri",
            "hls_link",
        }
        
        class properties:
            active = schemas.BoolSchema
            display_language = schemas.StrSchema
            hls_link = schemas.StrSchema
            hls_link_expires_time = schemas.StrSchema
            id = schemas.NumberSchema
            
            
            class language(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'language':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            link = schemas.StrSchema
            link_expires_time = schemas.StrSchema
            
            
            class name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class type(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "captions": "CAPTIONS",
                        "subtitles": "SUBTITLES",
                    }
                
                @schemas.classproperty
                def CAPTIONS(cls):
                    return cls("captions")
                
                @schemas.classproperty
                def SUBTITLES(cls):
                    return cls("subtitles")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            uri = schemas.StrSchema
            __annotations__ = {
                "active": active,
                "display_language": display_language,
                "hls_link": hls_link,
                "hls_link_expires_time": hls_link_expires_time,
                "id": id,
                "language": language,
                "link": link,
                "link_expires_time": link_expires_time,
                "name": name,
                "type": type,
                "uri": uri,
            }
    
    display_language: MetaOapg.properties.display_language
    link_expires_time: MetaOapg.properties.link_expires_time
    hls_link_expires_time: MetaOapg.properties.hls_link_expires_time
    link: MetaOapg.properties.link
    name: MetaOapg.properties.name
    active: MetaOapg.properties.active
    language: MetaOapg.properties.language
    id: MetaOapg.properties.id
    type: MetaOapg.properties.type
    uri: MetaOapg.properties.uri
    hls_link: MetaOapg.properties.hls_link
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_language"]) -> MetaOapg.properties.display_language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hls_link"]) -> MetaOapg.properties.hls_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hls_link_expires_time"]) -> MetaOapg.properties.hls_link_expires_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_expires_time"]) -> MetaOapg.properties.link_expires_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["active", "display_language", "hls_link", "hls_link_expires_time", "id", "language", "link", "link_expires_time", "name", "type", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_language"]) -> MetaOapg.properties.display_language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hls_link"]) -> MetaOapg.properties.hls_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hls_link_expires_time"]) -> MetaOapg.properties.hls_link_expires_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_expires_time"]) -> MetaOapg.properties.link_expires_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["active", "display_language", "hls_link", "hls_link_expires_time", "id", "language", "link", "link_expires_time", "name", "type", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        display_language: typing.Union[MetaOapg.properties.display_language, str, ],
        link_expires_time: typing.Union[MetaOapg.properties.link_expires_time, str, ],
        hls_link_expires_time: typing.Union[MetaOapg.properties.hls_link_expires_time, str, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        name: typing.Union[MetaOapg.properties.name, None, str, ],
        active: typing.Union[MetaOapg.properties.active, bool, ],
        language: typing.Union[MetaOapg.properties.language, None, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, ],
        type: typing.Union[MetaOapg.properties.type, None, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        hls_link: typing.Union[MetaOapg.properties.hls_link, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TextTrack':
        return super().__new__(
            cls,
            *args,
            display_language=display_language,
            link_expires_time=link_expires_time,
            hls_link_expires_time=hls_link_expires_time,
            link=link,
            name=name,
            active=active,
            language=language,
            id=id,
            type=type,
            uri=uri,
            hls_link=hls_link,
            _configuration=_configuration,
            **kwargs,
        )
