# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class TrimmedVideo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "modified_on",
            "created_version_id",
            "metadata",
            "created_on",
            "is_clip_finished_transcoding",
            "start",
            "clip_id",
            "end",
            "root_version_id",
            "uri",
            "version_quality",
        }
        
        class properties:
            clip_id = schemas.NumberSchema
            created_on = schemas.StrSchema
            created_version_id = schemas.StrSchema
            end = schemas.StrSchema
            is_clip_finished_transcoding = schemas.BoolSchema
        
            @staticmethod
            def metadata() -> typing.Type['TrimmedVideoMetadata']:
                return TrimmedVideoMetadata
            
            
            class modified_on(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modified_on':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            root_version_id = schemas.StrSchema
            start = schemas.StrSchema
            uri = schemas.StrSchema
            version_quality = schemas.StrSchema
            __annotations__ = {
                "clip_id": clip_id,
                "created_on": created_on,
                "created_version_id": created_version_id,
                "end": end,
                "is_clip_finished_transcoding": is_clip_finished_transcoding,
                "metadata": metadata,
                "modified_on": modified_on,
                "root_version_id": root_version_id,
                "start": start,
                "uri": uri,
                "version_quality": version_quality,
            }
    
    modified_on: MetaOapg.properties.modified_on
    created_version_id: MetaOapg.properties.created_version_id
    metadata: 'TrimmedVideoMetadata'
    created_on: MetaOapg.properties.created_on
    is_clip_finished_transcoding: MetaOapg.properties.is_clip_finished_transcoding
    start: MetaOapg.properties.start
    clip_id: MetaOapg.properties.clip_id
    end: MetaOapg.properties.end
    root_version_id: MetaOapg.properties.root_version_id
    uri: MetaOapg.properties.uri
    version_quality: MetaOapg.properties.version_quality
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clip_id"]) -> MetaOapg.properties.clip_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_version_id"]) -> MetaOapg.properties.created_version_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_clip_finished_transcoding"]) -> MetaOapg.properties.is_clip_finished_transcoding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'TrimmedVideoMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_on"]) -> MetaOapg.properties.modified_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["root_version_id"]) -> MetaOapg.properties.root_version_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version_quality"]) -> MetaOapg.properties.version_quality: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clip_id", "created_on", "created_version_id", "end", "is_clip_finished_transcoding", "metadata", "modified_on", "root_version_id", "start", "uri", "version_quality", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clip_id"]) -> MetaOapg.properties.clip_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_version_id"]) -> MetaOapg.properties.created_version_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end"]) -> MetaOapg.properties.end: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_clip_finished_transcoding"]) -> MetaOapg.properties.is_clip_finished_transcoding: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'TrimmedVideoMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_on"]) -> MetaOapg.properties.modified_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["root_version_id"]) -> MetaOapg.properties.root_version_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start"]) -> MetaOapg.properties.start: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version_quality"]) -> MetaOapg.properties.version_quality: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clip_id", "created_on", "created_version_id", "end", "is_clip_finished_transcoding", "metadata", "modified_on", "root_version_id", "start", "uri", "version_quality", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        modified_on: typing.Union[MetaOapg.properties.modified_on, None, str, ],
        created_version_id: typing.Union[MetaOapg.properties.created_version_id, str, ],
        metadata: 'TrimmedVideoMetadata',
        created_on: typing.Union[MetaOapg.properties.created_on, str, ],
        is_clip_finished_transcoding: typing.Union[MetaOapg.properties.is_clip_finished_transcoding, bool, ],
        start: typing.Union[MetaOapg.properties.start, str, ],
        clip_id: typing.Union[MetaOapg.properties.clip_id, decimal.Decimal, int, float, ],
        end: typing.Union[MetaOapg.properties.end, str, ],
        root_version_id: typing.Union[MetaOapg.properties.root_version_id, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        version_quality: typing.Union[MetaOapg.properties.version_quality, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrimmedVideo':
        return super().__new__(
            cls,
            *args,
            modified_on=modified_on,
            created_version_id=created_version_id,
            metadata=metadata,
            created_on=created_on,
            is_clip_finished_transcoding=is_clip_finished_transcoding,
            start=start,
            clip_id=clip_id,
            end=end,
            root_version_id=root_version_id,
            uri=uri,
            version_quality=version_quality,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.trimmed_video_metadata import TrimmedVideoMetadata
