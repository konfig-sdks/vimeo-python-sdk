# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class ProjectMetadataConnections(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A list of resource URIs related to the folder.
    """


    class MetaOapg:
        required = {
            "personal_team_folder_owner",
            "folders",
            "parent_folder",
            "resource_creator_team_user",
            "ancestor_path",
            "data_retention",
            "team_permissions",
            "videos",
            "user_folder_access_grants",
            "items",
            "group_folder_grants",
        }
        
        class properties:
        
            @staticmethod
            def ancestor_path() -> typing.Type['ProjectMetadataConnectionsAncestorPath']:
                return ProjectMetadataConnectionsAncestorPath
        
            @staticmethod
            def data_retention() -> typing.Type['ProjectMetadataConnectionsDataRetention']:
                return ProjectMetadataConnectionsDataRetention
        
            @staticmethod
            def folders() -> typing.Type['ProjectMetadataConnectionsFolders']:
                return ProjectMetadataConnectionsFolders
        
            @staticmethod
            def group_folder_grants() -> typing.Type['ProjectMetadataConnectionsGroupFolderGrants']:
                return ProjectMetadataConnectionsGroupFolderGrants
        
            @staticmethod
            def items() -> typing.Type['ProjectMetadataConnectionsItems']:
                return ProjectMetadataConnectionsItems
        
            @staticmethod
            def parent_folder() -> typing.Type['ProjectMetadataConnectionsParentFolder']:
                return ProjectMetadataConnectionsParentFolder
        
            @staticmethod
            def personal_team_folder_owner() -> typing.Type['ProjectMetadataConnectionsPersonalTeamFolderOwner']:
                return ProjectMetadataConnectionsPersonalTeamFolderOwner
        
            @staticmethod
            def resource_creator_team_user() -> typing.Type['ProjectMetadataConnectionsResourceCreatorTeamUser']:
                return ProjectMetadataConnectionsResourceCreatorTeamUser
        
            @staticmethod
            def team_permissions() -> typing.Type['ProjectMetadataConnectionsTeamPermissions']:
                return ProjectMetadataConnectionsTeamPermissions
        
            @staticmethod
            def user_folder_access_grants() -> typing.Type['ProjectMetadataConnectionsUserFolderAccessGrants']:
                return ProjectMetadataConnectionsUserFolderAccessGrants
        
            @staticmethod
            def videos() -> typing.Type['ProjectMetadataConnectionsVideos']:
                return ProjectMetadataConnectionsVideos
            __annotations__ = {
                "ancestor_path": ancestor_path,
                "data_retention": data_retention,
                "folders": folders,
                "group_folder_grants": group_folder_grants,
                "items": items,
                "parent_folder": parent_folder,
                "personal_team_folder_owner": personal_team_folder_owner,
                "resource_creator_team_user": resource_creator_team_user,
                "team_permissions": team_permissions,
                "user_folder_access_grants": user_folder_access_grants,
                "videos": videos,
            }
    
    personal_team_folder_owner: 'ProjectMetadataConnectionsPersonalTeamFolderOwner'
    folders: 'ProjectMetadataConnectionsFolders'
    parent_folder: 'ProjectMetadataConnectionsParentFolder'
    resource_creator_team_user: 'ProjectMetadataConnectionsResourceCreatorTeamUser'
    ancestor_path: 'ProjectMetadataConnectionsAncestorPath'
    data_retention: 'ProjectMetadataConnectionsDataRetention'
    team_permissions: 'ProjectMetadataConnectionsTeamPermissions'
    videos: 'ProjectMetadataConnectionsVideos'
    user_folder_access_grants: 'ProjectMetadataConnectionsUserFolderAccessGrants'
    items: 'ProjectMetadataConnectionsItems'
    group_folder_grants: 'ProjectMetadataConnectionsGroupFolderGrants'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ancestor_path"]) -> 'ProjectMetadataConnectionsAncestorPath': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data_retention"]) -> 'ProjectMetadataConnectionsDataRetention': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folders"]) -> 'ProjectMetadataConnectionsFolders': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group_folder_grants"]) -> 'ProjectMetadataConnectionsGroupFolderGrants': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> 'ProjectMetadataConnectionsItems': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_folder"]) -> 'ProjectMetadataConnectionsParentFolder': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["personal_team_folder_owner"]) -> 'ProjectMetadataConnectionsPersonalTeamFolderOwner': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_creator_team_user"]) -> 'ProjectMetadataConnectionsResourceCreatorTeamUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_permissions"]) -> 'ProjectMetadataConnectionsTeamPermissions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_folder_access_grants"]) -> 'ProjectMetadataConnectionsUserFolderAccessGrants': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videos"]) -> 'ProjectMetadataConnectionsVideos': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ancestor_path", "data_retention", "folders", "group_folder_grants", "items", "parent_folder", "personal_team_folder_owner", "resource_creator_team_user", "team_permissions", "user_folder_access_grants", "videos", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ancestor_path"]) -> 'ProjectMetadataConnectionsAncestorPath': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data_retention"]) -> 'ProjectMetadataConnectionsDataRetention': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folders"]) -> 'ProjectMetadataConnectionsFolders': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group_folder_grants"]) -> 'ProjectMetadataConnectionsGroupFolderGrants': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> 'ProjectMetadataConnectionsItems': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_folder"]) -> 'ProjectMetadataConnectionsParentFolder': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["personal_team_folder_owner"]) -> 'ProjectMetadataConnectionsPersonalTeamFolderOwner': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_creator_team_user"]) -> 'ProjectMetadataConnectionsResourceCreatorTeamUser': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_permissions"]) -> 'ProjectMetadataConnectionsTeamPermissions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_folder_access_grants"]) -> 'ProjectMetadataConnectionsUserFolderAccessGrants': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videos"]) -> 'ProjectMetadataConnectionsVideos': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ancestor_path", "data_retention", "folders", "group_folder_grants", "items", "parent_folder", "personal_team_folder_owner", "resource_creator_team_user", "team_permissions", "user_folder_access_grants", "videos", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        personal_team_folder_owner: 'ProjectMetadataConnectionsPersonalTeamFolderOwner',
        folders: 'ProjectMetadataConnectionsFolders',
        parent_folder: 'ProjectMetadataConnectionsParentFolder',
        resource_creator_team_user: 'ProjectMetadataConnectionsResourceCreatorTeamUser',
        ancestor_path: 'ProjectMetadataConnectionsAncestorPath',
        data_retention: 'ProjectMetadataConnectionsDataRetention',
        team_permissions: 'ProjectMetadataConnectionsTeamPermissions',
        videos: 'ProjectMetadataConnectionsVideos',
        user_folder_access_grants: 'ProjectMetadataConnectionsUserFolderAccessGrants',
        items: 'ProjectMetadataConnectionsItems',
        group_folder_grants: 'ProjectMetadataConnectionsGroupFolderGrants',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectMetadataConnections':
        return super().__new__(
            cls,
            *args,
            personal_team_folder_owner=personal_team_folder_owner,
            folders=folders,
            parent_folder=parent_folder,
            resource_creator_team_user=resource_creator_team_user,
            ancestor_path=ancestor_path,
            data_retention=data_retention,
            team_permissions=team_permissions,
            videos=videos,
            user_folder_access_grants=user_folder_access_grants,
            items=items,
            group_folder_grants=group_folder_grants,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.project_metadata_connections_ancestor_path import ProjectMetadataConnectionsAncestorPath
from vimeo_python_sdk.model.project_metadata_connections_data_retention import ProjectMetadataConnectionsDataRetention
from vimeo_python_sdk.model.project_metadata_connections_folders import ProjectMetadataConnectionsFolders
from vimeo_python_sdk.model.project_metadata_connections_group_folder_grants import ProjectMetadataConnectionsGroupFolderGrants
from vimeo_python_sdk.model.project_metadata_connections_items import ProjectMetadataConnectionsItems
from vimeo_python_sdk.model.project_metadata_connections_parent_folder import ProjectMetadataConnectionsParentFolder
from vimeo_python_sdk.model.project_metadata_connections_personal_team_folder_owner import ProjectMetadataConnectionsPersonalTeamFolderOwner
from vimeo_python_sdk.model.project_metadata_connections_resource_creator_team_user import ProjectMetadataConnectionsResourceCreatorTeamUser
from vimeo_python_sdk.model.project_metadata_connections_team_permissions import ProjectMetadataConnectionsTeamPermissions
from vimeo_python_sdk.model.project_metadata_connections_user_folder_access_grants import ProjectMetadataConnectionsUserFolderAccessGrants
from vimeo_python_sdk.model.project_metadata_connections_videos import ProjectMetadataConnectionsVideos
