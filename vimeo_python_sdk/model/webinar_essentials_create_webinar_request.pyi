# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class WebinarEssentialsCreateWebinarRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "title",
        }
        
        class properties:
            title = schemas.StrSchema
            description = schemas.StrSchema
        
            @staticmethod
            def email_settings() -> typing.Type['WebinarEssentialsCreateWebinarRequestEmailSettings']:
                return WebinarEssentialsCreateWebinarRequestEmailSettings
            folder_uri = schemas.NumberSchema
            password = schemas.StrSchema
        
            @staticmethod
            def privacy() -> typing.Type['WebinarEssentialsCreateWebinarRequestPrivacy']:
                return WebinarEssentialsCreateWebinarRequestPrivacy
        
            @staticmethod
            def schedule() -> typing.Type['WebinarEssentialsCreateWebinarRequestSchedule']:
                return WebinarEssentialsCreateWebinarRequestSchedule
            time_zone = schemas.StrSchema
            __annotations__ = {
                "title": title,
                "description": description,
                "email_settings": email_settings,
                "folder_uri": folder_uri,
                "password": password,
                "privacy": privacy,
                "schedule": schedule,
                "time_zone": time_zone,
            }
    
    title: MetaOapg.properties.title
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_settings"]) -> 'WebinarEssentialsCreateWebinarRequestEmailSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder_uri"]) -> MetaOapg.properties.folder_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> 'WebinarEssentialsCreateWebinarRequestPrivacy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule"]) -> 'WebinarEssentialsCreateWebinarRequestSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_zone"]) -> MetaOapg.properties.time_zone: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "description", "email_settings", "folder_uri", "password", "privacy", "schedule", "time_zone", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_settings"]) -> typing.Union['WebinarEssentialsCreateWebinarRequestEmailSettings', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder_uri"]) -> typing.Union[MetaOapg.properties.folder_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> typing.Union['WebinarEssentialsCreateWebinarRequestPrivacy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule"]) -> typing.Union['WebinarEssentialsCreateWebinarRequestSchedule', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_zone"]) -> typing.Union[MetaOapg.properties.time_zone, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "description", "email_settings", "folder_uri", "password", "privacy", "schedule", "time_zone", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        email_settings: typing.Union['WebinarEssentialsCreateWebinarRequestEmailSettings', schemas.Unset] = schemas.unset,
        folder_uri: typing.Union[MetaOapg.properties.folder_uri, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        privacy: typing.Union['WebinarEssentialsCreateWebinarRequestPrivacy', schemas.Unset] = schemas.unset,
        schedule: typing.Union['WebinarEssentialsCreateWebinarRequestSchedule', schemas.Unset] = schemas.unset,
        time_zone: typing.Union[MetaOapg.properties.time_zone, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarEssentialsCreateWebinarRequest':
        return super().__new__(
            cls,
            *args,
            title=title,
            description=description,
            email_settings=email_settings,
            folder_uri=folder_uri,
            password=password,
            privacy=privacy,
            schedule=schedule,
            time_zone=time_zone,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.webinar_essentials_create_webinar_request_email_settings import WebinarEssentialsCreateWebinarRequestEmailSettings
from vimeo_python_sdk.model.webinar_essentials_create_webinar_request_privacy import WebinarEssentialsCreateWebinarRequestPrivacy
from vimeo_python_sdk.model.webinar_essentials_create_webinar_request_schedule import WebinarEssentialsCreateWebinarRequestSchedule
