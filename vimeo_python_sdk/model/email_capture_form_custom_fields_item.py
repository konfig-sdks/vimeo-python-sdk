# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class EmailCaptureFormCustomFieldsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "connected_fields",
            "field_metadata",
            "static_field",
            "locked",
            "field_type",
            "required",
            "field_name",
        }
        
        class properties:
        
            @staticmethod
            def connected_fields() -> typing.Type['EmailCaptureFormCustomFieldsItemConnectedFields']:
                return EmailCaptureFormCustomFieldsItemConnectedFields
        
            @staticmethod
            def field_metadata() -> typing.Type['EmailCaptureFormCustomFieldsItemFieldMetadata']:
                return EmailCaptureFormCustomFieldsItemFieldMetadata
            field_name = schemas.StrSchema
            
            
            class field_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "dropdown": "DROPDOWN",
                        "text": "TEXT",
                    }
                
                @schemas.classproperty
                def DROPDOWN(cls):
                    return cls("dropdown")
                
                @schemas.classproperty
                def TEXT(cls):
                    return cls("text")
            locked = schemas.BoolSchema
            required = schemas.BoolSchema
            static_field = schemas.BoolSchema
            __annotations__ = {
                "connected_fields": connected_fields,
                "field_metadata": field_metadata,
                "field_name": field_name,
                "field_type": field_type,
                "locked": locked,
                "required": required,
                "static_field": static_field,
            }
    
    connected_fields: 'EmailCaptureFormCustomFieldsItemConnectedFields'
    field_metadata: 'EmailCaptureFormCustomFieldsItemFieldMetadata'
    static_field: MetaOapg.properties.static_field
    locked: MetaOapg.properties.locked
    field_type: MetaOapg.properties.field_type
    required: MetaOapg.properties.required
    field_name: MetaOapg.properties.field_name
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected_fields"]) -> 'EmailCaptureFormCustomFieldsItemConnectedFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field_metadata"]) -> 'EmailCaptureFormCustomFieldsItemFieldMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field_name"]) -> MetaOapg.properties.field_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field_type"]) -> MetaOapg.properties.field_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["static_field"]) -> MetaOapg.properties.static_field: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["connected_fields", "field_metadata", "field_name", "field_type", "locked", "required", "static_field", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected_fields"]) -> 'EmailCaptureFormCustomFieldsItemConnectedFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field_metadata"]) -> 'EmailCaptureFormCustomFieldsItemFieldMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field_name"]) -> MetaOapg.properties.field_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field_type"]) -> MetaOapg.properties.field_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locked"]) -> MetaOapg.properties.locked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["required"]) -> MetaOapg.properties.required: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["static_field"]) -> MetaOapg.properties.static_field: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connected_fields", "field_metadata", "field_name", "field_type", "locked", "required", "static_field", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        connected_fields: 'EmailCaptureFormCustomFieldsItemConnectedFields',
        field_metadata: 'EmailCaptureFormCustomFieldsItemFieldMetadata',
        static_field: typing.Union[MetaOapg.properties.static_field, bool, ],
        locked: typing.Union[MetaOapg.properties.locked, bool, ],
        field_type: typing.Union[MetaOapg.properties.field_type, str, ],
        required: typing.Union[MetaOapg.properties.required, bool, ],
        field_name: typing.Union[MetaOapg.properties.field_name, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmailCaptureFormCustomFieldsItem':
        return super().__new__(
            cls,
            *args,
            connected_fields=connected_fields,
            field_metadata=field_metadata,
            static_field=static_field,
            locked=locked,
            field_type=field_type,
            required=required,
            field_name=field_name,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.email_capture_form_custom_fields_item_connected_fields import EmailCaptureFormCustomFieldsItemConnectedFields
from vimeo_python_sdk.model.email_capture_form_custom_fields_item_field_metadata import EmailCaptureFormCustomFieldsItemFieldMetadata
