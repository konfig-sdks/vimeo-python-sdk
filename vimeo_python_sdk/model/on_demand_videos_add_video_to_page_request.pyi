# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class OnDemandVideosAddVideoToPageRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EXTRA(cls):
                    return cls("extra")
                
                @schemas.classproperty
                def MAIN(cls):
                    return cls("main")
                
                @schemas.classproperty
                def TRAILER(cls):
                    return cls("trailer")
        
            @staticmethod
            def buy() -> typing.Type['OnDemandVideosAddVideoToPageRequestBuy']:
                return OnDemandVideosAddVideoToPageRequestBuy
            position = schemas.NumberSchema
            release_year = schemas.NumberSchema
        
            @staticmethod
            def rent() -> typing.Type['OnDemandVideosAddVideoToPageRequestRent']:
                return OnDemandVideosAddVideoToPageRequestRent
            __annotations__ = {
                "type": type,
                "buy": buy,
                "position": position,
                "release_year": release_year,
                "rent": rent,
            }
    
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buy"]) -> 'OnDemandVideosAddVideoToPageRequestBuy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_year"]) -> MetaOapg.properties.release_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rent"]) -> 'OnDemandVideosAddVideoToPageRequestRent': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "buy", "position", "release_year", "rent", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buy"]) -> typing.Union['OnDemandVideosAddVideoToPageRequestBuy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union[MetaOapg.properties.position, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_year"]) -> typing.Union[MetaOapg.properties.release_year, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rent"]) -> typing.Union['OnDemandVideosAddVideoToPageRequestRent', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "buy", "position", "release_year", "rent", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        buy: typing.Union['OnDemandVideosAddVideoToPageRequestBuy', schemas.Unset] = schemas.unset,
        position: typing.Union[MetaOapg.properties.position, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        release_year: typing.Union[MetaOapg.properties.release_year, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        rent: typing.Union['OnDemandVideosAddVideoToPageRequestRent', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnDemandVideosAddVideoToPageRequest':
        return super().__new__(
            cls,
            *args,
            type=type,
            buy=buy,
            position=position,
            release_year=release_year,
            rent=rent,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.on_demand_videos_add_video_to_page_request_buy import OnDemandVideosAddVideoToPageRequestBuy
from vimeo_python_sdk.model.on_demand_videos_add_video_to_page_request_rent import OnDemandVideosAddVideoToPageRequestRent
