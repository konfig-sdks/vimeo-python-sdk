# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class TeamMembershipMetadataConnectionsOwner(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A standard connection object indicating how to get the owner of this user.
    """


    class MetaOapg:
        required = {
            "total",
            "options",
            "total_members",
            "display_name",
            "uri",
            "email",
            "invites_remaining",
        }
        
        class properties:
            display_name = schemas.StrSchema
            email = schemas.StrSchema
            invites_remaining = schemas.NumberSchema
        
            @staticmethod
            def options() -> typing.Type['TeamMembershipMetadataConnectionsOwnerOptions']:
                return TeamMembershipMetadataConnectionsOwnerOptions
            total = schemas.NumberSchema
            total_members = schemas.NumberSchema
            uri = schemas.StrSchema
            __annotations__ = {
                "display_name": display_name,
                "email": email,
                "invites_remaining": invites_remaining,
                "options": options,
                "total": total,
                "total_members": total_members,
                "uri": uri,
            }
    
    total: MetaOapg.properties.total
    options: 'TeamMembershipMetadataConnectionsOwnerOptions'
    total_members: MetaOapg.properties.total_members
    display_name: MetaOapg.properties.display_name
    uri: MetaOapg.properties.uri
    email: MetaOapg.properties.email
    invites_remaining: MetaOapg.properties.invites_remaining
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invites_remaining"]) -> MetaOapg.properties.invites_remaining: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'TeamMembershipMetadataConnectionsOwnerOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_members"]) -> MetaOapg.properties.total_members: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["display_name", "email", "invites_remaining", "options", "total", "total_members", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invites_remaining"]) -> MetaOapg.properties.invites_remaining: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> 'TeamMembershipMetadataConnectionsOwnerOptions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_members"]) -> MetaOapg.properties.total_members: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["display_name", "email", "invites_remaining", "options", "total", "total_members", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, float, ],
        options: 'TeamMembershipMetadataConnectionsOwnerOptions',
        total_members: typing.Union[MetaOapg.properties.total_members, decimal.Decimal, int, float, ],
        display_name: typing.Union[MetaOapg.properties.display_name, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        invites_remaining: typing.Union[MetaOapg.properties.invites_remaining, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TeamMembershipMetadataConnectionsOwner':
        return super().__new__(
            cls,
            *args,
            total=total,
            options=options,
            total_members=total_members,
            display_name=display_name,
            uri=uri,
            email=email,
            invites_remaining=invites_remaining,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.team_membership_metadata_connections_owner_options import TeamMembershipMetadataConnectionsOwnerOptions
