# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideoMetadata(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The video's metadata.
    """


    class MetaOapg:
        required = {
            "is_vimeo_create",
            "is_screen_record",
            "is_webinar",
            "has_chapter_suggestions",
            "is_zoom_upload",
            "connections",
            "interactions",
        }
        
        class properties:
        
            @staticmethod
            def connections() -> typing.Type['VideoMetadataConnections']:
                return VideoMetadataConnections
            has_chapter_suggestions = schemas.BoolSchema
        
            @staticmethod
            def interactions() -> typing.Type['VideoMetadataInteractions']:
                return VideoMetadataInteractions
            is_screen_record = schemas.BoolSchema
            is_vimeo_create = schemas.BoolSchema
            is_webinar = schemas.BoolSchema
            is_zoom_upload = schemas.BoolSchema
            can_be_replaced = schemas.BoolSchema
            has_email_capture = schemas.BoolSchema
            __annotations__ = {
                "connections": connections,
                "has_chapter_suggestions": has_chapter_suggestions,
                "interactions": interactions,
                "is_screen_record": is_screen_record,
                "is_vimeo_create": is_vimeo_create,
                "is_webinar": is_webinar,
                "is_zoom_upload": is_zoom_upload,
                "can_be_replaced": can_be_replaced,
                "has_email_capture": has_email_capture,
            }
    
    is_vimeo_create: MetaOapg.properties.is_vimeo_create
    is_screen_record: MetaOapg.properties.is_screen_record
    is_webinar: MetaOapg.properties.is_webinar
    has_chapter_suggestions: MetaOapg.properties.has_chapter_suggestions
    is_zoom_upload: MetaOapg.properties.is_zoom_upload
    connections: 'VideoMetadataConnections'
    interactions: 'VideoMetadataInteractions'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connections"]) -> 'VideoMetadataConnections': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_chapter_suggestions"]) -> MetaOapg.properties.has_chapter_suggestions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interactions"]) -> 'VideoMetadataInteractions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_screen_record"]) -> MetaOapg.properties.is_screen_record: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_vimeo_create"]) -> MetaOapg.properties.is_vimeo_create: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_webinar"]) -> MetaOapg.properties.is_webinar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_zoom_upload"]) -> MetaOapg.properties.is_zoom_upload: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_be_replaced"]) -> MetaOapg.properties.can_be_replaced: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_email_capture"]) -> MetaOapg.properties.has_email_capture: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["connections", "has_chapter_suggestions", "interactions", "is_screen_record", "is_vimeo_create", "is_webinar", "is_zoom_upload", "can_be_replaced", "has_email_capture", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connections"]) -> 'VideoMetadataConnections': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_chapter_suggestions"]) -> MetaOapg.properties.has_chapter_suggestions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interactions"]) -> 'VideoMetadataInteractions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_screen_record"]) -> MetaOapg.properties.is_screen_record: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_vimeo_create"]) -> MetaOapg.properties.is_vimeo_create: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_webinar"]) -> MetaOapg.properties.is_webinar: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_zoom_upload"]) -> MetaOapg.properties.is_zoom_upload: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_be_replaced"]) -> typing.Union[MetaOapg.properties.can_be_replaced, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_email_capture"]) -> typing.Union[MetaOapg.properties.has_email_capture, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["connections", "has_chapter_suggestions", "interactions", "is_screen_record", "is_vimeo_create", "is_webinar", "is_zoom_upload", "can_be_replaced", "has_email_capture", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_vimeo_create: typing.Union[MetaOapg.properties.is_vimeo_create, bool, ],
        is_screen_record: typing.Union[MetaOapg.properties.is_screen_record, bool, ],
        is_webinar: typing.Union[MetaOapg.properties.is_webinar, bool, ],
        has_chapter_suggestions: typing.Union[MetaOapg.properties.has_chapter_suggestions, bool, ],
        is_zoom_upload: typing.Union[MetaOapg.properties.is_zoom_upload, bool, ],
        connections: 'VideoMetadataConnections',
        interactions: 'VideoMetadataInteractions',
        can_be_replaced: typing.Union[MetaOapg.properties.can_be_replaced, bool, schemas.Unset] = schemas.unset,
        has_email_capture: typing.Union[MetaOapg.properties.has_email_capture, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoMetadata':
        return super().__new__(
            cls,
            *args,
            is_vimeo_create=is_vimeo_create,
            is_screen_record=is_screen_record,
            is_webinar=is_webinar,
            has_chapter_suggestions=has_chapter_suggestions,
            is_zoom_upload=is_zoom_upload,
            connections=connections,
            interactions=interactions,
            can_be_replaced=can_be_replaced,
            has_email_capture=has_email_capture,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.video_metadata_connections import VideoMetadataConnections
from vimeo_python_sdk.model.video_metadata_interactions import VideoMetadataInteractions
