# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class UploadAttempt(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "ticket_id",
            "uri",
            "user",
            "upload_link",
        }
        
        class properties:
            ticket_id = schemas.StrSchema
            upload_link = schemas.StrSchema
            uri = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
        
            @staticmethod
            def clip() -> typing.Type['Video']:
                return Video
            form = schemas.StrSchema
            __annotations__ = {
                "ticket_id": ticket_id,
                "upload_link": upload_link,
                "uri": uri,
                "user": user,
                "clip": clip,
                "form": form,
            }
    
    ticket_id: MetaOapg.properties.ticket_id
    uri: MetaOapg.properties.uri
    user: 'User'
    upload_link: MetaOapg.properties.upload_link
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ticket_id"]) -> MetaOapg.properties.ticket_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_link"]) -> MetaOapg.properties.upload_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clip"]) -> 'Video': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["form"]) -> MetaOapg.properties.form: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ticket_id", "upload_link", "uri", "user", "clip", "form", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ticket_id"]) -> MetaOapg.properties.ticket_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_link"]) -> MetaOapg.properties.upload_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clip"]) -> typing.Union['Video', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["form"]) -> typing.Union[MetaOapg.properties.form, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ticket_id", "upload_link", "uri", "user", "clip", "form", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ticket_id: typing.Union[MetaOapg.properties.ticket_id, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        user: 'User',
        upload_link: typing.Union[MetaOapg.properties.upload_link, str, ],
        clip: typing.Union['Video', schemas.Unset] = schemas.unset,
        form: typing.Union[MetaOapg.properties.form, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UploadAttempt':
        return super().__new__(
            cls,
            *args,
            ticket_id=ticket_id,
            uri=uri,
            user=user,
            upload_link=upload_link,
            clip=clip,
            form=form,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.user import User
from vimeo_python_sdk.model.video import Video
