# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Error(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "developer_message",
            "link",
            "error_code",
            "error",
        }
        
        class properties:
            developer_message = schemas.StrSchema
            error = schemas.StrSchema
            error_code = schemas.NumberSchema
            link = schemas.StrSchema
            __annotations__ = {
                "developer_message": developer_message,
                "error": error,
                "error_code": error_code,
                "link": link,
            }
    
    developer_message: MetaOapg.properties.developer_message
    link: MetaOapg.properties.link
    error_code: MetaOapg.properties.error_code
    error: MetaOapg.properties.error
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["developer_message"]) -> MetaOapg.properties.developer_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["developer_message", "error", "error_code", "link", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["developer_message"]) -> MetaOapg.properties.developer_message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error"]) -> MetaOapg.properties.error: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["error_code"]) -> MetaOapg.properties.error_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["developer_message", "error", "error_code", "link", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        developer_message: typing.Union[MetaOapg.properties.developer_message, str, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        error_code: typing.Union[MetaOapg.properties.error_code, decimal.Decimal, int, float, ],
        error: typing.Union[MetaOapg.properties.error, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Error':
        return super().__new__(
            cls,
            *args,
            developer_message=developer_message,
            link=link,
            error_code=error_code,
            error=error,
            _configuration=_configuration,
            **kwargs,
        )
