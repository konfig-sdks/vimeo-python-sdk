# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class CategoryMetadataConnections(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A collection of information that is connected to this resource.
    """


    class MetaOapg:
        required = {
            "channels",
            "groups",
            "videos",
            "users",
        }
        
        class properties:
        
            @staticmethod
            def channels() -> typing.Type['CategoryMetadataConnectionsChannels']:
                return CategoryMetadataConnectionsChannels
        
            @staticmethod
            def groups() -> typing.Type['CategoryMetadataConnectionsGroups']:
                return CategoryMetadataConnectionsGroups
        
            @staticmethod
            def users() -> typing.Type['CategoryMetadataConnectionsUsers']:
                return CategoryMetadataConnectionsUsers
        
            @staticmethod
            def videos() -> typing.Type['CategoryMetadataConnectionsVideos']:
                return CategoryMetadataConnectionsVideos
            __annotations__ = {
                "channels": channels,
                "groups": groups,
                "users": users,
                "videos": videos,
            }
    
    channels: 'CategoryMetadataConnectionsChannels'
    groups: 'CategoryMetadataConnectionsGroups'
    videos: 'CategoryMetadataConnectionsVideos'
    users: 'CategoryMetadataConnectionsUsers'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channels"]) -> 'CategoryMetadataConnectionsChannels': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> 'CategoryMetadataConnectionsGroups': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users"]) -> 'CategoryMetadataConnectionsUsers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videos"]) -> 'CategoryMetadataConnectionsVideos': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["channels", "groups", "users", "videos", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channels"]) -> 'CategoryMetadataConnectionsChannels': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> 'CategoryMetadataConnectionsGroups': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users"]) -> 'CategoryMetadataConnectionsUsers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videos"]) -> 'CategoryMetadataConnectionsVideos': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["channels", "groups", "users", "videos", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        channels: 'CategoryMetadataConnectionsChannels',
        groups: 'CategoryMetadataConnectionsGroups',
        videos: 'CategoryMetadataConnectionsVideos',
        users: 'CategoryMetadataConnectionsUsers',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CategoryMetadataConnections':
        return super().__new__(
            cls,
            *args,
            channels=channels,
            groups=groups,
            videos=videos,
            users=users,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.category_metadata_connections_channels import CategoryMetadataConnectionsChannels
from vimeo_python_sdk.model.category_metadata_connections_groups import CategoryMetadataConnectionsGroups
from vimeo_python_sdk.model.category_metadata_connections_users import CategoryMetadataConnectionsUsers
from vimeo_python_sdk.model.category_metadata_connections_videos import CategoryMetadataConnectionsVideos
