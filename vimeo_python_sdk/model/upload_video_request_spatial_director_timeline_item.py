# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class UploadVideoRequestSpatialDirectorTimelineItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "time_code",
            "pitch",
            "yaw",
        }
        
        class properties:
            pitch = schemas.NumberSchema
            time_code = schemas.NumberSchema
            yaw = schemas.NumberSchema
            roll = schemas.NumberSchema
            __annotations__ = {
                "pitch": pitch,
                "time_code": time_code,
                "yaw": yaw,
                "roll": roll,
            }
    
    time_code: MetaOapg.properties.time_code
    pitch: MetaOapg.properties.pitch
    yaw: MetaOapg.properties.yaw
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitch"]) -> MetaOapg.properties.pitch: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_code"]) -> MetaOapg.properties.time_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["yaw"]) -> MetaOapg.properties.yaw: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["roll"]) -> MetaOapg.properties.roll: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pitch", "time_code", "yaw", "roll", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitch"]) -> MetaOapg.properties.pitch: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_code"]) -> MetaOapg.properties.time_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["yaw"]) -> MetaOapg.properties.yaw: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["roll"]) -> typing.Union[MetaOapg.properties.roll, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pitch", "time_code", "yaw", "roll", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        time_code: typing.Union[MetaOapg.properties.time_code, decimal.Decimal, int, float, ],
        pitch: typing.Union[MetaOapg.properties.pitch, decimal.Decimal, int, float, ],
        yaw: typing.Union[MetaOapg.properties.yaw, decimal.Decimal, int, float, ],
        roll: typing.Union[MetaOapg.properties.roll, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UploadVideoRequestSpatialDirectorTimelineItem':
        return super().__new__(
            cls,
            *args,
            time_code=time_code,
            pitch=pitch,
            yaw=yaw,
            roll=roll,
            _configuration=_configuration,
            **kwargs,
        )
