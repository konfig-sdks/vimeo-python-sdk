# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Category(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "parent",
            "metadata",
            "is_deprecated",
            "resource_key",
            "top_level",
            "link",
            "name",
            "last_video_featured_time",
            "uri",
            "pictures",
        }
        
        class properties:
            is_deprecated = schemas.BoolSchema
            last_video_featured_time = schemas.StrSchema
            link = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['CategoryMetadata']:
                return CategoryMetadata
            name = schemas.StrSchema
        
            @staticmethod
            def parent() -> typing.Type['CategoryParent']:
                return CategoryParent
        
            @staticmethod
            def pictures() -> typing.Type['Picture']:
                return Picture
            resource_key = schemas.StrSchema
            top_level = schemas.BoolSchema
            uri = schemas.StrSchema
        
            @staticmethod
            def icon() -> typing.Type['Picture']:
                return Picture
        
            @staticmethod
            def subcategories() -> typing.Type['CategorySubcategories']:
                return CategorySubcategories
            __annotations__ = {
                "is_deprecated": is_deprecated,
                "last_video_featured_time": last_video_featured_time,
                "link": link,
                "metadata": metadata,
                "name": name,
                "parent": parent,
                "pictures": pictures,
                "resource_key": resource_key,
                "top_level": top_level,
                "uri": uri,
                "icon": icon,
                "subcategories": subcategories,
            }
    
    parent: 'CategoryParent'
    metadata: 'CategoryMetadata'
    is_deprecated: MetaOapg.properties.is_deprecated
    resource_key: MetaOapg.properties.resource_key
    top_level: MetaOapg.properties.top_level
    link: MetaOapg.properties.link
    name: MetaOapg.properties.name
    last_video_featured_time: MetaOapg.properties.last_video_featured_time
    uri: MetaOapg.properties.uri
    pictures: 'Picture'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_deprecated"]) -> MetaOapg.properties.is_deprecated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_video_featured_time"]) -> MetaOapg.properties.last_video_featured_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'CategoryMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent"]) -> 'CategoryParent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["top_level"]) -> MetaOapg.properties.top_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["icon"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subcategories"]) -> 'CategorySubcategories': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_deprecated", "last_video_featured_time", "link", "metadata", "name", "parent", "pictures", "resource_key", "top_level", "uri", "icon", "subcategories", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_deprecated"]) -> MetaOapg.properties.is_deprecated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_video_featured_time"]) -> MetaOapg.properties.last_video_featured_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'CategoryMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent"]) -> 'CategoryParent': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["top_level"]) -> MetaOapg.properties.top_level: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["icon"]) -> typing.Union['Picture', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subcategories"]) -> typing.Union['CategorySubcategories', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_deprecated", "last_video_featured_time", "link", "metadata", "name", "parent", "pictures", "resource_key", "top_level", "uri", "icon", "subcategories", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        parent: 'CategoryParent',
        metadata: 'CategoryMetadata',
        is_deprecated: typing.Union[MetaOapg.properties.is_deprecated, bool, ],
        resource_key: typing.Union[MetaOapg.properties.resource_key, str, ],
        top_level: typing.Union[MetaOapg.properties.top_level, bool, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        last_video_featured_time: typing.Union[MetaOapg.properties.last_video_featured_time, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        pictures: 'Picture',
        icon: typing.Union['Picture', schemas.Unset] = schemas.unset,
        subcategories: typing.Union['CategorySubcategories', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Category':
        return super().__new__(
            cls,
            *args,
            parent=parent,
            metadata=metadata,
            is_deprecated=is_deprecated,
            resource_key=resource_key,
            top_level=top_level,
            link=link,
            name=name,
            last_video_featured_time=last_video_featured_time,
            uri=uri,
            pictures=pictures,
            icon=icon,
            subcategories=subcategories,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.category_metadata import CategoryMetadata
from vimeo_python_sdk.model.category_parent import CategoryParent
from vimeo_python_sdk.model.category_subcategories import CategorySubcategories
from vimeo_python_sdk.model.picture import Picture
