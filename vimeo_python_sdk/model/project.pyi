# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Project(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created_time",
            "settings",
            "manage_link",
            "metadata",
            "has_subfolder",
            "link",
            "privacy",
            "is_private_to_user",
            "pinned_on",
            "last_user_action_event_date",
            "uri",
            "is_pinned",
            "modified_time",
            "resource_key",
            "name",
            "access_grant",
            "user",
            "creator_uri",
        }
        
        class properties:
            access_grant = schemas.DictSchema
            created_time = schemas.StrSchema
            creator_uri = schemas.StrSchema
            has_subfolder = schemas.BoolSchema
            is_pinned = schemas.BoolSchema
            is_private_to_user = schemas.BoolSchema
            
            
            class last_user_action_event_date(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_user_action_event_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            link = schemas.StrSchema
            manage_link = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['ProjectMetadata']:
                return ProjectMetadata
            modified_time = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class pinned_on(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'pinned_on':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def privacy() -> typing.Type['ProjectPrivacy']:
                return ProjectPrivacy
            resource_key = schemas.StrSchema
        
            @staticmethod
            def settings() -> typing.Type['ProjectSettings']:
                return ProjectSettings
            uri = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            __annotations__ = {
                "access_grant": access_grant,
                "created_time": created_time,
                "creator_uri": creator_uri,
                "has_subfolder": has_subfolder,
                "is_pinned": is_pinned,
                "is_private_to_user": is_private_to_user,
                "last_user_action_event_date": last_user_action_event_date,
                "link": link,
                "manage_link": manage_link,
                "metadata": metadata,
                "modified_time": modified_time,
                "name": name,
                "pinned_on": pinned_on,
                "privacy": privacy,
                "resource_key": resource_key,
                "settings": settings,
                "uri": uri,
                "user": user,
            }
    
    created_time: MetaOapg.properties.created_time
    settings: 'ProjectSettings'
    manage_link: MetaOapg.properties.manage_link
    metadata: 'ProjectMetadata'
    has_subfolder: MetaOapg.properties.has_subfolder
    link: MetaOapg.properties.link
    privacy: 'ProjectPrivacy'
    is_private_to_user: MetaOapg.properties.is_private_to_user
    pinned_on: MetaOapg.properties.pinned_on
    last_user_action_event_date: MetaOapg.properties.last_user_action_event_date
    uri: MetaOapg.properties.uri
    is_pinned: MetaOapg.properties.is_pinned
    modified_time: MetaOapg.properties.modified_time
    resource_key: MetaOapg.properties.resource_key
    name: MetaOapg.properties.name
    access_grant: MetaOapg.properties.access_grant
    user: 'User'
    creator_uri: MetaOapg.properties.creator_uri
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_grant"]) -> MetaOapg.properties.access_grant: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creator_uri"]) -> MetaOapg.properties.creator_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_subfolder"]) -> MetaOapg.properties.has_subfolder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_pinned"]) -> MetaOapg.properties.is_pinned: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_private_to_user"]) -> MetaOapg.properties.is_private_to_user: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_user_action_event_date"]) -> MetaOapg.properties.last_user_action_event_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manage_link"]) -> MetaOapg.properties.manage_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'ProjectMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pinned_on"]) -> MetaOapg.properties.pinned_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> 'ProjectPrivacy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["settings"]) -> 'ProjectSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["access_grant", "created_time", "creator_uri", "has_subfolder", "is_pinned", "is_private_to_user", "last_user_action_event_date", "link", "manage_link", "metadata", "modified_time", "name", "pinned_on", "privacy", "resource_key", "settings", "uri", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_grant"]) -> MetaOapg.properties.access_grant: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creator_uri"]) -> MetaOapg.properties.creator_uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_subfolder"]) -> MetaOapg.properties.has_subfolder: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_pinned"]) -> MetaOapg.properties.is_pinned: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_private_to_user"]) -> MetaOapg.properties.is_private_to_user: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_user_action_event_date"]) -> MetaOapg.properties.last_user_action_event_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manage_link"]) -> MetaOapg.properties.manage_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'ProjectMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pinned_on"]) -> MetaOapg.properties.pinned_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> 'ProjectPrivacy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["settings"]) -> 'ProjectSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["access_grant", "created_time", "creator_uri", "has_subfolder", "is_pinned", "is_private_to_user", "last_user_action_event_date", "link", "manage_link", "metadata", "modified_time", "name", "pinned_on", "privacy", "resource_key", "settings", "uri", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        settings: 'ProjectSettings',
        manage_link: typing.Union[MetaOapg.properties.manage_link, str, ],
        metadata: 'ProjectMetadata',
        has_subfolder: typing.Union[MetaOapg.properties.has_subfolder, bool, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        privacy: 'ProjectPrivacy',
        is_private_to_user: typing.Union[MetaOapg.properties.is_private_to_user, bool, ],
        pinned_on: typing.Union[MetaOapg.properties.pinned_on, None, str, ],
        last_user_action_event_date: typing.Union[MetaOapg.properties.last_user_action_event_date, None, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        is_pinned: typing.Union[MetaOapg.properties.is_pinned, bool, ],
        modified_time: typing.Union[MetaOapg.properties.modified_time, str, ],
        resource_key: typing.Union[MetaOapg.properties.resource_key, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        access_grant: typing.Union[MetaOapg.properties.access_grant, dict, frozendict.frozendict, ],
        user: 'User',
        creator_uri: typing.Union[MetaOapg.properties.creator_uri, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Project':
        return super().__new__(
            cls,
            *args,
            created_time=created_time,
            settings=settings,
            manage_link=manage_link,
            metadata=metadata,
            has_subfolder=has_subfolder,
            link=link,
            privacy=privacy,
            is_private_to_user=is_private_to_user,
            pinned_on=pinned_on,
            last_user_action_event_date=last_user_action_event_date,
            uri=uri,
            is_pinned=is_pinned,
            modified_time=modified_time,
            resource_key=resource_key,
            name=name,
            access_grant=access_grant,
            user=user,
            creator_uri=creator_uri,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.project_metadata import ProjectMetadata
from vimeo_python_sdk.model.project_privacy import ProjectPrivacy
from vimeo_python_sdk.model.project_settings import ProjectSettings
from vimeo_python_sdk.model.user import User
