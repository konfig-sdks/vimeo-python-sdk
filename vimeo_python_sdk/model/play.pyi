# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Play(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "status",
        }
        
        class properties:
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def PLAYABLE(cls):
                    return cls("playable")
                
                @schemas.classproperty
                def PURCHASE_REQUIRED(cls):
                    return cls("purchase_required")
                
                @schemas.classproperty
                def RESTRICTED(cls):
                    return cls("restricted")
                
                @schemas.classproperty
                def UNAVAILABLE(cls):
                    return cls("unavailable")
        
            @staticmethod
            def dash() -> typing.Type['HlsDashVideoFile']:
                return HlsDashVideoFile
        
            @staticmethod
            def hls() -> typing.Type['HlsDashVideoFile']:
                return HlsDashVideoFile
        
            @staticmethod
            def progressive() -> typing.Type['PlayProgressive']:
                return PlayProgressive
            __annotations__ = {
                "status": status,
                "dash": dash,
                "hls": hls,
                "progressive": progressive,
            }
    
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dash"]) -> 'HlsDashVideoFile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hls"]) -> 'HlsDashVideoFile': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progressive"]) -> 'PlayProgressive': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["status", "dash", "hls", "progressive", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dash"]) -> typing.Union['HlsDashVideoFile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hls"]) -> typing.Union['HlsDashVideoFile', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progressive"]) -> typing.Union['PlayProgressive', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["status", "dash", "hls", "progressive", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        dash: typing.Union['HlsDashVideoFile', schemas.Unset] = schemas.unset,
        hls: typing.Union['HlsDashVideoFile', schemas.Unset] = schemas.unset,
        progressive: typing.Union['PlayProgressive', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Play':
        return super().__new__(
            cls,
            *args,
            status=status,
            dash=dash,
            hls=hls,
            progressive=progressive,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.hls_dash_video_file import HlsDashVideoFile
from vimeo_python_sdk.model.play_progressive import PlayProgressive
