# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class LiveEventEmbedLogosCustom(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A collection of information relating to custom logos in the embeddable player.
    """


    class MetaOapg:
        required = {
            "link",
            "sticky",
            "active",
            "url",
            "use_link",
        }
        
        class properties:
            active = schemas.BoolSchema
            link = schemas.StrSchema
            sticky = schemas.BoolSchema
            url = schemas.StrSchema
            use_link = schemas.BoolSchema
            __annotations__ = {
                "active": active,
                "link": link,
                "sticky": sticky,
                "url": url,
                "use_link": use_link,
            }
    
    link: MetaOapg.properties.link
    sticky: MetaOapg.properties.sticky
    active: MetaOapg.properties.active
    url: MetaOapg.properties.url
    use_link: MetaOapg.properties.use_link
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sticky"]) -> MetaOapg.properties.sticky: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_link"]) -> MetaOapg.properties.use_link: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["active", "link", "sticky", "url", "use_link", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sticky"]) -> MetaOapg.properties.sticky: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_link"]) -> MetaOapg.properties.use_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["active", "link", "sticky", "url", "use_link", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        sticky: typing.Union[MetaOapg.properties.sticky, bool, ],
        active: typing.Union[MetaOapg.properties.active, bool, ],
        url: typing.Union[MetaOapg.properties.url, str, ],
        use_link: typing.Union[MetaOapg.properties.use_link, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LiveEventEmbedLogosCustom':
        return super().__new__(
            cls,
            *args,
            link=link,
            sticky=sticky,
            active=active,
            url=url,
            use_link=use_link,
            _configuration=_configuration,
            **kwargs,
        )
