# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Segment(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "cue_end",
            "kind",
            "speaker",
            "words",
            "autogenerated",
            "cue_start",
            "language",
            "id",
            "text_track_uri",
            "lines",
            "enabled",
        }
        
        class properties:
            autogenerated = schemas.BoolSchema
            cue_end = schemas.NumberSchema
            cue_start = schemas.NumberSchema
            enabled = schemas.BoolSchema
            id = schemas.StrSchema
            
            
            class kind(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "captions": "CAPTIONS",
                        "subtitles": "SUBTITLES",
                    }
                
                @schemas.classproperty
                def CAPTIONS(cls):
                    return cls("captions")
                
                @schemas.classproperty
                def SUBTITLES(cls):
                    return cls("subtitles")
            language = schemas.StrSchema
            
            
            class lines(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SegmentLine']:
                        return SegmentLine
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SegmentLine'], typing.List['SegmentLine']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'lines':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SegmentLine':
                    return super().__getitem__(i)
            speaker = schemas.StrSchema
            text_track_uri = schemas.StrSchema
            
            
            class words(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SegmentWords']:
                        return SegmentWords
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SegmentWords'], typing.List['SegmentWords']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'words':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SegmentWords':
                    return super().__getitem__(i)
            video_uri = schemas.StrSchema
            __annotations__ = {
                "autogenerated": autogenerated,
                "cue_end": cue_end,
                "cue_start": cue_start,
                "enabled": enabled,
                "id": id,
                "kind": kind,
                "language": language,
                "lines": lines,
                "speaker": speaker,
                "text_track_uri": text_track_uri,
                "words": words,
                "video_uri": video_uri,
            }
    
    cue_end: MetaOapg.properties.cue_end
    kind: MetaOapg.properties.kind
    speaker: MetaOapg.properties.speaker
    words: MetaOapg.properties.words
    autogenerated: MetaOapg.properties.autogenerated
    cue_start: MetaOapg.properties.cue_start
    language: MetaOapg.properties.language
    id: MetaOapg.properties.id
    text_track_uri: MetaOapg.properties.text_track_uri
    lines: MetaOapg.properties.lines
    enabled: MetaOapg.properties.enabled
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autogenerated"]) -> MetaOapg.properties.autogenerated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cue_end"]) -> MetaOapg.properties.cue_end: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cue_start"]) -> MetaOapg.properties.cue_start: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lines"]) -> MetaOapg.properties.lines: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speaker"]) -> MetaOapg.properties.speaker: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["text_track_uri"]) -> MetaOapg.properties.text_track_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["words"]) -> MetaOapg.properties.words: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video_uri"]) -> MetaOapg.properties.video_uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["autogenerated", "cue_end", "cue_start", "enabled", "id", "kind", "language", "lines", "speaker", "text_track_uri", "words", "video_uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autogenerated"]) -> MetaOapg.properties.autogenerated: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cue_end"]) -> MetaOapg.properties.cue_end: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cue_start"]) -> MetaOapg.properties.cue_start: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["enabled"]) -> MetaOapg.properties.enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["kind"]) -> MetaOapg.properties.kind: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lines"]) -> MetaOapg.properties.lines: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speaker"]) -> MetaOapg.properties.speaker: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["text_track_uri"]) -> MetaOapg.properties.text_track_uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["words"]) -> MetaOapg.properties.words: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video_uri"]) -> typing.Union[MetaOapg.properties.video_uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["autogenerated", "cue_end", "cue_start", "enabled", "id", "kind", "language", "lines", "speaker", "text_track_uri", "words", "video_uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cue_end: typing.Union[MetaOapg.properties.cue_end, decimal.Decimal, int, float, ],
        kind: typing.Union[MetaOapg.properties.kind, str, ],
        speaker: typing.Union[MetaOapg.properties.speaker, str, ],
        words: typing.Union[MetaOapg.properties.words, list, tuple, ],
        autogenerated: typing.Union[MetaOapg.properties.autogenerated, bool, ],
        cue_start: typing.Union[MetaOapg.properties.cue_start, decimal.Decimal, int, float, ],
        language: typing.Union[MetaOapg.properties.language, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        text_track_uri: typing.Union[MetaOapg.properties.text_track_uri, str, ],
        lines: typing.Union[MetaOapg.properties.lines, list, tuple, ],
        enabled: typing.Union[MetaOapg.properties.enabled, bool, ],
        video_uri: typing.Union[MetaOapg.properties.video_uri, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Segment':
        return super().__new__(
            cls,
            *args,
            cue_end=cue_end,
            kind=kind,
            speaker=speaker,
            words=words,
            autogenerated=autogenerated,
            cue_start=cue_start,
            language=language,
            id=id,
            text_track_uri=text_track_uri,
            lines=lines,
            enabled=enabled,
            video_uri=video_uri,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.segment_line import SegmentLine
from vimeo_python_sdk.model.segment_words import SegmentWords
