# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class AnimatedThumbnail(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "duration",
            "start_time",
            "link_with_play_button",
            "profile_id",
            "is_downloadable",
            "link",
            "width",
            "uuid",
            "file_format",
            "file_size",
            "height",
        }
        
        class properties:
            duration = schemas.NumberSchema
            file_format = schemas.StrSchema
            file_size = schemas.NumberSchema
            height = schemas.NumberSchema
            is_downloadable = schemas.BoolSchema
            link = schemas.StrSchema
            link_with_play_button = schemas.StrSchema
            profile_id = schemas.StrSchema
            start_time = schemas.NumberSchema
            uuid = schemas.StrSchema
            width = schemas.NumberSchema
            __annotations__ = {
                "duration": duration,
                "file_format": file_format,
                "file_size": file_size,
                "height": height,
                "is_downloadable": is_downloadable,
                "link": link,
                "link_with_play_button": link_with_play_button,
                "profile_id": profile_id,
                "start_time": start_time,
                "uuid": uuid,
                "width": width,
            }
    
    duration: MetaOapg.properties.duration
    start_time: MetaOapg.properties.start_time
    link_with_play_button: MetaOapg.properties.link_with_play_button
    profile_id: MetaOapg.properties.profile_id
    is_downloadable: MetaOapg.properties.is_downloadable
    link: MetaOapg.properties.link
    width: MetaOapg.properties.width
    uuid: MetaOapg.properties.uuid
    file_format: MetaOapg.properties.file_format
    file_size: MetaOapg.properties.file_size
    height: MetaOapg.properties.height
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_format"]) -> MetaOapg.properties.file_format: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["file_size"]) -> MetaOapg.properties.file_size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_downloadable"]) -> MetaOapg.properties.is_downloadable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link_with_play_button"]) -> MetaOapg.properties.link_with_play_button: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["profile_id"]) -> MetaOapg.properties.profile_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["duration", "file_format", "file_size", "height", "is_downloadable", "link", "link_with_play_button", "profile_id", "start_time", "uuid", "width", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_format"]) -> MetaOapg.properties.file_format: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["file_size"]) -> MetaOapg.properties.file_size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_downloadable"]) -> MetaOapg.properties.is_downloadable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link_with_play_button"]) -> MetaOapg.properties.link_with_play_button: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["profile_id"]) -> MetaOapg.properties.profile_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uuid"]) -> MetaOapg.properties.uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["duration", "file_format", "file_size", "height", "is_downloadable", "link", "link_with_play_button", "profile_id", "start_time", "uuid", "width", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, ],
        start_time: typing.Union[MetaOapg.properties.start_time, decimal.Decimal, int, float, ],
        link_with_play_button: typing.Union[MetaOapg.properties.link_with_play_button, str, ],
        profile_id: typing.Union[MetaOapg.properties.profile_id, str, ],
        is_downloadable: typing.Union[MetaOapg.properties.is_downloadable, bool, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        width: typing.Union[MetaOapg.properties.width, decimal.Decimal, int, float, ],
        uuid: typing.Union[MetaOapg.properties.uuid, str, ],
        file_format: typing.Union[MetaOapg.properties.file_format, str, ],
        file_size: typing.Union[MetaOapg.properties.file_size, decimal.Decimal, int, float, ],
        height: typing.Union[MetaOapg.properties.height, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnimatedThumbnail':
        return super().__new__(
            cls,
            *args,
            duration=duration,
            start_time=start_time,
            link_with_play_button=link_with_play_button,
            profile_id=profile_id,
            is_downloadable=is_downloadable,
            link=link,
            width=width,
            uuid=uuid,
            file_format=file_format,
            file_size=file_size,
            height=height,
            _configuration=_configuration,
            **kwargs,
        )
