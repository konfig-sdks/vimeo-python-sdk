# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class LiveEventDestination(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "provider_destination_id",
            "provider_broadcast_id",
            "service_name",
            "provider_user_id",
            "privacy",
            "scheduled_at",
            "display_name",
            "type",
            "stream_key",
            "live_clip_id",
            "is_enabled",
            "user_id",
            "provider_video_id",
            "id",
            "state",
            "state_message",
            "stream_url",
        }
        
        class properties:
            display_name = schemas.StrSchema
            id = schemas.NumberSchema
            is_enabled = schemas.BoolSchema
            live_clip_id = schemas.NumberSchema
            
            
            class privacy(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "CONNECTIONS": "CONNECTIONS",
                        "PUBLIC": "PUBLIC",
                        "all_friends": "ALL_FRIENDS",
                        "everyone": "EVERYONE",
                        "private": "PRIVATE",
                        "public": "PUBLIC",
                        "self": "SELF",
                        "unlisted": "UNLISTED",
                    }
                
                @schemas.classproperty
                def CONNECTIONS(cls):
                    return cls("CONNECTIONS")
                
                @schemas.classproperty
                def PUBLIC(cls):
                    return cls("PUBLIC")
                
                @schemas.classproperty
                def ALL_FRIENDS(cls):
                    return cls("all_friends")
                
                @schemas.classproperty
                def EVERYONE(cls):
                    return cls("everyone")
                
                @schemas.classproperty
                def PRIVATE(cls):
                    return cls("private")
                
                @schemas.classproperty
                def PUBLIC(cls):
                    return cls("public")
                
                @schemas.classproperty
                def SELF(cls):
                    return cls("self")
                
                @schemas.classproperty
                def UNLISTED(cls):
                    return cls("unlisted")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'privacy':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class provider_broadcast_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'provider_broadcast_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class provider_destination_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'provider_destination_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class provider_user_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'provider_user_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class provider_video_id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'provider_video_id':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class scheduled_at(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scheduled_at':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class service_name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "custom_rtmp": "CUSTOM_RTMP",
                        "facebook": "FACEBOOK",
                        "linkedin": "LINKEDIN",
                        "youtube": "YOUTUBE",
                    }
                
                @schemas.classproperty
                def CUSTOM_RTMP(cls):
                    return cls("custom_rtmp")
                
                @schemas.classproperty
                def FACEBOOK(cls):
                    return cls("facebook")
                
                @schemas.classproperty
                def LINKEDIN(cls):
                    return cls("linkedin")
                
                @schemas.classproperty
                def YOUTUBE(cls):
                    return cls("youtube")
            
            
            class state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "0": "POSITIVE_0",
                        "1": "POSITIVE_1",
                    }
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls("0")
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls("1")
            
            
            class state_message(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_message':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stream_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stream_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stream_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stream_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "channel": "CHANNEL",
                        "custom": "CUSTOM",
                        "organization": "ORGANIZATION",
                        "page": "PAGE",
                        "profile": "PROFILE",
                    }
                
                @schemas.classproperty
                def CHANNEL(cls):
                    return cls("channel")
                
                @schemas.classproperty
                def CUSTOM(cls):
                    return cls("custom")
                
                @schemas.classproperty
                def ORGANIZATION(cls):
                    return cls("organization")
                
                @schemas.classproperty
                def PAGE(cls):
                    return cls("page")
                
                @schemas.classproperty
                def PROFILE(cls):
                    return cls("profile")
            user_id = schemas.NumberSchema
            __annotations__ = {
                "display_name": display_name,
                "id": id,
                "is_enabled": is_enabled,
                "live_clip_id": live_clip_id,
                "privacy": privacy,
                "provider_broadcast_id": provider_broadcast_id,
                "provider_destination_id": provider_destination_id,
                "provider_user_id": provider_user_id,
                "provider_video_id": provider_video_id,
                "scheduled_at": scheduled_at,
                "service_name": service_name,
                "state": state,
                "state_message": state_message,
                "stream_key": stream_key,
                "stream_url": stream_url,
                "type": type,
                "user_id": user_id,
            }
    
    provider_destination_id: MetaOapg.properties.provider_destination_id
    provider_broadcast_id: MetaOapg.properties.provider_broadcast_id
    service_name: MetaOapg.properties.service_name
    provider_user_id: MetaOapg.properties.provider_user_id
    privacy: MetaOapg.properties.privacy
    scheduled_at: MetaOapg.properties.scheduled_at
    display_name: MetaOapg.properties.display_name
    type: MetaOapg.properties.type
    stream_key: MetaOapg.properties.stream_key
    live_clip_id: MetaOapg.properties.live_clip_id
    is_enabled: MetaOapg.properties.is_enabled
    user_id: MetaOapg.properties.user_id
    provider_video_id: MetaOapg.properties.provider_video_id
    id: MetaOapg.properties.id
    state: MetaOapg.properties.state
    state_message: MetaOapg.properties.state_message
    stream_url: MetaOapg.properties.stream_url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_enabled"]) -> MetaOapg.properties.is_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live_clip_id"]) -> MetaOapg.properties.live_clip_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> MetaOapg.properties.privacy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_broadcast_id"]) -> MetaOapg.properties.provider_broadcast_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_destination_id"]) -> MetaOapg.properties.provider_destination_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_user_id"]) -> MetaOapg.properties.provider_user_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider_video_id"]) -> MetaOapg.properties.provider_video_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled_at"]) -> MetaOapg.properties.scheduled_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["service_name"]) -> MetaOapg.properties.service_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_message"]) -> MetaOapg.properties.state_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_key"]) -> MetaOapg.properties.stream_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_url"]) -> MetaOapg.properties.stream_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["display_name", "id", "is_enabled", "live_clip_id", "privacy", "provider_broadcast_id", "provider_destination_id", "provider_user_id", "provider_video_id", "scheduled_at", "service_name", "state", "state_message", "stream_key", "stream_url", "type", "user_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_enabled"]) -> MetaOapg.properties.is_enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live_clip_id"]) -> MetaOapg.properties.live_clip_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> MetaOapg.properties.privacy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_broadcast_id"]) -> MetaOapg.properties.provider_broadcast_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_destination_id"]) -> MetaOapg.properties.provider_destination_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_user_id"]) -> MetaOapg.properties.provider_user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider_video_id"]) -> MetaOapg.properties.provider_video_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled_at"]) -> MetaOapg.properties.scheduled_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["service_name"]) -> MetaOapg.properties.service_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_message"]) -> MetaOapg.properties.state_message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_key"]) -> MetaOapg.properties.stream_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_url"]) -> MetaOapg.properties.stream_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user_id"]) -> MetaOapg.properties.user_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["display_name", "id", "is_enabled", "live_clip_id", "privacy", "provider_broadcast_id", "provider_destination_id", "provider_user_id", "provider_video_id", "scheduled_at", "service_name", "state", "state_message", "stream_key", "stream_url", "type", "user_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        provider_destination_id: typing.Union[MetaOapg.properties.provider_destination_id, None, str, ],
        provider_broadcast_id: typing.Union[MetaOapg.properties.provider_broadcast_id, None, str, ],
        service_name: typing.Union[MetaOapg.properties.service_name, str, ],
        provider_user_id: typing.Union[MetaOapg.properties.provider_user_id, None, str, ],
        privacy: typing.Union[MetaOapg.properties.privacy, None, str, ],
        scheduled_at: typing.Union[MetaOapg.properties.scheduled_at, None, decimal.Decimal, int, float, ],
        display_name: typing.Union[MetaOapg.properties.display_name, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        stream_key: typing.Union[MetaOapg.properties.stream_key, None, str, ],
        live_clip_id: typing.Union[MetaOapg.properties.live_clip_id, decimal.Decimal, int, float, ],
        is_enabled: typing.Union[MetaOapg.properties.is_enabled, bool, ],
        user_id: typing.Union[MetaOapg.properties.user_id, decimal.Decimal, int, float, ],
        provider_video_id: typing.Union[MetaOapg.properties.provider_video_id, None, str, ],
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        state_message: typing.Union[MetaOapg.properties.state_message, None, str, ],
        stream_url: typing.Union[MetaOapg.properties.stream_url, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LiveEventDestination':
        return super().__new__(
            cls,
            *args,
            provider_destination_id=provider_destination_id,
            provider_broadcast_id=provider_broadcast_id,
            service_name=service_name,
            provider_user_id=provider_user_id,
            privacy=privacy,
            scheduled_at=scheduled_at,
            display_name=display_name,
            type=type,
            stream_key=stream_key,
            live_clip_id=live_clip_id,
            is_enabled=is_enabled,
            user_id=user_id,
            provider_video_id=provider_video_id,
            id=id,
            state=state,
            state_message=state_message,
            stream_url=stream_url,
            _configuration=_configuration,
            **kwargs,
        )
