# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Subscription(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "end_date",
            "subscription_version",
            "subscription_number",
            "created_at",
            "payment_method_id",
            "auto_renew",
            "updated_at",
            "vendor",
            "grace_period_id",
            "id",
            "is_latest",
            "items",
            "start_date",
            "status",
            "synced_at",
        }
        
        class properties:
            auto_renew = schemas.BoolSchema
            created_at = schemas.StrSchema
            end_date = schemas.StrSchema
            grace_period_id = schemas.StrSchema
            id = schemas.StrSchema
            is_latest = schemas.BoolSchema
        
            @staticmethod
            def items() -> typing.Type['SubscriptionItems']:
                return SubscriptionItems
            payment_method_id = schemas.StrSchema
            start_date = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls("0")
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls("1")
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls("2")
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls("3")
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls("4")
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls("5")
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls("6")
            subscription_number = schemas.StrSchema
            subscription_version = schemas.NumberSchema
            synced_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            vendor = schemas.StrSchema
            account_id = schemas.StrSchema
            disabled_at = schemas.StrSchema
            __annotations__ = {
                "auto_renew": auto_renew,
                "created_at": created_at,
                "end_date": end_date,
                "grace_period_id": grace_period_id,
                "id": id,
                "is_latest": is_latest,
                "items": items,
                "payment_method_id": payment_method_id,
                "start_date": start_date,
                "status": status,
                "subscription_number": subscription_number,
                "subscription_version": subscription_version,
                "synced_at": synced_at,
                "updated_at": updated_at,
                "vendor": vendor,
                "account_id": account_id,
                "disabled_at": disabled_at,
            }
    
    end_date: MetaOapg.properties.end_date
    subscription_version: MetaOapg.properties.subscription_version
    subscription_number: MetaOapg.properties.subscription_number
    created_at: MetaOapg.properties.created_at
    payment_method_id: MetaOapg.properties.payment_method_id
    auto_renew: MetaOapg.properties.auto_renew
    updated_at: MetaOapg.properties.updated_at
    vendor: MetaOapg.properties.vendor
    grace_period_id: MetaOapg.properties.grace_period_id
    id: MetaOapg.properties.id
    is_latest: MetaOapg.properties.is_latest
    items: 'SubscriptionItems'
    start_date: MetaOapg.properties.start_date
    status: MetaOapg.properties.status
    synced_at: MetaOapg.properties.synced_at
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_renew"]) -> MetaOapg.properties.auto_renew: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["grace_period_id"]) -> MetaOapg.properties.grace_period_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_latest"]) -> MetaOapg.properties.is_latest: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["items"]) -> 'SubscriptionItems': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["payment_method_id"]) -> MetaOapg.properties.payment_method_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription_number"]) -> MetaOapg.properties.subscription_number: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscription_version"]) -> MetaOapg.properties.subscription_version: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["synced_at"]) -> MetaOapg.properties.synced_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disabled_at"]) -> MetaOapg.properties.disabled_at: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["auto_renew", "created_at", "end_date", "grace_period_id", "id", "is_latest", "items", "payment_method_id", "start_date", "status", "subscription_number", "subscription_version", "synced_at", "updated_at", "vendor", "account_id", "disabled_at", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_renew"]) -> MetaOapg.properties.auto_renew: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["grace_period_id"]) -> MetaOapg.properties.grace_period_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_latest"]) -> MetaOapg.properties.is_latest: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["items"]) -> 'SubscriptionItems': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["payment_method_id"]) -> MetaOapg.properties.payment_method_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription_number"]) -> MetaOapg.properties.subscription_number: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscription_version"]) -> MetaOapg.properties.subscription_version: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["synced_at"]) -> MetaOapg.properties.synced_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendor"]) -> MetaOapg.properties.vendor: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> typing.Union[MetaOapg.properties.account_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disabled_at"]) -> typing.Union[MetaOapg.properties.disabled_at, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["auto_renew", "created_at", "end_date", "grace_period_id", "id", "is_latest", "items", "payment_method_id", "start_date", "status", "subscription_number", "subscription_version", "synced_at", "updated_at", "vendor", "account_id", "disabled_at", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        end_date: typing.Union[MetaOapg.properties.end_date, str, ],
        subscription_version: typing.Union[MetaOapg.properties.subscription_version, decimal.Decimal, int, float, ],
        subscription_number: typing.Union[MetaOapg.properties.subscription_number, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        payment_method_id: typing.Union[MetaOapg.properties.payment_method_id, str, ],
        auto_renew: typing.Union[MetaOapg.properties.auto_renew, bool, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        vendor: typing.Union[MetaOapg.properties.vendor, str, ],
        grace_period_id: typing.Union[MetaOapg.properties.grace_period_id, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        is_latest: typing.Union[MetaOapg.properties.is_latest, bool, ],
        items: 'SubscriptionItems',
        start_date: typing.Union[MetaOapg.properties.start_date, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        synced_at: typing.Union[MetaOapg.properties.synced_at, str, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, schemas.Unset] = schemas.unset,
        disabled_at: typing.Union[MetaOapg.properties.disabled_at, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Subscription':
        return super().__new__(
            cls,
            *args,
            end_date=end_date,
            subscription_version=subscription_version,
            subscription_number=subscription_number,
            created_at=created_at,
            payment_method_id=payment_method_id,
            auto_renew=auto_renew,
            updated_at=updated_at,
            vendor=vendor,
            grace_period_id=grace_period_id,
            id=id,
            is_latest=is_latest,
            items=items,
            start_date=start_date,
            status=status,
            synced_at=synced_at,
            account_id=account_id,
            disabled_at=disabled_at,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.subscription_items import SubscriptionItems
