# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideosUploadsBeginVideoUploadProcessRequestEmbed(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def title() -> typing.Type['VideosUploadsBeginVideoUploadProcessRequestEmbedTitle']:
                return VideosUploadsBeginVideoUploadProcessRequestEmbedTitle
        
            @staticmethod
            def buttons() -> typing.Type['VideosUploadsBeginVideoUploadProcessRequestEmbedButtons']:
                return VideosUploadsBeginVideoUploadProcessRequestEmbedButtons
            color = schemas.StrSchema
        
            @staticmethod
            def end_screen() -> typing.Type['VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen']:
                return VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen
        
            @staticmethod
            def logos() -> typing.Type['VideosUploadsBeginVideoUploadProcessRequestEmbedLogos']:
                return VideosUploadsBeginVideoUploadProcessRequestEmbedLogos
            playbar = schemas.BoolSchema
            volume = schemas.BoolSchema
            __annotations__ = {
                "title": title,
                "buttons": buttons,
                "color": color,
                "end_screen": end_screen,
                "logos": logos,
                "playbar": playbar,
                "volume": volume,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> 'VideosUploadsBeginVideoUploadProcessRequestEmbedTitle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buttons"]) -> 'VideosUploadsBeginVideoUploadProcessRequestEmbedButtons': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_screen"]) -> 'VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logos"]) -> 'VideosUploadsBeginVideoUploadProcessRequestEmbedLogos': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playbar"]) -> MetaOapg.properties.playbar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "buttons", "color", "end_screen", "logos", "playbar", "volume", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> typing.Union['VideosUploadsBeginVideoUploadProcessRequestEmbedTitle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buttons"]) -> typing.Union['VideosUploadsBeginVideoUploadProcessRequestEmbedButtons', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> typing.Union[MetaOapg.properties.color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_screen"]) -> typing.Union['VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logos"]) -> typing.Union['VideosUploadsBeginVideoUploadProcessRequestEmbedLogos', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playbar"]) -> typing.Union[MetaOapg.properties.playbar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volume"]) -> typing.Union[MetaOapg.properties.volume, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "buttons", "color", "end_screen", "logos", "playbar", "volume", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        title: typing.Union['VideosUploadsBeginVideoUploadProcessRequestEmbedTitle', schemas.Unset] = schemas.unset,
        buttons: typing.Union['VideosUploadsBeginVideoUploadProcessRequestEmbedButtons', schemas.Unset] = schemas.unset,
        color: typing.Union[MetaOapg.properties.color, str, schemas.Unset] = schemas.unset,
        end_screen: typing.Union['VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen', schemas.Unset] = schemas.unset,
        logos: typing.Union['VideosUploadsBeginVideoUploadProcessRequestEmbedLogos', schemas.Unset] = schemas.unset,
        playbar: typing.Union[MetaOapg.properties.playbar, bool, schemas.Unset] = schemas.unset,
        volume: typing.Union[MetaOapg.properties.volume, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideosUploadsBeginVideoUploadProcessRequestEmbed':
        return super().__new__(
            cls,
            *args,
            title=title,
            buttons=buttons,
            color=color,
            end_screen=end_screen,
            logos=logos,
            playbar=playbar,
            volume=volume,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.videos_uploads_begin_video_upload_process_request_embed_buttons import VideosUploadsBeginVideoUploadProcessRequestEmbedButtons
from vimeo_python_sdk.model.videos_uploads_begin_video_upload_process_request_embed_end_screen import VideosUploadsBeginVideoUploadProcessRequestEmbedEndScreen
from vimeo_python_sdk.model.videos_uploads_begin_video_upload_process_request_embed_logos import VideosUploadsBeginVideoUploadProcessRequestEmbedLogos
from vimeo_python_sdk.model.videos_uploads_begin_video_upload_process_request_embed_title import VideosUploadsBeginVideoUploadProcessRequestEmbedTitle
