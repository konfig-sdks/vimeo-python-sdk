# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Activity31(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "metadata",
            "time",
            "type",
            "clip",
        }
        
        class properties:
        
            @staticmethod
            def clip() -> typing.Type['Video']:
                return Video
        
            @staticmethod
            def metadata() -> typing.Type['Activity31Metadata']:
                return Activity31Metadata
            time = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "appearance": "APPEARANCE",
                        "category": "CATEGORY",
                        "channel": "CHANNEL",
                        "facebook_feed": "FACEBOOK_FEED",
                        "group": "GROUP",
                        "like": "LIKE",
                        "ondemand": "ONDEMAND",
                        "share": "SHARE",
                        "tag": "TAG",
                        "twitter_timeline": "TWITTER_TIMELINE",
                        "upload": "UPLOAD",
                    }
                
                @schemas.classproperty
                def APPEARANCE(cls):
                    return cls("appearance")
                
                @schemas.classproperty
                def CATEGORY(cls):
                    return cls("category")
                
                @schemas.classproperty
                def CHANNEL(cls):
                    return cls("channel")
                
                @schemas.classproperty
                def FACEBOOK_FEED(cls):
                    return cls("facebook_feed")
                
                @schemas.classproperty
                def GROUP(cls):
                    return cls("group")
                
                @schemas.classproperty
                def LIKE(cls):
                    return cls("like")
                
                @schemas.classproperty
                def ONDEMAND(cls):
                    return cls("ondemand")
                
                @schemas.classproperty
                def SHARE(cls):
                    return cls("share")
                
                @schemas.classproperty
                def TAG(cls):
                    return cls("tag")
                
                @schemas.classproperty
                def TWITTER_TIMELINE(cls):
                    return cls("twitter_timeline")
                
                @schemas.classproperty
                def UPLOAD(cls):
                    return cls("upload")
        
            @staticmethod
            def category() -> typing.Type['Category']:
                return Category
        
            @staticmethod
            def channel() -> typing.Type['Channel']:
                return Channel
        
            @staticmethod
            def group() -> typing.Type['Group']:
                return Group
        
            @staticmethod
            def tag() -> typing.Type['Tag']:
                return Tag
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            __annotations__ = {
                "clip": clip,
                "metadata": metadata,
                "time": time,
                "type": type,
                "category": category,
                "channel": channel,
                "group": group,
                "tag": tag,
                "user": user,
            }
    
    metadata: 'Activity31Metadata'
    time: MetaOapg.properties.time
    type: MetaOapg.properties.type
    clip: 'Video'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clip"]) -> 'Video': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'Activity31Metadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["category"]) -> 'Category': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'Channel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["group"]) -> 'Group': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tag"]) -> 'Tag': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clip", "metadata", "time", "type", "category", "channel", "group", "tag", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clip"]) -> 'Video': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'Activity31Metadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time"]) -> MetaOapg.properties.time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["category"]) -> typing.Union['Category', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> typing.Union['Channel', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["group"]) -> typing.Union['Group', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tag"]) -> typing.Union['Tag', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clip", "metadata", "time", "type", "category", "channel", "group", "tag", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        metadata: 'Activity31Metadata',
        time: typing.Union[MetaOapg.properties.time, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        clip: 'Video',
        category: typing.Union['Category', schemas.Unset] = schemas.unset,
        channel: typing.Union['Channel', schemas.Unset] = schemas.unset,
        group: typing.Union['Group', schemas.Unset] = schemas.unset,
        tag: typing.Union['Tag', schemas.Unset] = schemas.unset,
        user: typing.Union['User', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Activity31':
        return super().__new__(
            cls,
            *args,
            metadata=metadata,
            time=time,
            type=type,
            clip=clip,
            category=category,
            channel=channel,
            group=group,
            tag=tag,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.activity31_metadata import Activity31Metadata
from vimeo_python_sdk.model.category import Category
from vimeo_python_sdk.model.channel import Channel
from vimeo_python_sdk.model.group import Group
from vimeo_python_sdk.model.tag import Tag
from vimeo_python_sdk.model.user import User
from vimeo_python_sdk.model.video import Video
