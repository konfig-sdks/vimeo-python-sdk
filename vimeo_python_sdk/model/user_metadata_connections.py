# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class UserMetadataConnections(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The list of resource URIs related to the authenticated user.
    """


    class MetaOapg:
        required = {
            "shared",
            "albums",
            "connected_apps",
            "moderated_channels",
            "folders",
            "watchlater",
            "portfolios",
            "groups",
            "videos",
            "pictures",
            "folders_root",
            "appearances",
            "feed",
            "watched_videos",
            "followers",
            "channels",
            "recommended_users",
            "following",
            "block",
            "categories",
            "recommended_channels",
            "likes",
        }
        
        class properties:
        
            @staticmethod
            def albums() -> typing.Type['UserMetadataConnectionsAlbums']:
                return UserMetadataConnectionsAlbums
        
            @staticmethod
            def appearances() -> typing.Type['UserMetadataConnectionsAppearances']:
                return UserMetadataConnectionsAppearances
        
            @staticmethod
            def block() -> typing.Type['UserMetadataConnectionsBlock']:
                return UserMetadataConnectionsBlock
        
            @staticmethod
            def categories() -> typing.Type['UserMetadataConnectionsCategories']:
                return UserMetadataConnectionsCategories
        
            @staticmethod
            def channels() -> typing.Type['UserMetadataConnectionsChannels']:
                return UserMetadataConnectionsChannels
        
            @staticmethod
            def connected_apps() -> typing.Type['UserMetadataConnectionsConnectedApps']:
                return UserMetadataConnectionsConnectedApps
        
            @staticmethod
            def feed() -> typing.Type['UserMetadataConnectionsFeed']:
                return UserMetadataConnectionsFeed
        
            @staticmethod
            def folders() -> typing.Type['UserMetadataConnectionsFolders']:
                return UserMetadataConnectionsFolders
        
            @staticmethod
            def folders_root() -> typing.Type['UserMetadataConnectionsFoldersRoot']:
                return UserMetadataConnectionsFoldersRoot
        
            @staticmethod
            def followers() -> typing.Type['UserMetadataConnectionsFollowers']:
                return UserMetadataConnectionsFollowers
        
            @staticmethod
            def following() -> typing.Type['UserMetadataConnectionsFollowing']:
                return UserMetadataConnectionsFollowing
        
            @staticmethod
            def groups() -> typing.Type['UserMetadataConnectionsGroups']:
                return UserMetadataConnectionsGroups
        
            @staticmethod
            def likes() -> typing.Type['UserMetadataConnectionsLikes']:
                return UserMetadataConnectionsLikes
        
            @staticmethod
            def moderated_channels() -> typing.Type['UserMetadataConnectionsModeratedChannels']:
                return UserMetadataConnectionsModeratedChannels
        
            @staticmethod
            def pictures() -> typing.Type['UserMetadataConnectionsPictures']:
                return UserMetadataConnectionsPictures
        
            @staticmethod
            def portfolios() -> typing.Type['UserMetadataConnectionsPortfolios']:
                return UserMetadataConnectionsPortfolios
        
            @staticmethod
            def recommended_channels() -> typing.Type['UserMetadataConnectionsRecommendedChannels']:
                return UserMetadataConnectionsRecommendedChannels
        
            @staticmethod
            def recommended_users() -> typing.Type['UserMetadataConnectionsRecommendedUsers']:
                return UserMetadataConnectionsRecommendedUsers
        
            @staticmethod
            def shared() -> typing.Type['UserMetadataConnectionsShared']:
                return UserMetadataConnectionsShared
        
            @staticmethod
            def videos() -> typing.Type['UserMetadataConnectionsVideos']:
                return UserMetadataConnectionsVideos
        
            @staticmethod
            def watched_videos() -> typing.Type['UserMetadataConnectionsWatchedVideos']:
                return UserMetadataConnectionsWatchedVideos
        
            @staticmethod
            def watchlater() -> typing.Type['UserMetadataConnectionsWatchlater']:
                return UserMetadataConnectionsWatchlater
            __annotations__ = {
                "albums": albums,
                "appearances": appearances,
                "block": block,
                "categories": categories,
                "channels": channels,
                "connected_apps": connected_apps,
                "feed": feed,
                "folders": folders,
                "folders_root": folders_root,
                "followers": followers,
                "following": following,
                "groups": groups,
                "likes": likes,
                "moderated_channels": moderated_channels,
                "pictures": pictures,
                "portfolios": portfolios,
                "recommended_channels": recommended_channels,
                "recommended_users": recommended_users,
                "shared": shared,
                "videos": videos,
                "watched_videos": watched_videos,
                "watchlater": watchlater,
            }
    
    shared: 'UserMetadataConnectionsShared'
    albums: 'UserMetadataConnectionsAlbums'
    connected_apps: 'UserMetadataConnectionsConnectedApps'
    moderated_channels: 'UserMetadataConnectionsModeratedChannels'
    folders: 'UserMetadataConnectionsFolders'
    watchlater: 'UserMetadataConnectionsWatchlater'
    portfolios: 'UserMetadataConnectionsPortfolios'
    groups: 'UserMetadataConnectionsGroups'
    videos: 'UserMetadataConnectionsVideos'
    pictures: 'UserMetadataConnectionsPictures'
    folders_root: 'UserMetadataConnectionsFoldersRoot'
    appearances: 'UserMetadataConnectionsAppearances'
    feed: 'UserMetadataConnectionsFeed'
    watched_videos: 'UserMetadataConnectionsWatchedVideos'
    followers: 'UserMetadataConnectionsFollowers'
    channels: 'UserMetadataConnectionsChannels'
    recommended_users: 'UserMetadataConnectionsRecommendedUsers'
    following: 'UserMetadataConnectionsFollowing'
    block: 'UserMetadataConnectionsBlock'
    categories: 'UserMetadataConnectionsCategories'
    recommended_channels: 'UserMetadataConnectionsRecommendedChannels'
    likes: 'UserMetadataConnectionsLikes'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["albums"]) -> 'UserMetadataConnectionsAlbums': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["appearances"]) -> 'UserMetadataConnectionsAppearances': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block"]) -> 'UserMetadataConnectionsBlock': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> 'UserMetadataConnectionsCategories': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channels"]) -> 'UserMetadataConnectionsChannels': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected_apps"]) -> 'UserMetadataConnectionsConnectedApps': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["feed"]) -> 'UserMetadataConnectionsFeed': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folders"]) -> 'UserMetadataConnectionsFolders': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folders_root"]) -> 'UserMetadataConnectionsFoldersRoot': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["followers"]) -> 'UserMetadataConnectionsFollowers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["following"]) -> 'UserMetadataConnectionsFollowing': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groups"]) -> 'UserMetadataConnectionsGroups': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["likes"]) -> 'UserMetadataConnectionsLikes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["moderated_channels"]) -> 'UserMetadataConnectionsModeratedChannels': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'UserMetadataConnectionsPictures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portfolios"]) -> 'UserMetadataConnectionsPortfolios': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recommended_channels"]) -> 'UserMetadataConnectionsRecommendedChannels': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recommended_users"]) -> 'UserMetadataConnectionsRecommendedUsers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shared"]) -> 'UserMetadataConnectionsShared': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videos"]) -> 'UserMetadataConnectionsVideos': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watched_videos"]) -> 'UserMetadataConnectionsWatchedVideos': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watchlater"]) -> 'UserMetadataConnectionsWatchlater': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["albums", "appearances", "block", "categories", "channels", "connected_apps", "feed", "folders", "folders_root", "followers", "following", "groups", "likes", "moderated_channels", "pictures", "portfolios", "recommended_channels", "recommended_users", "shared", "videos", "watched_videos", "watchlater", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["albums"]) -> 'UserMetadataConnectionsAlbums': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["appearances"]) -> 'UserMetadataConnectionsAppearances': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block"]) -> 'UserMetadataConnectionsBlock': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> 'UserMetadataConnectionsCategories': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channels"]) -> 'UserMetadataConnectionsChannels': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected_apps"]) -> 'UserMetadataConnectionsConnectedApps': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["feed"]) -> 'UserMetadataConnectionsFeed': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folders"]) -> 'UserMetadataConnectionsFolders': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folders_root"]) -> 'UserMetadataConnectionsFoldersRoot': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["followers"]) -> 'UserMetadataConnectionsFollowers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["following"]) -> 'UserMetadataConnectionsFollowing': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groups"]) -> 'UserMetadataConnectionsGroups': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["likes"]) -> 'UserMetadataConnectionsLikes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["moderated_channels"]) -> 'UserMetadataConnectionsModeratedChannels': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'UserMetadataConnectionsPictures': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portfolios"]) -> 'UserMetadataConnectionsPortfolios': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recommended_channels"]) -> 'UserMetadataConnectionsRecommendedChannels': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recommended_users"]) -> 'UserMetadataConnectionsRecommendedUsers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shared"]) -> 'UserMetadataConnectionsShared': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videos"]) -> 'UserMetadataConnectionsVideos': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watched_videos"]) -> 'UserMetadataConnectionsWatchedVideos': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watchlater"]) -> 'UserMetadataConnectionsWatchlater': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["albums", "appearances", "block", "categories", "channels", "connected_apps", "feed", "folders", "folders_root", "followers", "following", "groups", "likes", "moderated_channels", "pictures", "portfolios", "recommended_channels", "recommended_users", "shared", "videos", "watched_videos", "watchlater", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        shared: 'UserMetadataConnectionsShared',
        albums: 'UserMetadataConnectionsAlbums',
        connected_apps: 'UserMetadataConnectionsConnectedApps',
        moderated_channels: 'UserMetadataConnectionsModeratedChannels',
        folders: 'UserMetadataConnectionsFolders',
        watchlater: 'UserMetadataConnectionsWatchlater',
        portfolios: 'UserMetadataConnectionsPortfolios',
        groups: 'UserMetadataConnectionsGroups',
        videos: 'UserMetadataConnectionsVideos',
        pictures: 'UserMetadataConnectionsPictures',
        folders_root: 'UserMetadataConnectionsFoldersRoot',
        appearances: 'UserMetadataConnectionsAppearances',
        feed: 'UserMetadataConnectionsFeed',
        watched_videos: 'UserMetadataConnectionsWatchedVideos',
        followers: 'UserMetadataConnectionsFollowers',
        channels: 'UserMetadataConnectionsChannels',
        recommended_users: 'UserMetadataConnectionsRecommendedUsers',
        following: 'UserMetadataConnectionsFollowing',
        block: 'UserMetadataConnectionsBlock',
        categories: 'UserMetadataConnectionsCategories',
        recommended_channels: 'UserMetadataConnectionsRecommendedChannels',
        likes: 'UserMetadataConnectionsLikes',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserMetadataConnections':
        return super().__new__(
            cls,
            *args,
            shared=shared,
            albums=albums,
            connected_apps=connected_apps,
            moderated_channels=moderated_channels,
            folders=folders,
            watchlater=watchlater,
            portfolios=portfolios,
            groups=groups,
            videos=videos,
            pictures=pictures,
            folders_root=folders_root,
            appearances=appearances,
            feed=feed,
            watched_videos=watched_videos,
            followers=followers,
            channels=channels,
            recommended_users=recommended_users,
            following=following,
            block=block,
            categories=categories,
            recommended_channels=recommended_channels,
            likes=likes,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.user_metadata_connections_albums import UserMetadataConnectionsAlbums
from vimeo_python_sdk.model.user_metadata_connections_appearances import UserMetadataConnectionsAppearances
from vimeo_python_sdk.model.user_metadata_connections_block import UserMetadataConnectionsBlock
from vimeo_python_sdk.model.user_metadata_connections_categories import UserMetadataConnectionsCategories
from vimeo_python_sdk.model.user_metadata_connections_channels import UserMetadataConnectionsChannels
from vimeo_python_sdk.model.user_metadata_connections_connected_apps import UserMetadataConnectionsConnectedApps
from vimeo_python_sdk.model.user_metadata_connections_feed import UserMetadataConnectionsFeed
from vimeo_python_sdk.model.user_metadata_connections_folders import UserMetadataConnectionsFolders
from vimeo_python_sdk.model.user_metadata_connections_folders_root import UserMetadataConnectionsFoldersRoot
from vimeo_python_sdk.model.user_metadata_connections_followers import UserMetadataConnectionsFollowers
from vimeo_python_sdk.model.user_metadata_connections_following import UserMetadataConnectionsFollowing
from vimeo_python_sdk.model.user_metadata_connections_groups import UserMetadataConnectionsGroups
from vimeo_python_sdk.model.user_metadata_connections_likes import UserMetadataConnectionsLikes
from vimeo_python_sdk.model.user_metadata_connections_moderated_channels import UserMetadataConnectionsModeratedChannels
from vimeo_python_sdk.model.user_metadata_connections_pictures import UserMetadataConnectionsPictures
from vimeo_python_sdk.model.user_metadata_connections_portfolios import UserMetadataConnectionsPortfolios
from vimeo_python_sdk.model.user_metadata_connections_recommended_channels import UserMetadataConnectionsRecommendedChannels
from vimeo_python_sdk.model.user_metadata_connections_recommended_users import UserMetadataConnectionsRecommendedUsers
from vimeo_python_sdk.model.user_metadata_connections_shared import UserMetadataConnectionsShared
from vimeo_python_sdk.model.user_metadata_connections_videos import UserMetadataConnectionsVideos
from vimeo_python_sdk.model.user_metadata_connections_watched_videos import UserMetadataConnectionsWatchedVideos
from vimeo_python_sdk.model.user_metadata_connections_watchlater import UserMetadataConnectionsWatchlater
