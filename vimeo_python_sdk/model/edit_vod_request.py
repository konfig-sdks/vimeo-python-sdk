# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class EditVodRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            link = schemas.StrSchema
        
            @staticmethod
            def preorder() -> typing.Type['EditVodRequestPreorder']:
                return EditVodRequestPreorder
        
            @staticmethod
            def publish() -> typing.Type['EditVodRequestPublish']:
                return EditVodRequestPublish
            publish_when_ready = schemas.BoolSchema
            __annotations__ = {
                "link": link,
                "preorder": preorder,
                "publish": publish,
                "publish_when_ready": publish_when_ready,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preorder"]) -> 'EditVodRequestPreorder': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publish"]) -> 'EditVodRequestPublish': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["publish_when_ready"]) -> MetaOapg.properties.publish_when_ready: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["link", "preorder", "publish", "publish_when_ready", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> typing.Union[MetaOapg.properties.link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preorder"]) -> typing.Union['EditVodRequestPreorder', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publish"]) -> typing.Union['EditVodRequestPublish', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["publish_when_ready"]) -> typing.Union[MetaOapg.properties.publish_when_ready, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["link", "preorder", "publish", "publish_when_ready", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        link: typing.Union[MetaOapg.properties.link, str, schemas.Unset] = schemas.unset,
        preorder: typing.Union['EditVodRequestPreorder', schemas.Unset] = schemas.unset,
        publish: typing.Union['EditVodRequestPublish', schemas.Unset] = schemas.unset,
        publish_when_ready: typing.Union[MetaOapg.properties.publish_when_ready, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EditVodRequest':
        return super().__new__(
            cls,
            *args,
            link=link,
            preorder=preorder,
            publish=publish,
            publish_when_ready=publish_when_ready,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.edit_vod_request_preorder import EditVodRequestPreorder
from vimeo_python_sdk.model.edit_vod_request_publish import EditVodRequestPublish
