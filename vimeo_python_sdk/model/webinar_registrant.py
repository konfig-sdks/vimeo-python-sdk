# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class WebinarRegistrant(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "analytics",
            "has_attended",
            "referrer",
            "is_blocked",
            "data",
            "created_on",
            "source_details",
            "last_name",
            "source_type",
            "first_name",
            "uri",
            "email",
        }
        
        class properties:
        
            @staticmethod
            def analytics() -> typing.Type['WebinarRegistrantAnalytics']:
                return WebinarRegistrantAnalytics
            created_on = schemas.NumberSchema
            
            
            class data(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'data':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            email = schemas.StrSchema
            
            
            class first_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'first_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class has_attended(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "B": "B",
                        "N": "N",
                        "Y": "Y",
                    }
                
                @schemas.classproperty
                def B(cls):
                    return cls("B")
                
                @schemas.classproperty
                def N(cls):
                    return cls("N")
                
                @schemas.classproperty
                def Y(cls):
                    return cls("Y")
            is_blocked = schemas.BoolSchema
            
            
            class last_name(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_name':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class referrer(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'referrer':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class source_details(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'source_details':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class source_type(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'source_type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            uri = schemas.StrSchema
            __annotations__ = {
                "analytics": analytics,
                "created_on": created_on,
                "data": data,
                "email": email,
                "first_name": first_name,
                "has_attended": has_attended,
                "is_blocked": is_blocked,
                "last_name": last_name,
                "referrer": referrer,
                "source_details": source_details,
                "source_type": source_type,
                "uri": uri,
            }
    
    analytics: 'WebinarRegistrantAnalytics'
    has_attended: MetaOapg.properties.has_attended
    referrer: MetaOapg.properties.referrer
    is_blocked: MetaOapg.properties.is_blocked
    data: MetaOapg.properties.data
    created_on: MetaOapg.properties.created_on
    source_details: MetaOapg.properties.source_details
    last_name: MetaOapg.properties.last_name
    source_type: MetaOapg.properties.source_type
    first_name: MetaOapg.properties.first_name
    uri: MetaOapg.properties.uri
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analytics"]) -> 'WebinarRegistrantAnalytics': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_attended"]) -> MetaOapg.properties.has_attended: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_blocked"]) -> MetaOapg.properties.is_blocked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["referrer"]) -> MetaOapg.properties.referrer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_details"]) -> MetaOapg.properties.source_details: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_type"]) -> MetaOapg.properties.source_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["analytics", "created_on", "data", "email", "first_name", "has_attended", "is_blocked", "last_name", "referrer", "source_details", "source_type", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analytics"]) -> 'WebinarRegistrantAnalytics': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["data"]) -> MetaOapg.properties.data: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_name"]) -> MetaOapg.properties.first_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_attended"]) -> MetaOapg.properties.has_attended: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_blocked"]) -> MetaOapg.properties.is_blocked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_name"]) -> MetaOapg.properties.last_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["referrer"]) -> MetaOapg.properties.referrer: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_details"]) -> MetaOapg.properties.source_details: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_type"]) -> MetaOapg.properties.source_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["analytics", "created_on", "data", "email", "first_name", "has_attended", "is_blocked", "last_name", "referrer", "source_details", "source_type", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        analytics: 'WebinarRegistrantAnalytics',
        has_attended: typing.Union[MetaOapg.properties.has_attended, str, ],
        referrer: typing.Union[MetaOapg.properties.referrer, None, str, ],
        is_blocked: typing.Union[MetaOapg.properties.is_blocked, bool, ],
        data: typing.Union[MetaOapg.properties.data, dict, frozendict.frozendict, None, ],
        created_on: typing.Union[MetaOapg.properties.created_on, decimal.Decimal, int, float, ],
        source_details: typing.Union[MetaOapg.properties.source_details, dict, frozendict.frozendict, None, ],
        last_name: typing.Union[MetaOapg.properties.last_name, None, str, ],
        source_type: typing.Union[MetaOapg.properties.source_type, None, str, ],
        first_name: typing.Union[MetaOapg.properties.first_name, None, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarRegistrant':
        return super().__new__(
            cls,
            *args,
            analytics=analytics,
            has_attended=has_attended,
            referrer=referrer,
            is_blocked=is_blocked,
            data=data,
            created_on=created_on,
            source_details=source_details,
            last_name=last_name,
            source_type=source_type,
            first_name=first_name,
            uri=uri,
            email=email,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.webinar_registrant_analytics import WebinarRegistrantAnalytics
