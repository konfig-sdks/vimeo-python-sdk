# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class OnDemandPromotionCode(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "code",
            "max_uses",
            "link",
            "uses",
        }
        
        class properties:
            code = schemas.StrSchema
            link = schemas.StrSchema
            max_uses = schemas.NumberSchema
            uses = schemas.NumberSchema
            __annotations__ = {
                "code": code,
                "link": link,
                "max_uses": max_uses,
                "uses": uses,
            }
    
    code: MetaOapg.properties.code
    max_uses: MetaOapg.properties.max_uses
    link: MetaOapg.properties.link
    uses: MetaOapg.properties.uses
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["max_uses"]) -> MetaOapg.properties.max_uses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uses"]) -> MetaOapg.properties.uses: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", "link", "max_uses", "uses", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["max_uses"]) -> MetaOapg.properties.max_uses: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uses"]) -> MetaOapg.properties.uses: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", "link", "max_uses", "uses", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        code: typing.Union[MetaOapg.properties.code, str, ],
        max_uses: typing.Union[MetaOapg.properties.max_uses, decimal.Decimal, int, float, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        uses: typing.Union[MetaOapg.properties.uses, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnDemandPromotionCode':
        return super().__new__(
            cls,
            *args,
            code=code,
            max_uses=max_uses,
            link=link,
            uses=uses,
            _configuration=_configuration,
            **kwargs,
        )
