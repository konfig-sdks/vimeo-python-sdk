# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class EmailCaptureForm(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created_time",
            "custom_fields",
            "skippable",
            "uri",
            "timecode",
            "custom_logo",
            "custom_message",
            "privacy_policy",
            "clip_id",
            "hidden_fields",
            "email_lists",
            "id",
            "position",
        }
        
        class properties:
            clip_id = schemas.NumberSchema
            created_time = schemas.StrSchema
        
            @staticmethod
            def custom_fields() -> typing.Type['EmailCaptureFormCustomFields']:
                return EmailCaptureFormCustomFields
            custom_logo = schemas.NumberSchema
            custom_message = schemas.StrSchema
        
            @staticmethod
            def email_lists() -> typing.Type['EmailCaptureFormEmailLists']:
                return EmailCaptureFormEmailLists
        
            @staticmethod
            def hidden_fields() -> typing.Type['EmailCaptureFormHiddenFields']:
                return EmailCaptureFormHiddenFields
            id = schemas.NumberSchema
            
            
            class position(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def AFTERVIDEO(cls):
                    return cls("after-video")
                
                @schemas.classproperty
                def BEFOREVIDEO(cls):
                    return cls("before-video")
                
                @schemas.classproperty
                def DURINGVIDEO(cls):
                    return cls("during-video")
            privacy_policy = schemas.StrSchema
            skippable = schemas.BoolSchema
            timecode = schemas.StrSchema
            uri = schemas.StrSchema
            __annotations__ = {
                "clip_id": clip_id,
                "created_time": created_time,
                "custom_fields": custom_fields,
                "custom_logo": custom_logo,
                "custom_message": custom_message,
                "email_lists": email_lists,
                "hidden_fields": hidden_fields,
                "id": id,
                "position": position,
                "privacy_policy": privacy_policy,
                "skippable": skippable,
                "timecode": timecode,
                "uri": uri,
            }
    
    created_time: MetaOapg.properties.created_time
    custom_fields: 'EmailCaptureFormCustomFields'
    skippable: MetaOapg.properties.skippable
    uri: MetaOapg.properties.uri
    timecode: MetaOapg.properties.timecode
    custom_logo: MetaOapg.properties.custom_logo
    custom_message: MetaOapg.properties.custom_message
    privacy_policy: MetaOapg.properties.privacy_policy
    clip_id: MetaOapg.properties.clip_id
    hidden_fields: 'EmailCaptureFormHiddenFields'
    email_lists: 'EmailCaptureFormEmailLists'
    id: MetaOapg.properties.id
    position: MetaOapg.properties.position
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clip_id"]) -> MetaOapg.properties.clip_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_fields"]) -> 'EmailCaptureFormCustomFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_logo"]) -> MetaOapg.properties.custom_logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_message"]) -> MetaOapg.properties.custom_message: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_lists"]) -> 'EmailCaptureFormEmailLists': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hidden_fields"]) -> 'EmailCaptureFormHiddenFields': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy_policy"]) -> MetaOapg.properties.privacy_policy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skippable"]) -> MetaOapg.properties.skippable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timecode"]) -> MetaOapg.properties.timecode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clip_id", "created_time", "custom_fields", "custom_logo", "custom_message", "email_lists", "hidden_fields", "id", "position", "privacy_policy", "skippable", "timecode", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clip_id"]) -> MetaOapg.properties.clip_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_fields"]) -> 'EmailCaptureFormCustomFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_logo"]) -> MetaOapg.properties.custom_logo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_message"]) -> MetaOapg.properties.custom_message: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_lists"]) -> 'EmailCaptureFormEmailLists': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hidden_fields"]) -> 'EmailCaptureFormHiddenFields': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy_policy"]) -> MetaOapg.properties.privacy_policy: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skippable"]) -> MetaOapg.properties.skippable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timecode"]) -> MetaOapg.properties.timecode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clip_id", "created_time", "custom_fields", "custom_logo", "custom_message", "email_lists", "hidden_fields", "id", "position", "privacy_policy", "skippable", "timecode", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        custom_fields: 'EmailCaptureFormCustomFields',
        skippable: typing.Union[MetaOapg.properties.skippable, bool, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        timecode: typing.Union[MetaOapg.properties.timecode, str, ],
        custom_logo: typing.Union[MetaOapg.properties.custom_logo, decimal.Decimal, int, float, ],
        custom_message: typing.Union[MetaOapg.properties.custom_message, str, ],
        privacy_policy: typing.Union[MetaOapg.properties.privacy_policy, str, ],
        clip_id: typing.Union[MetaOapg.properties.clip_id, decimal.Decimal, int, float, ],
        hidden_fields: 'EmailCaptureFormHiddenFields',
        email_lists: 'EmailCaptureFormEmailLists',
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, ],
        position: typing.Union[MetaOapg.properties.position, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmailCaptureForm':
        return super().__new__(
            cls,
            *args,
            created_time=created_time,
            custom_fields=custom_fields,
            skippable=skippable,
            uri=uri,
            timecode=timecode,
            custom_logo=custom_logo,
            custom_message=custom_message,
            privacy_policy=privacy_policy,
            clip_id=clip_id,
            hidden_fields=hidden_fields,
            email_lists=email_lists,
            id=id,
            position=position,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.email_capture_form_custom_fields import EmailCaptureFormCustomFields
from vimeo_python_sdk.model.email_capture_form_email_lists import EmailCaptureFormEmailLists
from vimeo_python_sdk.model.email_capture_form_hidden_fields import EmailCaptureFormHiddenFields
