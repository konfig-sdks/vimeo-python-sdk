# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Album(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "metadata",
            "link",
            "brand_color",
            "description",
            "privacy",
            "use_custom_domain",
            "pictures",
            "duration",
            "embed_custom_logo",
            "modified_time",
            "web_custom_logo",
            "hide_vimeo_logo",
            "loop",
            "hide_upcoming",
            "embed_brand_color",
            "seo_description",
            "theme",
            "embed",
            "allow_continuous_play",
            "created_time",
            "review_mode",
            "allow_share",
            "allow_downloads",
            "unlisted_hash",
            "sort",
            "uri",
            "autoplay",
            "seo_title",
            "url",
            "hide_nav",
            "custom_logo",
            "layout",
            "share_link",
            "seo_allow_indexed",
            "domain_certificate_state",
            "resource_key",
            "web_brand_color",
            "domain",
            "has_chosen_thumbnail",
            "name",
            "hide_from_vimeo",
            "user",
            "seo_keywords",
        }
        
        class properties:
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            allow_continuous_play = schemas.BoolSchema
            allow_downloads = schemas.BoolSchema
            allow_share = schemas.BoolSchema
            autoplay = schemas.BoolSchema
            
            
            class brand_color(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'brand_color':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            created_time = schemas.StrSchema
        
            @staticmethod
            def custom_logo() -> typing.Type['Picture']:
                return Picture
            
            
            class domain(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'domain':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class domain_certificate_state(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "null": "NONE",
                        "0": "POSITIVE_0",
                        "1": "POSITIVE_1",
                        "2": "POSITIVE_2",
                        "3": "POSITIVE_3",
                        "4": "POSITIVE_4",
                        "5": "POSITIVE_5",
                        "6": "POSITIVE_6",
                        "7": "POSITIVE_7",
                        "8": "POSITIVE_8",
                    }
                
                @schemas.classproperty
                def NONE(cls):
                    return cls("null")
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls("0")
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls("1")
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls("2")
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls("3")
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls("4")
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls("5")
                
                @schemas.classproperty
                def POSITIVE_6(cls):
                    return cls("6")
                
                @schemas.classproperty
                def POSITIVE_7(cls):
                    return cls("7")
                
                @schemas.classproperty
                def POSITIVE_8(cls):
                    return cls("8")
            duration = schemas.NumberSchema
        
            @staticmethod
            def embed() -> typing.Type['AlbumEmbed']:
                return AlbumEmbed
            
            
            class embed_brand_color(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'embed_brand_color':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class embed_custom_logo(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'embed_custom_logo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            has_chosen_thumbnail = schemas.BoolSchema
            hide_from_vimeo = schemas.BoolSchema
            hide_nav = schemas.BoolSchema
            hide_upcoming = schemas.BoolSchema
            
            
            class hide_vimeo_logo(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'hide_vimeo_logo':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class layout(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "grid": "GRID",
                        "player": "PLAYER",
                    }
                
                @schemas.classproperty
                def GRID(cls):
                    return cls("grid")
                
                @schemas.classproperty
                def PLAYER(cls):
                    return cls("player")
            link = schemas.StrSchema
            loop = schemas.BoolSchema
        
            @staticmethod
            def metadata() -> typing.Type['AlbumMetadata']:
                return AlbumMetadata
            modified_time = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def pictures() -> typing.Type['Picture']:
                return Picture
        
            @staticmethod
            def privacy() -> typing.Type['AlbumPrivacy']:
                return AlbumPrivacy
            resource_key = schemas.StrSchema
            review_mode = schemas.BoolSchema
            seo_allow_indexed = schemas.BoolSchema
            
            
            class seo_description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'seo_description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def seo_keywords() -> typing.Type['AlbumSeoKeywords']:
                return AlbumSeoKeywords
            
            
            class seo_title(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'seo_title':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            share_link = schemas.StrSchema
            
            
            class sort(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "added_first": "ADDED_FIRST",
                        "added_last": "ADDED_LAST",
                        "alphabetical": "ALPHABETICAL",
                        "arranged": "ARRANGED",
                        "comments": "COMMENTS",
                        "likes": "LIKES",
                        "newest": "NEWEST",
                        "oldest": "OLDEST",
                        "plays": "PLAYS",
                    }
                
                @schemas.classproperty
                def ADDED_FIRST(cls):
                    return cls("added_first")
                
                @schemas.classproperty
                def ADDED_LAST(cls):
                    return cls("added_last")
                
                @schemas.classproperty
                def ALPHABETICAL(cls):
                    return cls("alphabetical")
                
                @schemas.classproperty
                def ARRANGED(cls):
                    return cls("arranged")
                
                @schemas.classproperty
                def COMMENTS(cls):
                    return cls("comments")
                
                @schemas.classproperty
                def LIKES(cls):
                    return cls("likes")
                
                @schemas.classproperty
                def NEWEST(cls):
                    return cls("newest")
                
                @schemas.classproperty
                def OLDEST(cls):
                    return cls("oldest")
                
                @schemas.classproperty
                def PLAYS(cls):
                    return cls("plays")
            
            
            class theme(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "dark": "DARK",
                        "standard": "STANDARD",
                    }
                
                @schemas.classproperty
                def DARK(cls):
                    return cls("dark")
                
                @schemas.classproperty
                def STANDARD(cls):
                    return cls("standard")
            unlisted_hash = schemas.StrSchema
            uri = schemas.StrSchema
            
            
            class url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            use_custom_domain = schemas.BoolSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            web_brand_color = schemas.BoolSchema
            web_custom_logo = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "allow_continuous_play": allow_continuous_play,
                "allow_downloads": allow_downloads,
                "allow_share": allow_share,
                "autoplay": autoplay,
                "brand_color": brand_color,
                "created_time": created_time,
                "custom_logo": custom_logo,
                "domain": domain,
                "domain_certificate_state": domain_certificate_state,
                "duration": duration,
                "embed": embed,
                "embed_brand_color": embed_brand_color,
                "embed_custom_logo": embed_custom_logo,
                "has_chosen_thumbnail": has_chosen_thumbnail,
                "hide_from_vimeo": hide_from_vimeo,
                "hide_nav": hide_nav,
                "hide_upcoming": hide_upcoming,
                "hide_vimeo_logo": hide_vimeo_logo,
                "layout": layout,
                "link": link,
                "loop": loop,
                "metadata": metadata,
                "modified_time": modified_time,
                "name": name,
                "pictures": pictures,
                "privacy": privacy,
                "resource_key": resource_key,
                "review_mode": review_mode,
                "seo_allow_indexed": seo_allow_indexed,
                "seo_description": seo_description,
                "seo_keywords": seo_keywords,
                "seo_title": seo_title,
                "share_link": share_link,
                "sort": sort,
                "theme": theme,
                "unlisted_hash": unlisted_hash,
                "uri": uri,
                "url": url,
                "use_custom_domain": use_custom_domain,
                "user": user,
                "web_brand_color": web_brand_color,
                "web_custom_logo": web_custom_logo,
            }
    
    metadata: 'AlbumMetadata'
    link: MetaOapg.properties.link
    brand_color: MetaOapg.properties.brand_color
    description: MetaOapg.properties.description
    privacy: 'AlbumPrivacy'
    use_custom_domain: MetaOapg.properties.use_custom_domain
    pictures: 'Picture'
    duration: MetaOapg.properties.duration
    embed_custom_logo: MetaOapg.properties.embed_custom_logo
    modified_time: MetaOapg.properties.modified_time
    web_custom_logo: MetaOapg.properties.web_custom_logo
    hide_vimeo_logo: MetaOapg.properties.hide_vimeo_logo
    loop: MetaOapg.properties.loop
    hide_upcoming: MetaOapg.properties.hide_upcoming
    embed_brand_color: MetaOapg.properties.embed_brand_color
    seo_description: MetaOapg.properties.seo_description
    theme: MetaOapg.properties.theme
    embed: 'AlbumEmbed'
    allow_continuous_play: MetaOapg.properties.allow_continuous_play
    created_time: MetaOapg.properties.created_time
    review_mode: MetaOapg.properties.review_mode
    allow_share: MetaOapg.properties.allow_share
    allow_downloads: MetaOapg.properties.allow_downloads
    unlisted_hash: MetaOapg.properties.unlisted_hash
    sort: MetaOapg.properties.sort
    uri: MetaOapg.properties.uri
    autoplay: MetaOapg.properties.autoplay
    seo_title: MetaOapg.properties.seo_title
    url: MetaOapg.properties.url
    hide_nav: MetaOapg.properties.hide_nav
    custom_logo: 'Picture'
    layout: MetaOapg.properties.layout
    share_link: MetaOapg.properties.share_link
    seo_allow_indexed: MetaOapg.properties.seo_allow_indexed
    domain_certificate_state: MetaOapg.properties.domain_certificate_state
    resource_key: MetaOapg.properties.resource_key
    web_brand_color: MetaOapg.properties.web_brand_color
    domain: MetaOapg.properties.domain
    has_chosen_thumbnail: MetaOapg.properties.has_chosen_thumbnail
    name: MetaOapg.properties.name
    hide_from_vimeo: MetaOapg.properties.hide_from_vimeo
    user: 'User'
    seo_keywords: 'AlbumSeoKeywords'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_continuous_play"]) -> MetaOapg.properties.allow_continuous_play: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_downloads"]) -> MetaOapg.properties.allow_downloads: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_share"]) -> MetaOapg.properties.allow_share: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["autoplay"]) -> MetaOapg.properties.autoplay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand_color"]) -> MetaOapg.properties.brand_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_logo"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain_certificate_state"]) -> MetaOapg.properties.domain_certificate_state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embed"]) -> 'AlbumEmbed': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embed_brand_color"]) -> MetaOapg.properties.embed_brand_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embed_custom_logo"]) -> MetaOapg.properties.embed_custom_logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_chosen_thumbnail"]) -> MetaOapg.properties.has_chosen_thumbnail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hide_from_vimeo"]) -> MetaOapg.properties.hide_from_vimeo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hide_nav"]) -> MetaOapg.properties.hide_nav: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hide_upcoming"]) -> MetaOapg.properties.hide_upcoming: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hide_vimeo_logo"]) -> MetaOapg.properties.hide_vimeo_logo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layout"]) -> MetaOapg.properties.layout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loop"]) -> MetaOapg.properties.loop: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'AlbumMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> 'AlbumPrivacy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["review_mode"]) -> MetaOapg.properties.review_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seo_allow_indexed"]) -> MetaOapg.properties.seo_allow_indexed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seo_description"]) -> MetaOapg.properties.seo_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seo_keywords"]) -> 'AlbumSeoKeywords': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seo_title"]) -> MetaOapg.properties.seo_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["share_link"]) -> MetaOapg.properties.share_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["theme"]) -> MetaOapg.properties.theme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unlisted_hash"]) -> MetaOapg.properties.unlisted_hash: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_custom_domain"]) -> MetaOapg.properties.use_custom_domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["web_brand_color"]) -> MetaOapg.properties.web_brand_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["web_custom_logo"]) -> MetaOapg.properties.web_custom_logo: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "allow_continuous_play", "allow_downloads", "allow_share", "autoplay", "brand_color", "created_time", "custom_logo", "domain", "domain_certificate_state", "duration", "embed", "embed_brand_color", "embed_custom_logo", "has_chosen_thumbnail", "hide_from_vimeo", "hide_nav", "hide_upcoming", "hide_vimeo_logo", "layout", "link", "loop", "metadata", "modified_time", "name", "pictures", "privacy", "resource_key", "review_mode", "seo_allow_indexed", "seo_description", "seo_keywords", "seo_title", "share_link", "sort", "theme", "unlisted_hash", "uri", "url", "use_custom_domain", "user", "web_brand_color", "web_custom_logo", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_continuous_play"]) -> MetaOapg.properties.allow_continuous_play: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_downloads"]) -> MetaOapg.properties.allow_downloads: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_share"]) -> MetaOapg.properties.allow_share: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["autoplay"]) -> MetaOapg.properties.autoplay: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand_color"]) -> MetaOapg.properties.brand_color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_logo"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain_certificate_state"]) -> MetaOapg.properties.domain_certificate_state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embed"]) -> 'AlbumEmbed': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embed_brand_color"]) -> MetaOapg.properties.embed_brand_color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embed_custom_logo"]) -> MetaOapg.properties.embed_custom_logo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_chosen_thumbnail"]) -> MetaOapg.properties.has_chosen_thumbnail: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hide_from_vimeo"]) -> MetaOapg.properties.hide_from_vimeo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hide_nav"]) -> MetaOapg.properties.hide_nav: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hide_upcoming"]) -> MetaOapg.properties.hide_upcoming: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hide_vimeo_logo"]) -> MetaOapg.properties.hide_vimeo_logo: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layout"]) -> MetaOapg.properties.layout: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loop"]) -> MetaOapg.properties.loop: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'AlbumMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> 'AlbumPrivacy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["review_mode"]) -> MetaOapg.properties.review_mode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seo_allow_indexed"]) -> MetaOapg.properties.seo_allow_indexed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seo_description"]) -> MetaOapg.properties.seo_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seo_keywords"]) -> 'AlbumSeoKeywords': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seo_title"]) -> MetaOapg.properties.seo_title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["share_link"]) -> MetaOapg.properties.share_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["theme"]) -> MetaOapg.properties.theme: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unlisted_hash"]) -> MetaOapg.properties.unlisted_hash: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_custom_domain"]) -> MetaOapg.properties.use_custom_domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["web_brand_color"]) -> MetaOapg.properties.web_brand_color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["web_custom_logo"]) -> MetaOapg.properties.web_custom_logo: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "allow_continuous_play", "allow_downloads", "allow_share", "autoplay", "brand_color", "created_time", "custom_logo", "domain", "domain_certificate_state", "duration", "embed", "embed_brand_color", "embed_custom_logo", "has_chosen_thumbnail", "hide_from_vimeo", "hide_nav", "hide_upcoming", "hide_vimeo_logo", "layout", "link", "loop", "metadata", "modified_time", "name", "pictures", "privacy", "resource_key", "review_mode", "seo_allow_indexed", "seo_description", "seo_keywords", "seo_title", "share_link", "sort", "theme", "unlisted_hash", "uri", "url", "use_custom_domain", "user", "web_brand_color", "web_custom_logo", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        metadata: 'AlbumMetadata',
        link: typing.Union[MetaOapg.properties.link, str, ],
        brand_color: typing.Union[MetaOapg.properties.brand_color, None, str, ],
        description: typing.Union[MetaOapg.properties.description, None, str, ],
        privacy: 'AlbumPrivacy',
        use_custom_domain: typing.Union[MetaOapg.properties.use_custom_domain, bool, ],
        pictures: 'Picture',
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, ],
        embed_custom_logo: typing.Union[MetaOapg.properties.embed_custom_logo, None, bool, ],
        modified_time: typing.Union[MetaOapg.properties.modified_time, str, ],
        web_custom_logo: typing.Union[MetaOapg.properties.web_custom_logo, bool, ],
        hide_vimeo_logo: typing.Union[MetaOapg.properties.hide_vimeo_logo, None, bool, ],
        loop: typing.Union[MetaOapg.properties.loop, bool, ],
        hide_upcoming: typing.Union[MetaOapg.properties.hide_upcoming, bool, ],
        embed_brand_color: typing.Union[MetaOapg.properties.embed_brand_color, None, bool, ],
        seo_description: typing.Union[MetaOapg.properties.seo_description, None, str, ],
        theme: typing.Union[MetaOapg.properties.theme, str, ],
        embed: 'AlbumEmbed',
        allow_continuous_play: typing.Union[MetaOapg.properties.allow_continuous_play, bool, ],
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        review_mode: typing.Union[MetaOapg.properties.review_mode, bool, ],
        allow_share: typing.Union[MetaOapg.properties.allow_share, bool, ],
        allow_downloads: typing.Union[MetaOapg.properties.allow_downloads, bool, ],
        unlisted_hash: typing.Union[MetaOapg.properties.unlisted_hash, str, ],
        sort: typing.Union[MetaOapg.properties.sort, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        autoplay: typing.Union[MetaOapg.properties.autoplay, bool, ],
        seo_title: typing.Union[MetaOapg.properties.seo_title, None, str, ],
        url: typing.Union[MetaOapg.properties.url, None, str, ],
        hide_nav: typing.Union[MetaOapg.properties.hide_nav, bool, ],
        custom_logo: 'Picture',
        layout: typing.Union[MetaOapg.properties.layout, str, ],
        share_link: typing.Union[MetaOapg.properties.share_link, str, ],
        seo_allow_indexed: typing.Union[MetaOapg.properties.seo_allow_indexed, bool, ],
        domain_certificate_state: typing.Union[MetaOapg.properties.domain_certificate_state, str, ],
        resource_key: typing.Union[MetaOapg.properties.resource_key, str, ],
        web_brand_color: typing.Union[MetaOapg.properties.web_brand_color, bool, ],
        domain: typing.Union[MetaOapg.properties.domain, None, str, ],
        has_chosen_thumbnail: typing.Union[MetaOapg.properties.has_chosen_thumbnail, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        hide_from_vimeo: typing.Union[MetaOapg.properties.hide_from_vimeo, bool, ],
        user: 'User',
        seo_keywords: 'AlbumSeoKeywords',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Album':
        return super().__new__(
            cls,
            *args,
            metadata=metadata,
            link=link,
            brand_color=brand_color,
            description=description,
            privacy=privacy,
            use_custom_domain=use_custom_domain,
            pictures=pictures,
            duration=duration,
            embed_custom_logo=embed_custom_logo,
            modified_time=modified_time,
            web_custom_logo=web_custom_logo,
            hide_vimeo_logo=hide_vimeo_logo,
            loop=loop,
            hide_upcoming=hide_upcoming,
            embed_brand_color=embed_brand_color,
            seo_description=seo_description,
            theme=theme,
            embed=embed,
            allow_continuous_play=allow_continuous_play,
            created_time=created_time,
            review_mode=review_mode,
            allow_share=allow_share,
            allow_downloads=allow_downloads,
            unlisted_hash=unlisted_hash,
            sort=sort,
            uri=uri,
            autoplay=autoplay,
            seo_title=seo_title,
            url=url,
            hide_nav=hide_nav,
            custom_logo=custom_logo,
            layout=layout,
            share_link=share_link,
            seo_allow_indexed=seo_allow_indexed,
            domain_certificate_state=domain_certificate_state,
            resource_key=resource_key,
            web_brand_color=web_brand_color,
            domain=domain,
            has_chosen_thumbnail=has_chosen_thumbnail,
            name=name,
            hide_from_vimeo=hide_from_vimeo,
            user=user,
            seo_keywords=seo_keywords,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.album_embed import AlbumEmbed
from vimeo_python_sdk.model.album_metadata import AlbumMetadata
from vimeo_python_sdk.model.album_privacy import AlbumPrivacy
from vimeo_python_sdk.model.album_seo_keywords import AlbumSeoKeywords
from vimeo_python_sdk.model.picture import Picture
from vimeo_python_sdk.model.user import User
