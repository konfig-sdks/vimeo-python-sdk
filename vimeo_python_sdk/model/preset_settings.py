# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class PresetSettings(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The contents of the preset group.
    """


    class MetaOapg:
        required = {
            "buttons",
            "color",
            "chapters",
            "play_button",
            "quality_selector",
            "playbar",
            "portrait",
            "title",
            "logos",
            "colors",
            "speed",
            "volume",
            "chromecast",
            "transcript",
            "pip",
            "outro",
            "airplay",
            "closed_captions",
            "byline",
            "audio_tracks",
        }
        
        class properties:
            
            
            class title(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "hide": "HIDE",
                        "show": "SHOW",
                        "user": "USER",
                    }
                
                @schemas.classproperty
                def HIDE(cls):
                    return cls("hide")
                
                @schemas.classproperty
                def SHOW(cls):
                    return cls("show")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("user")
            airplay = schemas.BoolSchema
            audio_tracks = schemas.BoolSchema
        
            @staticmethod
            def buttons() -> typing.Type['PresetSettingsButtons']:
                return PresetSettingsButtons
            
            
            class byline(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "hide": "HIDE",
                        "show": "SHOW",
                        "user": "USER",
                    }
                
                @schemas.classproperty
                def HIDE(cls):
                    return cls("hide")
                
                @schemas.classproperty
                def SHOW(cls):
                    return cls("show")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("user")
            chapters = schemas.BoolSchema
            chromecast = schemas.BoolSchema
            closed_captions = schemas.BoolSchema
            color = schemas.StrSchema
        
            @staticmethod
            def colors() -> typing.Type['PresetSettingsColors']:
                return PresetSettingsColors
        
            @staticmethod
            def logos() -> typing.Type['PresetSettingsLogos']:
                return PresetSettingsLogos
        
            @staticmethod
            def outro() -> typing.Type['PresetSettingsOutro']:
                return PresetSettingsOutro
            pip = schemas.BoolSchema
        
            @staticmethod
            def play_button() -> typing.Type['PresetSettingsPlayButton']:
                return PresetSettingsPlayButton
            playbar = schemas.BoolSchema
            
            
            class portrait(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "hide": "HIDE",
                        "show": "SHOW",
                        "user": "USER",
                    }
                
                @schemas.classproperty
                def HIDE(cls):
                    return cls("hide")
                
                @schemas.classproperty
                def SHOW(cls):
                    return cls("show")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("user")
            quality_selector = schemas.BoolSchema
            speed = schemas.BoolSchema
            transcript = schemas.BoolSchema
            volume = schemas.BoolSchema
            __annotations__ = {
                "title": title,
                "airplay": airplay,
                "audio_tracks": audio_tracks,
                "buttons": buttons,
                "byline": byline,
                "chapters": chapters,
                "chromecast": chromecast,
                "closed_captions": closed_captions,
                "color": color,
                "colors": colors,
                "logos": logos,
                "outro": outro,
                "pip": pip,
                "play_button": play_button,
                "playbar": playbar,
                "portrait": portrait,
                "quality_selector": quality_selector,
                "speed": speed,
                "transcript": transcript,
                "volume": volume,
            }
    
    buttons: 'PresetSettingsButtons'
    color: MetaOapg.properties.color
    chapters: MetaOapg.properties.chapters
    play_button: 'PresetSettingsPlayButton'
    quality_selector: MetaOapg.properties.quality_selector
    playbar: MetaOapg.properties.playbar
    portrait: MetaOapg.properties.portrait
    title: MetaOapg.properties.title
    logos: 'PresetSettingsLogos'
    colors: 'PresetSettingsColors'
    speed: MetaOapg.properties.speed
    volume: MetaOapg.properties.volume
    chromecast: MetaOapg.properties.chromecast
    transcript: MetaOapg.properties.transcript
    pip: MetaOapg.properties.pip
    outro: 'PresetSettingsOutro'
    airplay: MetaOapg.properties.airplay
    closed_captions: MetaOapg.properties.closed_captions
    byline: MetaOapg.properties.byline
    audio_tracks: MetaOapg.properties.audio_tracks
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["airplay"]) -> MetaOapg.properties.airplay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["audio_tracks"]) -> MetaOapg.properties.audio_tracks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buttons"]) -> 'PresetSettingsButtons': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["byline"]) -> MetaOapg.properties.byline: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chapters"]) -> MetaOapg.properties.chapters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chromecast"]) -> MetaOapg.properties.chromecast: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["closed_captions"]) -> MetaOapg.properties.closed_captions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["colors"]) -> 'PresetSettingsColors': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logos"]) -> 'PresetSettingsLogos': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["outro"]) -> 'PresetSettingsOutro': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pip"]) -> MetaOapg.properties.pip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["play_button"]) -> 'PresetSettingsPlayButton': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playbar"]) -> MetaOapg.properties.playbar: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portrait"]) -> MetaOapg.properties.portrait: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quality_selector"]) -> MetaOapg.properties.quality_selector: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed"]) -> MetaOapg.properties.speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transcript"]) -> MetaOapg.properties.transcript: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "airplay", "audio_tracks", "buttons", "byline", "chapters", "chromecast", "closed_captions", "color", "colors", "logos", "outro", "pip", "play_button", "playbar", "portrait", "quality_selector", "speed", "transcript", "volume", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["airplay"]) -> MetaOapg.properties.airplay: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["audio_tracks"]) -> MetaOapg.properties.audio_tracks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buttons"]) -> 'PresetSettingsButtons': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["byline"]) -> MetaOapg.properties.byline: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chapters"]) -> MetaOapg.properties.chapters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chromecast"]) -> MetaOapg.properties.chromecast: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["closed_captions"]) -> MetaOapg.properties.closed_captions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["color"]) -> MetaOapg.properties.color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["colors"]) -> 'PresetSettingsColors': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logos"]) -> 'PresetSettingsLogos': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["outro"]) -> 'PresetSettingsOutro': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pip"]) -> MetaOapg.properties.pip: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["play_button"]) -> 'PresetSettingsPlayButton': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playbar"]) -> MetaOapg.properties.playbar: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portrait"]) -> MetaOapg.properties.portrait: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quality_selector"]) -> MetaOapg.properties.quality_selector: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed"]) -> MetaOapg.properties.speed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transcript"]) -> MetaOapg.properties.transcript: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volume"]) -> MetaOapg.properties.volume: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "airplay", "audio_tracks", "buttons", "byline", "chapters", "chromecast", "closed_captions", "color", "colors", "logos", "outro", "pip", "play_button", "playbar", "portrait", "quality_selector", "speed", "transcript", "volume", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        buttons: 'PresetSettingsButtons',
        color: typing.Union[MetaOapg.properties.color, str, ],
        chapters: typing.Union[MetaOapg.properties.chapters, bool, ],
        play_button: 'PresetSettingsPlayButton',
        quality_selector: typing.Union[MetaOapg.properties.quality_selector, bool, ],
        playbar: typing.Union[MetaOapg.properties.playbar, bool, ],
        portrait: typing.Union[MetaOapg.properties.portrait, str, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        logos: 'PresetSettingsLogos',
        colors: 'PresetSettingsColors',
        speed: typing.Union[MetaOapg.properties.speed, bool, ],
        volume: typing.Union[MetaOapg.properties.volume, bool, ],
        chromecast: typing.Union[MetaOapg.properties.chromecast, bool, ],
        transcript: typing.Union[MetaOapg.properties.transcript, bool, ],
        pip: typing.Union[MetaOapg.properties.pip, bool, ],
        outro: 'PresetSettingsOutro',
        airplay: typing.Union[MetaOapg.properties.airplay, bool, ],
        closed_captions: typing.Union[MetaOapg.properties.closed_captions, bool, ],
        byline: typing.Union[MetaOapg.properties.byline, str, ],
        audio_tracks: typing.Union[MetaOapg.properties.audio_tracks, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PresetSettings':
        return super().__new__(
            cls,
            *args,
            buttons=buttons,
            color=color,
            chapters=chapters,
            play_button=play_button,
            quality_selector=quality_selector,
            playbar=playbar,
            portrait=portrait,
            title=title,
            logos=logos,
            colors=colors,
            speed=speed,
            volume=volume,
            chromecast=chromecast,
            transcript=transcript,
            pip=pip,
            outro=outro,
            airplay=airplay,
            closed_captions=closed_captions,
            byline=byline,
            audio_tracks=audio_tracks,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.preset_settings_buttons import PresetSettingsButtons
from vimeo_python_sdk.model.preset_settings_colors import PresetSettingsColors
from vimeo_python_sdk.model.preset_settings_logos import PresetSettingsLogos
from vimeo_python_sdk.model.preset_settings_outro import PresetSettingsOutro
from vimeo_python_sdk.model.preset_settings_play_button import PresetSettingsPlayButton
