# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideoMetadataInteractionsSummary(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about whether the current user can create or get a summary for the video.
    """


    class MetaOapg:
        required = {
            "reason",
            "options",
            "disabled",
            "uri",
        }
        
        class properties:
            disabled = schemas.BoolSchema
        
            @staticmethod
            def options() -> typing.Type['VideoMetadataInteractionsSummaryOptions']:
                return VideoMetadataInteractionsSummaryOptions
            
            
            class reason(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "transcript_ready_but_not_english": "TRANSCRIPT_READY_BUT_NOT_ENGLISH",
                        "transcript_status_does_not_exist": "TRANSCRIPT_STATUS_DOES_NOT_EXIST",
                        "transcript_status_exceeds_maximum_duration": "TRANSCRIPT_STATUS_EXCEEDS_MAXIMUM_DURATION",
                        "transcript_status_failed": "TRANSCRIPT_STATUS_FAILED",
                        "transcript_status_in_progress": "TRANSCRIPT_STATUS_IN_PROGRESS",
                        "transcript_status_language_not_supported": "TRANSCRIPT_STATUS_LANGUAGE_NOT_SUPPORTED",
                        "transcript_status_no_speech": "TRANSCRIPT_STATUS_NO_SPEECH",
                        "transcript_status_not_started": "TRANSCRIPT_STATUS_NOT_STARTED",
                        "transcript_status_unknown": "TRANSCRIPT_STATUS_UNKNOWN",
                        "video_not_ready": "VIDEO_NOT_READY",
                        "video_too_short": "VIDEO_TOO_SHORT",
                    }
                
                @schemas.classproperty
                def TRANSCRIPT_READY_BUT_NOT_ENGLISH(cls):
                    return cls("transcript_ready_but_not_english")
                
                @schemas.classproperty
                def TRANSCRIPT_STATUS_DOES_NOT_EXIST(cls):
                    return cls("transcript_status_does_not_exist")
                
                @schemas.classproperty
                def TRANSCRIPT_STATUS_EXCEEDS_MAXIMUM_DURATION(cls):
                    return cls("transcript_status_exceeds_maximum_duration")
                
                @schemas.classproperty
                def TRANSCRIPT_STATUS_FAILED(cls):
                    return cls("transcript_status_failed")
                
                @schemas.classproperty
                def TRANSCRIPT_STATUS_IN_PROGRESS(cls):
                    return cls("transcript_status_in_progress")
                
                @schemas.classproperty
                def TRANSCRIPT_STATUS_LANGUAGE_NOT_SUPPORTED(cls):
                    return cls("transcript_status_language_not_supported")
                
                @schemas.classproperty
                def TRANSCRIPT_STATUS_NO_SPEECH(cls):
                    return cls("transcript_status_no_speech")
                
                @schemas.classproperty
                def TRANSCRIPT_STATUS_NOT_STARTED(cls):
                    return cls("transcript_status_not_started")
                
                @schemas.classproperty
                def TRANSCRIPT_STATUS_UNKNOWN(cls):
                    return cls("transcript_status_unknown")
                
                @schemas.classproperty
                def VIDEO_NOT_READY(cls):
                    return cls("video_not_ready")
                
                @schemas.classproperty
                def VIDEO_TOO_SHORT(cls):
                    return cls("video_too_short")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reason':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            uri = schemas.StrSchema
            __annotations__ = {
                "disabled": disabled,
                "options": options,
                "reason": reason,
                "uri": uri,
            }

    
    reason: MetaOapg.properties.reason
    options: 'VideoMetadataInteractionsSummaryOptions'
    disabled: MetaOapg.properties.disabled
    uri: MetaOapg.properties.uri
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disabled"]) -> MetaOapg.properties.disabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'VideoMetadataInteractionsSummaryOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["disabled", "options", "reason", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disabled"]) -> MetaOapg.properties.disabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> 'VideoMetadataInteractionsSummaryOptions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reason"]) -> MetaOapg.properties.reason: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["disabled", "options", "reason", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoMetadataInteractionsSummary':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.video_metadata_interactions_summary_options import VideoMetadataInteractionsSummaryOptions
