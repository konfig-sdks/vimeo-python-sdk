# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class PermissionPolicy(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "modified_on",
            "display_description",
            "created_on",
            "name",
            "permission_actions",
            "display_name",
            "uri",
        }
        
        class properties:
            created_on = schemas.StrSchema
            display_description = schemas.StrSchema
            display_name = schemas.StrSchema
            
            
            class modified_on(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'modified_on':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            name = schemas.StrSchema
            permission_actions = schemas.DictSchema
            uri = schemas.StrSchema
            __annotations__ = {
                "created_on": created_on,
                "display_description": display_description,
                "display_name": display_name,
                "modified_on": modified_on,
                "name": name,
                "permission_actions": permission_actions,
                "uri": uri,
            }
    
    modified_on: MetaOapg.properties.modified_on
    display_description: MetaOapg.properties.display_description
    created_on: MetaOapg.properties.created_on
    name: MetaOapg.properties.name
    permission_actions: MetaOapg.properties.permission_actions
    display_name: MetaOapg.properties.display_name
    uri: MetaOapg.properties.uri
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_description"]) -> MetaOapg.properties.display_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_on"]) -> MetaOapg.properties.modified_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permission_actions"]) -> MetaOapg.properties.permission_actions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created_on", "display_description", "display_name", "modified_on", "name", "permission_actions", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_description"]) -> MetaOapg.properties.display_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_on"]) -> MetaOapg.properties.modified_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permission_actions"]) -> MetaOapg.properties.permission_actions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created_on", "display_description", "display_name", "modified_on", "name", "permission_actions", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        modified_on: typing.Union[MetaOapg.properties.modified_on, None, str, ],
        display_description: typing.Union[MetaOapg.properties.display_description, str, ],
        created_on: typing.Union[MetaOapg.properties.created_on, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        permission_actions: typing.Union[MetaOapg.properties.permission_actions, dict, frozendict.frozendict, ],
        display_name: typing.Union[MetaOapg.properties.display_name, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PermissionPolicy':
        return super().__new__(
            cls,
            *args,
            modified_on=modified_on,
            display_description=display_description,
            created_on=created_on,
            name=name,
            permission_actions=permission_actions,
            display_name=display_name,
            uri=uri,
            _configuration=_configuration,
            **kwargs,
        )
