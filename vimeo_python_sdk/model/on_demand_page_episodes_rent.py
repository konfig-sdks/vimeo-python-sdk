# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class OnDemandPageEpisodesRent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "period",
            "price",
            "active",
        }
        
        class properties:
            active = schemas.BoolSchema
            
            
            class period(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "1 day": "_1_DAY",
                        "1 month": "_1_MONTH",
                        "1 week": "_1_WEEK",
                        "1 year": "_1_YEAR",
                        "2 day": "_2_DAY",
                        "24 hour": "_24_HOUR",
                        "3 day": "_3_DAY",
                        "3 month": "_3_MONTH",
                        "30 day": "_30_DAY",
                        "48 hour": "_48_HOUR",
                        "6 month": "_6_MONTH",
                        "60 day": "_60_DAY",
                        "7 day": "_7_DAY",
                        "72 hour": "_72_HOUR",
                    }
                
                @schemas.classproperty
                def _1_DAY(cls):
                    return cls("1 day")
                
                @schemas.classproperty
                def _1_MONTH(cls):
                    return cls("1 month")
                
                @schemas.classproperty
                def _1_WEEK(cls):
                    return cls("1 week")
                
                @schemas.classproperty
                def _1_YEAR(cls):
                    return cls("1 year")
                
                @schemas.classproperty
                def _2_DAY(cls):
                    return cls("2 day")
                
                @schemas.classproperty
                def _24_HOUR(cls):
                    return cls("24 hour")
                
                @schemas.classproperty
                def _3_DAY(cls):
                    return cls("3 day")
                
                @schemas.classproperty
                def _3_MONTH(cls):
                    return cls("3 month")
                
                @schemas.classproperty
                def _30_DAY(cls):
                    return cls("30 day")
                
                @schemas.classproperty
                def _48_HOUR(cls):
                    return cls("48 hour")
                
                @schemas.classproperty
                def _6_MONTH(cls):
                    return cls("6 month")
                
                @schemas.classproperty
                def _60_DAY(cls):
                    return cls("60 day")
                
                @schemas.classproperty
                def _7_DAY(cls):
                    return cls("7 day")
                
                @schemas.classproperty
                def _72_HOUR(cls):
                    return cls("72 hour")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'period':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class price(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'price':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "active": active,
                "period": period,
                "price": price,
            }
    
    period: MetaOapg.properties.period
    price: MetaOapg.properties.price
    active: MetaOapg.properties.active
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["active", "period", "price", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["period"]) -> MetaOapg.properties.period: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> MetaOapg.properties.price: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["active", "period", "price", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        period: typing.Union[MetaOapg.properties.period, None, str, ],
        price: typing.Union[MetaOapg.properties.price, None, decimal.Decimal, int, float, ],
        active: typing.Union[MetaOapg.properties.active, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnDemandPageEpisodesRent':
        return super().__new__(
            cls,
            *args,
            period=period,
            price=price,
            active=active,
            _configuration=_configuration,
            **kwargs,
        )
