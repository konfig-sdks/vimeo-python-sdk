# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideosUploadsBeginVideoUploadProcessRequestEmbedTitle(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            
            
            class name(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "hide": "HIDE",
                        "show": "SHOW",
                        "user": "USER",
                    }
                
                @schemas.classproperty
                def HIDE(cls):
                    return cls("hide")
                
                @schemas.classproperty
                def SHOW(cls):
                    return cls("show")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("user")
            
            
            class owner(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "hide": "HIDE",
                        "show": "SHOW",
                        "user": "USER",
                    }
                
                @schemas.classproperty
                def HIDE(cls):
                    return cls("hide")
                
                @schemas.classproperty
                def SHOW(cls):
                    return cls("show")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("user")
            
            
            class portrait(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "hide": "HIDE",
                        "show": "SHOW",
                        "user": "USER",
                    }
                
                @schemas.classproperty
                def HIDE(cls):
                    return cls("hide")
                
                @schemas.classproperty
                def SHOW(cls):
                    return cls("show")
                
                @schemas.classproperty
                def USER(cls):
                    return cls("user")
            __annotations__ = {
                "name": name,
                "owner": owner,
                "portrait": portrait,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["owner"]) -> MetaOapg.properties.owner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portrait"]) -> MetaOapg.properties.portrait: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "owner", "portrait", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["owner"]) -> typing.Union[MetaOapg.properties.owner, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portrait"]) -> typing.Union[MetaOapg.properties.portrait, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "owner", "portrait", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        owner: typing.Union[MetaOapg.properties.owner, str, schemas.Unset] = schemas.unset,
        portrait: typing.Union[MetaOapg.properties.portrait, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideosUploadsBeginVideoUploadProcessRequestEmbedTitle':
        return super().__new__(
            cls,
            *args,
            name=name,
            owner=owner,
            portrait=portrait,
            _configuration=_configuration,
            **kwargs,
        )
