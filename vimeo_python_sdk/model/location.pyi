# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Location(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "country",
            "formatted_address",
            "country_iso_code",
            "sub_locality",
            "city",
            "latitude",
            "neighborhood",
            "state",
            "state_iso_code",
            "longitude",
        }
        
        class properties:
            
            
            class city(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'city':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class country(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'country':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            country_iso_code = schemas.StrSchema
            formatted_address = schemas.StrSchema
            latitude = schemas.NumberSchema
            longitude = schemas.NumberSchema
            
            
            class neighborhood(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'neighborhood':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class state(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class state_iso_code(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'state_iso_code':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sub_locality(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sub_locality':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "city": city,
                "country": country,
                "country_iso_code": country_iso_code,
                "formatted_address": formatted_address,
                "latitude": latitude,
                "longitude": longitude,
                "neighborhood": neighborhood,
                "state": state,
                "state_iso_code": state_iso_code,
                "sub_locality": sub_locality,
            }
    
    country: MetaOapg.properties.country
    formatted_address: MetaOapg.properties.formatted_address
    country_iso_code: MetaOapg.properties.country_iso_code
    sub_locality: MetaOapg.properties.sub_locality
    city: MetaOapg.properties.city
    latitude: MetaOapg.properties.latitude
    neighborhood: MetaOapg.properties.neighborhood
    state: MetaOapg.properties.state
    state_iso_code: MetaOapg.properties.state_iso_code
    longitude: MetaOapg.properties.longitude
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country_iso_code"]) -> MetaOapg.properties.country_iso_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formatted_address"]) -> MetaOapg.properties.formatted_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["neighborhood"]) -> MetaOapg.properties.neighborhood: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state_iso_code"]) -> MetaOapg.properties.state_iso_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sub_locality"]) -> MetaOapg.properties.sub_locality: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["city", "country", "country_iso_code", "formatted_address", "latitude", "longitude", "neighborhood", "state", "state_iso_code", "sub_locality", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country_iso_code"]) -> MetaOapg.properties.country_iso_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formatted_address"]) -> MetaOapg.properties.formatted_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> MetaOapg.properties.longitude: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["neighborhood"]) -> MetaOapg.properties.neighborhood: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state_iso_code"]) -> MetaOapg.properties.state_iso_code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sub_locality"]) -> MetaOapg.properties.sub_locality: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["city", "country", "country_iso_code", "formatted_address", "latitude", "longitude", "neighborhood", "state", "state_iso_code", "sub_locality", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, None, str, ],
        formatted_address: typing.Union[MetaOapg.properties.formatted_address, str, ],
        country_iso_code: typing.Union[MetaOapg.properties.country_iso_code, str, ],
        sub_locality: typing.Union[MetaOapg.properties.sub_locality, None, str, ],
        city: typing.Union[MetaOapg.properties.city, None, str, ],
        latitude: typing.Union[MetaOapg.properties.latitude, decimal.Decimal, int, float, ],
        neighborhood: typing.Union[MetaOapg.properties.neighborhood, None, str, ],
        state: typing.Union[MetaOapg.properties.state, None, str, ],
        state_iso_code: typing.Union[MetaOapg.properties.state_iso_code, None, str, ],
        longitude: typing.Union[MetaOapg.properties.longitude, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Location':
        return super().__new__(
            cls,
            *args,
            country=country,
            formatted_address=formatted_address,
            country_iso_code=country_iso_code,
            sub_locality=sub_locality,
            city=city,
            latitude=latitude,
            neighborhood=neighborhood,
            state=state,
            state_iso_code=state_iso_code,
            longitude=longitude,
            _configuration=_configuration,
            **kwargs,
        )
