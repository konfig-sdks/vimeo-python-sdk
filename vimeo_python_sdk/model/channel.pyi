# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Channel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created_time",
            "metadata",
            "link",
            "description",
            "privacy",
            "uri",
            "pictures",
            "tags",
            "modified_time",
            "resource_key",
            "name",
            "header",
            "categories",
            "user",
        }
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Tag']:
                        return Tag
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Tag'], typing.List['Tag']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tag':
                    return super().__getitem__(i)
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Category']:
                        return Category
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Category'], typing.List['Category']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Category':
                    return super().__getitem__(i)
            created_time = schemas.StrSchema
        
            @staticmethod
            def header() -> typing.Type['Picture']:
                return Picture
            link = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['ChannelMetadata']:
                return ChannelMetadata
            modified_time = schemas.StrSchema
            name = schemas.StrSchema
        
            @staticmethod
            def pictures() -> typing.Type['Picture']:
                return Picture
        
            @staticmethod
            def privacy() -> typing.Type['ChannelPrivacy']:
                return ChannelPrivacy
            resource_key = schemas.StrSchema
            uri = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            __annotations__ = {
                "tags": tags,
                "description": description,
                "categories": categories,
                "created_time": created_time,
                "header": header,
                "link": link,
                "metadata": metadata,
                "modified_time": modified_time,
                "name": name,
                "pictures": pictures,
                "privacy": privacy,
                "resource_key": resource_key,
                "uri": uri,
                "user": user,
            }
    
    created_time: MetaOapg.properties.created_time
    metadata: 'ChannelMetadata'
    link: MetaOapg.properties.link
    description: MetaOapg.properties.description
    privacy: 'ChannelPrivacy'
    uri: MetaOapg.properties.uri
    pictures: 'Picture'
    tags: MetaOapg.properties.tags
    modified_time: MetaOapg.properties.modified_time
    resource_key: MetaOapg.properties.resource_key
    name: MetaOapg.properties.name
    header: 'Picture'
    categories: MetaOapg.properties.categories
    user: 'User'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["header"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'ChannelMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> 'ChannelPrivacy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "description", "categories", "created_time", "header", "link", "metadata", "modified_time", "name", "pictures", "privacy", "resource_key", "uri", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["header"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'ChannelMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> 'ChannelPrivacy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "description", "categories", "created_time", "header", "link", "metadata", "modified_time", "name", "pictures", "privacy", "resource_key", "uri", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        metadata: 'ChannelMetadata',
        link: typing.Union[MetaOapg.properties.link, str, ],
        description: typing.Union[MetaOapg.properties.description, None, str, ],
        privacy: 'ChannelPrivacy',
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        pictures: 'Picture',
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
        modified_time: typing.Union[MetaOapg.properties.modified_time, str, ],
        resource_key: typing.Union[MetaOapg.properties.resource_key, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        header: 'Picture',
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, ],
        user: 'User',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Channel':
        return super().__new__(
            cls,
            *args,
            created_time=created_time,
            metadata=metadata,
            link=link,
            description=description,
            privacy=privacy,
            uri=uri,
            pictures=pictures,
            tags=tags,
            modified_time=modified_time,
            resource_key=resource_key,
            name=name,
            header=header,
            categories=categories,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.category import Category
from vimeo_python_sdk.model.channel_metadata import ChannelMetadata
from vimeo_python_sdk.model.channel_privacy import ChannelPrivacy
from vimeo_python_sdk.model.picture import Picture
from vimeo_python_sdk.model.tag import Tag
from vimeo_python_sdk.model.user import User
