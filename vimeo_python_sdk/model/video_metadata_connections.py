# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideoMetadataConnections(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A list of resource URIs related to the video.
    """


    class MetaOapg:
        required = {
            "comments",
            "ancestor_path",
            "available_channels",
            "recommendations",
            "pictures",
            "users_with_access",
            "trailer",
            "related",
            "credits",
            "resource_creator_team_user",
            "versions",
            "texttracks",
            "season",
            "team_permissions",
            "ondemand",
            "likes",
        }
        
        class properties:
            
            
            class ancestor_path(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AncestorPath']:
                        return AncestorPath
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AncestorPath'], typing.List['AncestorPath']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'ancestor_path':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AncestorPath':
                    return super().__getitem__(i)
        
            @staticmethod
            def available_channels() -> typing.Type['VideoMetadataConnectionsAvailableChannels']:
                return VideoMetadataConnectionsAvailableChannels
        
            @staticmethod
            def comments() -> typing.Type['VideoMetadataConnectionsComments']:
                return VideoMetadataConnectionsComments
        
            @staticmethod
            def credits() -> typing.Type['VideoMetadataConnectionsCredits']:
                return VideoMetadataConnectionsCredits
        
            @staticmethod
            def likes() -> typing.Type['VideoMetadataConnectionsLikes']:
                return VideoMetadataConnectionsLikes
        
            @staticmethod
            def ondemand() -> typing.Type['VideoMetadataConnectionsOndemand']:
                return VideoMetadataConnectionsOndemand
        
            @staticmethod
            def pictures() -> typing.Type['VideoMetadataConnectionsPictures']:
                return VideoMetadataConnectionsPictures
        
            @staticmethod
            def recommendations() -> typing.Type['VideoMetadataConnectionsRecommendations']:
                return VideoMetadataConnectionsRecommendations
        
            @staticmethod
            def related() -> typing.Type['VideoMetadataConnectionsRelated']:
                return VideoMetadataConnectionsRelated
        
            @staticmethod
            def resource_creator_team_user() -> typing.Type['VideoMetadataConnectionsResourceCreatorTeamUser']:
                return VideoMetadataConnectionsResourceCreatorTeamUser
        
            @staticmethod
            def season() -> typing.Type['VideoMetadataConnectionsSeason']:
                return VideoMetadataConnectionsSeason
        
            @staticmethod
            def team_permissions() -> typing.Type['VideoMetadataConnectionsTeamPermissions']:
                return VideoMetadataConnectionsTeamPermissions
        
            @staticmethod
            def texttracks() -> typing.Type['VideoMetadataConnectionsTexttracks']:
                return VideoMetadataConnectionsTexttracks
        
            @staticmethod
            def trailer() -> typing.Type['VideoMetadataConnectionsTrailer']:
                return VideoMetadataConnectionsTrailer
        
            @staticmethod
            def users_with_access() -> typing.Type['VideoMetadataConnectionsUsersWithAccess']:
                return VideoMetadataConnectionsUsersWithAccess
        
            @staticmethod
            def versions() -> typing.Type['VideoMetadataConnectionsVersions']:
                return VideoMetadataConnectionsVersions
            __annotations__ = {
                "ancestor_path": ancestor_path,
                "available_channels": available_channels,
                "comments": comments,
                "credits": credits,
                "likes": likes,
                "ondemand": ondemand,
                "pictures": pictures,
                "recommendations": recommendations,
                "related": related,
                "resource_creator_team_user": resource_creator_team_user,
                "season": season,
                "team_permissions": team_permissions,
                "texttracks": texttracks,
                "trailer": trailer,
                "users_with_access": users_with_access,
                "versions": versions,
            }
    
    comments: 'VideoMetadataConnectionsComments'
    ancestor_path: MetaOapg.properties.ancestor_path
    available_channels: 'VideoMetadataConnectionsAvailableChannels'
    recommendations: 'VideoMetadataConnectionsRecommendations'
    pictures: 'VideoMetadataConnectionsPictures'
    users_with_access: 'VideoMetadataConnectionsUsersWithAccess'
    trailer: 'VideoMetadataConnectionsTrailer'
    related: 'VideoMetadataConnectionsRelated'
    credits: 'VideoMetadataConnectionsCredits'
    resource_creator_team_user: 'VideoMetadataConnectionsResourceCreatorTeamUser'
    versions: 'VideoMetadataConnectionsVersions'
    texttracks: 'VideoMetadataConnectionsTexttracks'
    season: 'VideoMetadataConnectionsSeason'
    team_permissions: 'VideoMetadataConnectionsTeamPermissions'
    ondemand: 'VideoMetadataConnectionsOndemand'
    likes: 'VideoMetadataConnectionsLikes'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ancestor_path"]) -> MetaOapg.properties.ancestor_path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_channels"]) -> 'VideoMetadataConnectionsAvailableChannels': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> 'VideoMetadataConnectionsComments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credits"]) -> 'VideoMetadataConnectionsCredits': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["likes"]) -> 'VideoMetadataConnectionsLikes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ondemand"]) -> 'VideoMetadataConnectionsOndemand': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'VideoMetadataConnectionsPictures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recommendations"]) -> 'VideoMetadataConnectionsRecommendations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["related"]) -> 'VideoMetadataConnectionsRelated': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_creator_team_user"]) -> 'VideoMetadataConnectionsResourceCreatorTeamUser': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["season"]) -> 'VideoMetadataConnectionsSeason': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_permissions"]) -> 'VideoMetadataConnectionsTeamPermissions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["texttracks"]) -> 'VideoMetadataConnectionsTexttracks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trailer"]) -> 'VideoMetadataConnectionsTrailer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["users_with_access"]) -> 'VideoMetadataConnectionsUsersWithAccess': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["versions"]) -> 'VideoMetadataConnectionsVersions': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ancestor_path", "available_channels", "comments", "credits", "likes", "ondemand", "pictures", "recommendations", "related", "resource_creator_team_user", "season", "team_permissions", "texttracks", "trailer", "users_with_access", "versions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ancestor_path"]) -> MetaOapg.properties.ancestor_path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_channels"]) -> 'VideoMetadataConnectionsAvailableChannels': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> 'VideoMetadataConnectionsComments': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credits"]) -> 'VideoMetadataConnectionsCredits': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["likes"]) -> 'VideoMetadataConnectionsLikes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ondemand"]) -> 'VideoMetadataConnectionsOndemand': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'VideoMetadataConnectionsPictures': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recommendations"]) -> 'VideoMetadataConnectionsRecommendations': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["related"]) -> 'VideoMetadataConnectionsRelated': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_creator_team_user"]) -> 'VideoMetadataConnectionsResourceCreatorTeamUser': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["season"]) -> 'VideoMetadataConnectionsSeason': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_permissions"]) -> 'VideoMetadataConnectionsTeamPermissions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["texttracks"]) -> 'VideoMetadataConnectionsTexttracks': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trailer"]) -> 'VideoMetadataConnectionsTrailer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["users_with_access"]) -> 'VideoMetadataConnectionsUsersWithAccess': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["versions"]) -> 'VideoMetadataConnectionsVersions': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ancestor_path", "available_channels", "comments", "credits", "likes", "ondemand", "pictures", "recommendations", "related", "resource_creator_team_user", "season", "team_permissions", "texttracks", "trailer", "users_with_access", "versions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        comments: 'VideoMetadataConnectionsComments',
        ancestor_path: typing.Union[MetaOapg.properties.ancestor_path, list, tuple, ],
        available_channels: 'VideoMetadataConnectionsAvailableChannels',
        recommendations: 'VideoMetadataConnectionsRecommendations',
        pictures: 'VideoMetadataConnectionsPictures',
        users_with_access: 'VideoMetadataConnectionsUsersWithAccess',
        trailer: 'VideoMetadataConnectionsTrailer',
        related: 'VideoMetadataConnectionsRelated',
        credits: 'VideoMetadataConnectionsCredits',
        resource_creator_team_user: 'VideoMetadataConnectionsResourceCreatorTeamUser',
        versions: 'VideoMetadataConnectionsVersions',
        texttracks: 'VideoMetadataConnectionsTexttracks',
        season: 'VideoMetadataConnectionsSeason',
        team_permissions: 'VideoMetadataConnectionsTeamPermissions',
        ondemand: 'VideoMetadataConnectionsOndemand',
        likes: 'VideoMetadataConnectionsLikes',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoMetadataConnections':
        return super().__new__(
            cls,
            *args,
            comments=comments,
            ancestor_path=ancestor_path,
            available_channels=available_channels,
            recommendations=recommendations,
            pictures=pictures,
            users_with_access=users_with_access,
            trailer=trailer,
            related=related,
            credits=credits,
            resource_creator_team_user=resource_creator_team_user,
            versions=versions,
            texttracks=texttracks,
            season=season,
            team_permissions=team_permissions,
            ondemand=ondemand,
            likes=likes,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.ancestor_path import AncestorPath
from vimeo_python_sdk.model.video_metadata_connections_available_channels import VideoMetadataConnectionsAvailableChannels
from vimeo_python_sdk.model.video_metadata_connections_comments import VideoMetadataConnectionsComments
from vimeo_python_sdk.model.video_metadata_connections_credits import VideoMetadataConnectionsCredits
from vimeo_python_sdk.model.video_metadata_connections_likes import VideoMetadataConnectionsLikes
from vimeo_python_sdk.model.video_metadata_connections_ondemand import VideoMetadataConnectionsOndemand
from vimeo_python_sdk.model.video_metadata_connections_pictures import VideoMetadataConnectionsPictures
from vimeo_python_sdk.model.video_metadata_connections_recommendations import VideoMetadataConnectionsRecommendations
from vimeo_python_sdk.model.video_metadata_connections_related import VideoMetadataConnectionsRelated
from vimeo_python_sdk.model.video_metadata_connections_resource_creator_team_user import VideoMetadataConnectionsResourceCreatorTeamUser
from vimeo_python_sdk.model.video_metadata_connections_season import VideoMetadataConnectionsSeason
from vimeo_python_sdk.model.video_metadata_connections_team_permissions import VideoMetadataConnectionsTeamPermissions
from vimeo_python_sdk.model.video_metadata_connections_texttracks import VideoMetadataConnectionsTexttracks
from vimeo_python_sdk.model.video_metadata_connections_trailer import VideoMetadataConnectionsTrailer
from vimeo_python_sdk.model.video_metadata_connections_users_with_access import VideoMetadataConnectionsUsersWithAccess
from vimeo_python_sdk.model.video_metadata_connections_versions import VideoMetadataConnectionsVersions
