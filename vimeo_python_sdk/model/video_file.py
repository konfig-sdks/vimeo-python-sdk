# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideoFile(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created_time",
            "fps",
            "link",
            "size_short",
            "type",
            "quality",
            "codec",
            "rendition",
            "size",
            "width",
            "public_name",
            "height",
            "md5",
        }
        
        class properties:
            
            
            class codec(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AV1": "AV1",
                        "H264": "H264",
                        "HEVC": "HEVC",
                    }
                
                @schemas.classproperty
                def AV1(cls):
                    return cls("AV1")
                
                @schemas.classproperty
                def H264(cls):
                    return cls("H264")
                
                @schemas.classproperty
                def HEVC(cls):
                    return cls("HEVC")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'codec':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            created_time = schemas.StrSchema
            fps = schemas.NumberSchema
            
            
            class height(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'height':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            link = schemas.StrSchema
            md5 = schemas.StrSchema
            public_name = schemas.StrSchema
            
            
            class quality(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "hd": "HD",
                        "hls": "HLS",
                        "mobile": "MOBILE",
                        "sd": "SD",
                        "source": "SOURCE",
                        "uhd": "UHD",
                    }
                
                @schemas.classproperty
                def HD(cls):
                    return cls("hd")
                
                @schemas.classproperty
                def HLS(cls):
                    return cls("hls")
                
                @schemas.classproperty
                def MOBILE(cls):
                    return cls("mobile")
                
                @schemas.classproperty
                def SD(cls):
                    return cls("sd")
                
                @schemas.classproperty
                def SOURCE(cls):
                    return cls("source")
                
                @schemas.classproperty
                def UHD(cls):
                    return cls("uhd")
            
            
            class rendition(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "1080p": "_1080P",
                        "240p": "_240P",
                        "2k": "_2K",
                        "360p": "_360P",
                        "480p": "_480P",
                        "4k": "_4K",
                        "540p": "_540P",
                        "5k": "_5K",
                        "6k": "_6K",
                        "720p": "_720P",
                        "7k": "_7K",
                        "8k": "_8K",
                        "adaptive": "ADAPTIVE",
                        "source": "SOURCE",
                    }
                
                @schemas.classproperty
                def _1080P(cls):
                    return cls("1080p")
                
                @schemas.classproperty
                def _240P(cls):
                    return cls("240p")
                
                @schemas.classproperty
                def _2K(cls):
                    return cls("2k")
                
                @schemas.classproperty
                def _360P(cls):
                    return cls("360p")
                
                @schemas.classproperty
                def _480P(cls):
                    return cls("480p")
                
                @schemas.classproperty
                def _4K(cls):
                    return cls("4k")
                
                @schemas.classproperty
                def _540P(cls):
                    return cls("540p")
                
                @schemas.classproperty
                def _5K(cls):
                    return cls("5k")
                
                @schemas.classproperty
                def _6K(cls):
                    return cls("6k")
                
                @schemas.classproperty
                def _720P(cls):
                    return cls("720p")
                
                @schemas.classproperty
                def _7K(cls):
                    return cls("7k")
                
                @schemas.classproperty
                def _8K(cls):
                    return cls("8k")
                
                @schemas.classproperty
                def ADAPTIVE(cls):
                    return cls("adaptive")
                
                @schemas.classproperty
                def SOURCE(cls):
                    return cls("source")
            
            
            class size(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'size':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            size_short = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "source": "SOURCE",
                        "video/mp4": "VIDEO_MP4",
                        "video/webm": "VIDEO_WEBM",
                        "vp6/x-video": "VP6_XVIDEO",
                    }
                
                @schemas.classproperty
                def SOURCE(cls):
                    return cls("source")
                
                @schemas.classproperty
                def VIDEO_MP4(cls):
                    return cls("video/mp4")
                
                @schemas.classproperty
                def VIDEO_WEBM(cls):
                    return cls("video/webm")
                
                @schemas.classproperty
                def VP6_XVIDEO(cls):
                    return cls("vp6/x-video")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'type':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class width(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'width':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            expires = schemas.StrSchema
        
            @staticmethod
            def log() -> typing.Type['VideoFileLog']:
                return VideoFileLog
            
            
            class source_link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'source_link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            video_file_id = schemas.StrSchema
            __annotations__ = {
                "codec": codec,
                "created_time": created_time,
                "fps": fps,
                "height": height,
                "link": link,
                "md5": md5,
                "public_name": public_name,
                "quality": quality,
                "rendition": rendition,
                "size": size,
                "size_short": size_short,
                "type": type,
                "width": width,
                "expires": expires,
                "log": log,
                "source_link": source_link,
                "video_file_id": video_file_id,
            }
    
    created_time: MetaOapg.properties.created_time
    fps: MetaOapg.properties.fps
    link: MetaOapg.properties.link
    size_short: MetaOapg.properties.size_short
    type: MetaOapg.properties.type
    quality: MetaOapg.properties.quality
    codec: MetaOapg.properties.codec
    rendition: MetaOapg.properties.rendition
    size: MetaOapg.properties.size
    width: MetaOapg.properties.width
    public_name: MetaOapg.properties.public_name
    height: MetaOapg.properties.height
    md5: MetaOapg.properties.md5
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["codec"]) -> MetaOapg.properties.codec: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fps"]) -> MetaOapg.properties.fps: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["md5"]) -> MetaOapg.properties.md5: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["public_name"]) -> MetaOapg.properties.public_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quality"]) -> MetaOapg.properties.quality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rendition"]) -> MetaOapg.properties.rendition: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size_short"]) -> MetaOapg.properties.size_short: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expires"]) -> MetaOapg.properties.expires: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["log"]) -> 'VideoFileLog': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["source_link"]) -> MetaOapg.properties.source_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video_file_id"]) -> MetaOapg.properties.video_file_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["codec", "created_time", "fps", "height", "link", "md5", "public_name", "quality", "rendition", "size", "size_short", "type", "width", "expires", "log", "source_link", "video_file_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["codec"]) -> MetaOapg.properties.codec: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fps"]) -> MetaOapg.properties.fps: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["md5"]) -> MetaOapg.properties.md5: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["public_name"]) -> MetaOapg.properties.public_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quality"]) -> MetaOapg.properties.quality: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rendition"]) -> MetaOapg.properties.rendition: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size_short"]) -> MetaOapg.properties.size_short: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expires"]) -> typing.Union[MetaOapg.properties.expires, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["log"]) -> typing.Union['VideoFileLog', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["source_link"]) -> typing.Union[MetaOapg.properties.source_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video_file_id"]) -> typing.Union[MetaOapg.properties.video_file_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["codec", "created_time", "fps", "height", "link", "md5", "public_name", "quality", "rendition", "size", "size_short", "type", "width", "expires", "log", "source_link", "video_file_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        fps: typing.Union[MetaOapg.properties.fps, decimal.Decimal, int, float, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        size_short: typing.Union[MetaOapg.properties.size_short, str, ],
        type: typing.Union[MetaOapg.properties.type, None, str, ],
        quality: typing.Union[MetaOapg.properties.quality, str, ],
        codec: typing.Union[MetaOapg.properties.codec, None, str, ],
        rendition: typing.Union[MetaOapg.properties.rendition, str, ],
        size: typing.Union[MetaOapg.properties.size, None, decimal.Decimal, int, float, ],
        width: typing.Union[MetaOapg.properties.width, None, decimal.Decimal, int, float, ],
        public_name: typing.Union[MetaOapg.properties.public_name, str, ],
        height: typing.Union[MetaOapg.properties.height, None, decimal.Decimal, int, float, ],
        md5: typing.Union[MetaOapg.properties.md5, str, ],
        expires: typing.Union[MetaOapg.properties.expires, str, schemas.Unset] = schemas.unset,
        log: typing.Union['VideoFileLog', schemas.Unset] = schemas.unset,
        source_link: typing.Union[MetaOapg.properties.source_link, None, str, schemas.Unset] = schemas.unset,
        video_file_id: typing.Union[MetaOapg.properties.video_file_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoFile':
        return super().__new__(
            cls,
            *args,
            created_time=created_time,
            fps=fps,
            link=link,
            size_short=size_short,
            type=type,
            quality=quality,
            codec=codec,
            rendition=rendition,
            size=size,
            width=width,
            public_name=public_name,
            height=height,
            md5=md5,
            expires=expires,
            log=log,
            source_link=source_link,
            video_file_id=video_file_id,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.video_file_log import VideoFileLog
