# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class OnDemandVideo(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "metadata",
            "play_progress",
            "buy",
            "link",
            "release_year",
            "rent",
            "type",
            "uri",
            "interactions",
        }
        
        class properties:
        
            @staticmethod
            def buy() -> typing.Type['OnDemandVideoBuy']:
                return OnDemandVideoBuy
        
            @staticmethod
            def interactions() -> typing.Type['OnDemandVideoInteractions']:
                return OnDemandVideoInteractions
            link = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['OnDemandVideoMetadata']:
                return OnDemandVideoMetadata
            play_progress = schemas.NumberSchema
            
            
            class release_year(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'release_year':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def rent() -> typing.Type['OnDemandVideoRent']:
                return OnDemandVideoRent
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EXTRA(cls):
                    return cls("extra")
                
                @schemas.classproperty
                def MAIN(cls):
                    return cls("main")
                
                @schemas.classproperty
                def TRAILER(cls):
                    return cls("trailer")
            uri = schemas.StrSchema
            description = schemas.StrSchema
            duration = schemas.StrSchema
            episode = schemas.NumberSchema
            name = schemas.StrSchema
        
            @staticmethod
            def options() -> typing.Type['OnDemandVideoOptions']:
                return OnDemandVideoOptions
        
            @staticmethod
            def pictures() -> typing.Type['Picture']:
                return Picture
            position = schemas.NumberSchema
            release_date = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            __annotations__ = {
                "buy": buy,
                "interactions": interactions,
                "link": link,
                "metadata": metadata,
                "play_progress": play_progress,
                "release_year": release_year,
                "rent": rent,
                "type": type,
                "uri": uri,
                "description": description,
                "duration": duration,
                "episode": episode,
                "name": name,
                "options": options,
                "pictures": pictures,
                "position": position,
                "release_date": release_date,
                "user": user,
            }
    
    metadata: 'OnDemandVideoMetadata'
    play_progress: MetaOapg.properties.play_progress
    buy: 'OnDemandVideoBuy'
    link: MetaOapg.properties.link
    release_year: MetaOapg.properties.release_year
    rent: 'OnDemandVideoRent'
    type: MetaOapg.properties.type
    uri: MetaOapg.properties.uri
    interactions: 'OnDemandVideoInteractions'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buy"]) -> 'OnDemandVideoBuy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interactions"]) -> 'OnDemandVideoInteractions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'OnDemandVideoMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["play_progress"]) -> MetaOapg.properties.play_progress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_year"]) -> MetaOapg.properties.release_year: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rent"]) -> 'OnDemandVideoRent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["episode"]) -> MetaOapg.properties.episode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'OnDemandVideoOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["position"]) -> MetaOapg.properties.position: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_date"]) -> MetaOapg.properties.release_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["buy", "interactions", "link", "metadata", "play_progress", "release_year", "rent", "type", "uri", "description", "duration", "episode", "name", "options", "pictures", "position", "release_date", "user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buy"]) -> 'OnDemandVideoBuy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interactions"]) -> 'OnDemandVideoInteractions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'OnDemandVideoMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["play_progress"]) -> MetaOapg.properties.play_progress: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_year"]) -> MetaOapg.properties.release_year: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rent"]) -> 'OnDemandVideoRent': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["episode"]) -> typing.Union[MetaOapg.properties.episode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['OnDemandVideoOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> typing.Union['Picture', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["position"]) -> typing.Union[MetaOapg.properties.position, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_date"]) -> typing.Union[MetaOapg.properties.release_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> typing.Union['User', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["buy", "interactions", "link", "metadata", "play_progress", "release_year", "rent", "type", "uri", "description", "duration", "episode", "name", "options", "pictures", "position", "release_date", "user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        metadata: 'OnDemandVideoMetadata',
        play_progress: typing.Union[MetaOapg.properties.play_progress, decimal.Decimal, int, float, ],
        buy: 'OnDemandVideoBuy',
        link: typing.Union[MetaOapg.properties.link, str, ],
        release_year: typing.Union[MetaOapg.properties.release_year, None, decimal.Decimal, int, float, ],
        rent: 'OnDemandVideoRent',
        type: typing.Union[MetaOapg.properties.type, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        interactions: 'OnDemandVideoInteractions',
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        duration: typing.Union[MetaOapg.properties.duration, str, schemas.Unset] = schemas.unset,
        episode: typing.Union[MetaOapg.properties.episode, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        options: typing.Union['OnDemandVideoOptions', schemas.Unset] = schemas.unset,
        pictures: typing.Union['Picture', schemas.Unset] = schemas.unset,
        position: typing.Union[MetaOapg.properties.position, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        release_date: typing.Union[MetaOapg.properties.release_date, str, schemas.Unset] = schemas.unset,
        user: typing.Union['User', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnDemandVideo':
        return super().__new__(
            cls,
            *args,
            metadata=metadata,
            play_progress=play_progress,
            buy=buy,
            link=link,
            release_year=release_year,
            rent=rent,
            type=type,
            uri=uri,
            interactions=interactions,
            description=description,
            duration=duration,
            episode=episode,
            name=name,
            options=options,
            pictures=pictures,
            position=position,
            release_date=release_date,
            user=user,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.on_demand_video_buy import OnDemandVideoBuy
from vimeo_python_sdk.model.on_demand_video_interactions import OnDemandVideoInteractions
from vimeo_python_sdk.model.on_demand_video_metadata import OnDemandVideoMetadata
from vimeo_python_sdk.model.on_demand_video_options import OnDemandVideoOptions
from vimeo_python_sdk.model.on_demand_video_rent import OnDemandVideoRent
from vimeo_python_sdk.model.picture import Picture
from vimeo_python_sdk.model.user import User
