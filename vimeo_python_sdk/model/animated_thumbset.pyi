# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class AnimatedThumbset(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "clip_uri",
            "sizes",
            "created_on",
            "uri",
            "status",
        }
        
        class properties:
            clip_uri = schemas.StrSchema
            created_on = schemas.StrSchema
            
            
            class sizes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AnimatedThumbnail']:
                        return AnimatedThumbnail
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['AnimatedThumbnail'], typing.List['AnimatedThumbnail']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sizes':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AnimatedThumbnail':
                    return super().__getitem__(i)
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("cancelled")
                
                @schemas.classproperty
                def COMPLETED(cls):
                    return cls("completed")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("failed")
                
                @schemas.classproperty
                def STARTED(cls):
                    return cls("started")
            uri = schemas.StrSchema
            __annotations__ = {
                "clip_uri": clip_uri,
                "created_on": created_on,
                "sizes": sizes,
                "status": status,
                "uri": uri,
            }
    
    clip_uri: MetaOapg.properties.clip_uri
    sizes: MetaOapg.properties.sizes
    created_on: MetaOapg.properties.created_on
    uri: MetaOapg.properties.uri
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clip_uri"]) -> MetaOapg.properties.clip_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sizes"]) -> MetaOapg.properties.sizes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["clip_uri", "created_on", "sizes", "status", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clip_uri"]) -> MetaOapg.properties.clip_uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_on"]) -> MetaOapg.properties.created_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sizes"]) -> MetaOapg.properties.sizes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["clip_uri", "created_on", "sizes", "status", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        clip_uri: typing.Union[MetaOapg.properties.clip_uri, str, ],
        sizes: typing.Union[MetaOapg.properties.sizes, list, tuple, ],
        created_on: typing.Union[MetaOapg.properties.created_on, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        status: typing.Union[MetaOapg.properties.status, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AnimatedThumbset':
        return super().__new__(
            cls,
            *args,
            clip_uri=clip_uri,
            sizes=sizes,
            created_on=created_on,
            uri=uri,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.animated_thumbnail import AnimatedThumbnail
