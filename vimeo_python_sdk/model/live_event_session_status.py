# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class LiveEventSessionStatus(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "can_manage",
            "metering",
            "archive",
            "id",
            "stream_mode",
            "ingest",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def archive() -> typing.Type['LiveEventSessionStatusArchive']:
                return LiveEventSessionStatusArchive
            can_manage = schemas.BoolSchema
            id = schemas.NumberSchema
        
            @staticmethod
            def ingest() -> typing.Type['LiveEventSessionStatusIngest']:
                return LiveEventSessionStatusIngest
        
            @staticmethod
            def metering() -> typing.Type['LiveEventSessionStatusMetering']:
                return LiveEventSessionStatusMetering
            
            
            class status(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ended": "ENDED",
                        "started": "STARTED",
                    }
                
                @schemas.classproperty
                def ENDED(cls):
                    return cls("ended")
                
                @schemas.classproperty
                def STARTED(cls):
                    return cls("started")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stream_mode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "live": "LIVE",
                        "record": "RECORD",
                        "simulive": "SIMULIVE",
                    }
                
                @schemas.classproperty
                def LIVE(cls):
                    return cls("live")
                
                @schemas.classproperty
                def RECORD(cls):
                    return cls("record")
                
                @schemas.classproperty
                def SIMULIVE(cls):
                    return cls("simulive")
            __annotations__ = {
                "archive": archive,
                "can_manage": can_manage,
                "id": id,
                "ingest": ingest,
                "metering": metering,
                "status": status,
                "stream_mode": stream_mode,
            }
    
    can_manage: MetaOapg.properties.can_manage
    metering: 'LiveEventSessionStatusMetering'
    archive: 'LiveEventSessionStatusArchive'
    id: MetaOapg.properties.id
    stream_mode: MetaOapg.properties.stream_mode
    ingest: 'LiveEventSessionStatusIngest'
    status: MetaOapg.properties.status
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["archive"]) -> 'LiveEventSessionStatusArchive': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_manage"]) -> MetaOapg.properties.can_manage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ingest"]) -> 'LiveEventSessionStatusIngest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metering"]) -> 'LiveEventSessionStatusMetering': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_mode"]) -> MetaOapg.properties.stream_mode: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["archive", "can_manage", "id", "ingest", "metering", "status", "stream_mode", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["archive"]) -> 'LiveEventSessionStatusArchive': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_manage"]) -> MetaOapg.properties.can_manage: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ingest"]) -> 'LiveEventSessionStatusIngest': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metering"]) -> 'LiveEventSessionStatusMetering': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_mode"]) -> MetaOapg.properties.stream_mode: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["archive", "can_manage", "id", "ingest", "metering", "status", "stream_mode", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        can_manage: typing.Union[MetaOapg.properties.can_manage, bool, ],
        metering: 'LiveEventSessionStatusMetering',
        archive: 'LiveEventSessionStatusArchive',
        id: typing.Union[MetaOapg.properties.id, decimal.Decimal, int, float, ],
        stream_mode: typing.Union[MetaOapg.properties.stream_mode, str, ],
        ingest: 'LiveEventSessionStatusIngest',
        status: typing.Union[MetaOapg.properties.status, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LiveEventSessionStatus':
        return super().__new__(
            cls,
            *args,
            can_manage=can_manage,
            metering=metering,
            archive=archive,
            id=id,
            stream_mode=stream_mode,
            ingest=ingest,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.live_event_session_status_archive import LiveEventSessionStatusArchive
from vimeo_python_sdk.model.live_event_session_status_ingest import LiveEventSessionStatusIngest
from vimeo_python_sdk.model.live_event_session_status_metering import LiveEventSessionStatusMetering
