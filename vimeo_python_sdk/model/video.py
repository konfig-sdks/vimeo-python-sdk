# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Video(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "metadata",
            "upload",
            "language",
            "type",
            "content_rating_class",
            "download",
            "stats",
            "rating_mod_locked",
            "context",
            "show_svv_footer_banner",
            "embed",
            "spatial",
            "custom_url",
            "height",
            "app",
            "has_audio_tracks",
            "created_time",
            "transcode",
            "tags",
            "license",
            "is_playable",
            "resource_key",
            "has_text_tracks",
            "name",
            "files",
            "player_embed_url",
            "description_html",
            "status",
            "has_audio",
            "link",
            "description",
            "privacy",
            "vod",
            "pictures",
            "duration",
            "modified_time",
            "transcript",
            "uploader",
            "can_move_to_project",
            "content_rating",
            "categories",
            "release_time",
            "show_review_page",
            "has_interactive",
            "origin_variable_frame_resolution",
            "uri",
            "allowed_privacies",
            "has_chapters",
            "version_transcode_status",
            "show_svv_timecoded_comments",
            "width",
            "is_copyright_restricted",
            "user",
        }
        
        class properties:
            
            
            class tags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Tag']:
                        return Tag
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Tag'], typing.List['Tag']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tags':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Tag':
                    return super().__getitem__(i)
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def allowed_privacies() -> typing.Type['VideoAllowedPrivacies']:
                return VideoAllowedPrivacies
        
            @staticmethod
            def app() -> typing.Type['ApiApp']:
                return ApiApp
            
            
            class can_move_to_project(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'can_move_to_project':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class categories(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Category']:
                        return Category
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['Category'], typing.List['Category']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'categories':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Category':
                    return super().__getitem__(i)
        
            @staticmethod
            def content_rating() -> typing.Type['VideoContentRating']:
                return VideoContentRating
            
            
            class content_rating_class(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "explicit": "EXPLICIT",
                        "safe": "SAFE",
                        "unrated": "UNRATED",
                    }
                
                @schemas.classproperty
                def EXPLICIT(cls):
                    return cls("explicit")
                
                @schemas.classproperty
                def SAFE(cls):
                    return cls("safe")
                
                @schemas.classproperty
                def UNRATED(cls):
                    return cls("unrated")
        
            @staticmethod
            def context() -> typing.Type['VideoContext']:
                return VideoContext
            created_time = schemas.StrSchema
            
            
            class custom_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class description_html(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description_html':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class download(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VideoFile']:
                        return VideoFile
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['VideoFile'], typing.List['VideoFile']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'download':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VideoFile':
                    return super().__getitem__(i)
            duration = schemas.NumberSchema
        
            @staticmethod
            def embed() -> typing.Type['EmbedSettings']:
                return EmbedSettings
            
            
            class files(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['VideoFile']:
                        return VideoFile
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['VideoFile'], typing.List['VideoFile']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'files':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'VideoFile':
                    return super().__getitem__(i)
            has_audio = schemas.BoolSchema
            has_audio_tracks = schemas.BoolSchema
            has_chapters = schemas.BoolSchema
            has_interactive = schemas.BoolSchema
            has_text_tracks = schemas.BoolSchema
            height = schemas.NumberSchema
            is_copyright_restricted = schemas.BoolSchema
            is_playable = schemas.BoolSchema
            
            
            class language(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'language':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class license(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "by": "BY",
                        "by-nc": "BYNC",
                        "by-nc-nd": "BYNCND",
                        "by-nc-sa": "BYNCSA",
                        "by-nd": "BYND",
                        "by-sa": "BYSA",
                        "cc0": "CC0",
                    }
                
                @schemas.classproperty
                def BY(cls):
                    return cls("by")
                
                @schemas.classproperty
                def BYNC(cls):
                    return cls("by-nc")
                
                @schemas.classproperty
                def BYNCND(cls):
                    return cls("by-nc-nd")
                
                @schemas.classproperty
                def BYNCSA(cls):
                    return cls("by-nc-sa")
                
                @schemas.classproperty
                def BYND(cls):
                    return cls("by-nd")
                
                @schemas.classproperty
                def BYSA(cls):
                    return cls("by-sa")
                
                @schemas.classproperty
                def CC0(cls):
                    return cls("cc0")
            link = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['VideoMetadata']:
                return VideoMetadata
            modified_time = schemas.StrSchema
            name = schemas.StrSchema
            origin_variable_frame_resolution = schemas.BoolSchema
        
            @staticmethod
            def pictures() -> typing.Type['Picture']:
                return Picture
            player_embed_url = schemas.StrSchema
        
            @staticmethod
            def privacy() -> typing.Type['VideoPrivacy']:
                return VideoPrivacy
            rating_mod_locked = schemas.BoolSchema
            release_time = schemas.StrSchema
            resource_key = schemas.StrSchema
            
            
            class show_review_page(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'show_review_page':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class show_svv_footer_banner(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'show_svv_footer_banner':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class show_svv_timecoded_comments(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'show_svv_timecoded_comments':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def spatial() -> typing.Type['VideoSpatial']:
                return VideoSpatial
        
            @staticmethod
            def stats() -> typing.Type['VideoStats']:
                return VideoStats
            
            
            class status(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "available": "AVAILABLE",
                        "quota_exceeded": "QUOTA_EXCEEDED",
                        "total_cap_exceeded": "TOTAL_CAP_EXCEEDED",
                        "transcode_starting": "TRANSCODE_STARTING",
                        "transcoding": "TRANSCODING",
                        "transcoding_error": "TRANSCODING_ERROR",
                        "unavailable": "UNAVAILABLE",
                        "uploading": "UPLOADING",
                        "uploading_error": "UPLOADING_ERROR",
                    }
                
                @schemas.classproperty
                def AVAILABLE(cls):
                    return cls("available")
                
                @schemas.classproperty
                def QUOTA_EXCEEDED(cls):
                    return cls("quota_exceeded")
                
                @schemas.classproperty
                def TOTAL_CAP_EXCEEDED(cls):
                    return cls("total_cap_exceeded")
                
                @schemas.classproperty
                def TRANSCODE_STARTING(cls):
                    return cls("transcode_starting")
                
                @schemas.classproperty
                def TRANSCODING(cls):
                    return cls("transcoding")
                
                @schemas.classproperty
                def TRANSCODING_ERROR(cls):
                    return cls("transcoding_error")
                
                @schemas.classproperty
                def UNAVAILABLE(cls):
                    return cls("unavailable")
                
                @schemas.classproperty
                def UPLOADING(cls):
                    return cls("uploading")
                
                @schemas.classproperty
                def UPLOADING_ERROR(cls):
                    return cls("uploading_error")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def transcode() -> typing.Type['VideoTranscode']:
                return VideoTranscode
        
            @staticmethod
            def transcript() -> typing.Type['VideoTranscript']:
                return VideoTranscript
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "live": "LIVE",
                        "stock": "STOCK",
                        "video": "VIDEO",
                    }
                
                @schemas.classproperty
                def LIVE(cls):
                    return cls("live")
                
                @schemas.classproperty
                def STOCK(cls):
                    return cls("stock")
                
                @schemas.classproperty
                def VIDEO(cls):
                    return cls("video")
        
            @staticmethod
            def upload() -> typing.Type['VideoUpload']:
                return VideoUpload
        
            @staticmethod
            def uploader() -> typing.Type['VideoUploader']:
                return VideoUploader
            uri = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
        
            @staticmethod
            def version_transcode_status() -> typing.Type['VersionTranscodeStatus']:
                return VersionTranscodeStatus
        
            @staticmethod
            def vod() -> typing.Type['VideoVod']:
                return VideoVod
            width = schemas.NumberSchema
            description_rich = schemas.StrSchema
        
            @staticmethod
            def disabled_properties() -> typing.Type['DisabledVideoProperties']:
                return DisabledVideoProperties
        
            @staticmethod
            def edit_session() -> typing.Type['EditingSession']:
                return EditingSession
            is_free = schemas.BoolSchema
            
            
            class last_user_action_event_date(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_user_action_event_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            manage_link = schemas.StrSchema
        
            @staticmethod
            def parent_folder() -> typing.Type['Project']:
                return Project
            password = schemas.StrSchema
        
            @staticmethod
            def play() -> typing.Type['Play']:
                return Play
            __annotations__ = {
                "tags": tags,
                "description": description,
                "allowed_privacies": allowed_privacies,
                "app": app,
                "can_move_to_project": can_move_to_project,
                "categories": categories,
                "content_rating": content_rating,
                "content_rating_class": content_rating_class,
                "context": context,
                "created_time": created_time,
                "custom_url": custom_url,
                "description_html": description_html,
                "download": download,
                "duration": duration,
                "embed": embed,
                "files": files,
                "has_audio": has_audio,
                "has_audio_tracks": has_audio_tracks,
                "has_chapters": has_chapters,
                "has_interactive": has_interactive,
                "has_text_tracks": has_text_tracks,
                "height": height,
                "is_copyright_restricted": is_copyright_restricted,
                "is_playable": is_playable,
                "language": language,
                "license": license,
                "link": link,
                "metadata": metadata,
                "modified_time": modified_time,
                "name": name,
                "origin_variable_frame_resolution": origin_variable_frame_resolution,
                "pictures": pictures,
                "player_embed_url": player_embed_url,
                "privacy": privacy,
                "rating_mod_locked": rating_mod_locked,
                "release_time": release_time,
                "resource_key": resource_key,
                "show_review_page": show_review_page,
                "show_svv_footer_banner": show_svv_footer_banner,
                "show_svv_timecoded_comments": show_svv_timecoded_comments,
                "spatial": spatial,
                "stats": stats,
                "status": status,
                "transcode": transcode,
                "transcript": transcript,
                "type": type,
                "upload": upload,
                "uploader": uploader,
                "uri": uri,
                "user": user,
                "version_transcode_status": version_transcode_status,
                "vod": vod,
                "width": width,
                "description_rich": description_rich,
                "disabled_properties": disabled_properties,
                "edit_session": edit_session,
                "is_free": is_free,
                "last_user_action_event_date": last_user_action_event_date,
                "manage_link": manage_link,
                "parent_folder": parent_folder,
                "password": password,
                "play": play,
            }
    
    metadata: 'VideoMetadata'
    upload: 'VideoUpload'
    language: MetaOapg.properties.language
    type: MetaOapg.properties.type
    content_rating_class: MetaOapg.properties.content_rating_class
    download: MetaOapg.properties.download
    stats: 'VideoStats'
    rating_mod_locked: MetaOapg.properties.rating_mod_locked
    context: 'VideoContext'
    show_svv_footer_banner: MetaOapg.properties.show_svv_footer_banner
    embed: 'EmbedSettings'
    spatial: 'VideoSpatial'
    custom_url: MetaOapg.properties.custom_url
    height: MetaOapg.properties.height
    app: 'ApiApp'
    has_audio_tracks: MetaOapg.properties.has_audio_tracks
    created_time: MetaOapg.properties.created_time
    transcode: 'VideoTranscode'
    tags: MetaOapg.properties.tags
    license: MetaOapg.properties.license
    is_playable: MetaOapg.properties.is_playable
    resource_key: MetaOapg.properties.resource_key
    has_text_tracks: MetaOapg.properties.has_text_tracks
    name: MetaOapg.properties.name
    files: MetaOapg.properties.files
    player_embed_url: MetaOapg.properties.player_embed_url
    description_html: MetaOapg.properties.description_html
    status: MetaOapg.properties.status
    has_audio: MetaOapg.properties.has_audio
    link: MetaOapg.properties.link
    description: MetaOapg.properties.description
    privacy: 'VideoPrivacy'
    vod: 'VideoVod'
    pictures: 'Picture'
    duration: MetaOapg.properties.duration
    modified_time: MetaOapg.properties.modified_time
    transcript: 'VideoTranscript'
    uploader: 'VideoUploader'
    can_move_to_project: MetaOapg.properties.can_move_to_project
    content_rating: 'VideoContentRating'
    categories: MetaOapg.properties.categories
    release_time: MetaOapg.properties.release_time
    show_review_page: MetaOapg.properties.show_review_page
    has_interactive: MetaOapg.properties.has_interactive
    origin_variable_frame_resolution: MetaOapg.properties.origin_variable_frame_resolution
    uri: MetaOapg.properties.uri
    allowed_privacies: 'VideoAllowedPrivacies'
    has_chapters: MetaOapg.properties.has_chapters
    version_transcode_status: 'VersionTranscodeStatus'
    show_svv_timecoded_comments: MetaOapg.properties.show_svv_timecoded_comments
    width: MetaOapg.properties.width
    is_copyright_restricted: MetaOapg.properties.is_copyright_restricted
    user: 'User'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_privacies"]) -> 'VideoAllowedPrivacies': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app"]) -> 'ApiApp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_move_to_project"]) -> MetaOapg.properties.can_move_to_project: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_rating"]) -> 'VideoContentRating': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_rating_class"]) -> MetaOapg.properties.content_rating_class: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["context"]) -> 'VideoContext': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_url"]) -> MetaOapg.properties.custom_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description_html"]) -> MetaOapg.properties.description_html: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download"]) -> MetaOapg.properties.download: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embed"]) -> 'EmbedSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["files"]) -> MetaOapg.properties.files: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_audio"]) -> MetaOapg.properties.has_audio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_audio_tracks"]) -> MetaOapg.properties.has_audio_tracks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_chapters"]) -> MetaOapg.properties.has_chapters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_interactive"]) -> MetaOapg.properties.has_interactive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_text_tracks"]) -> MetaOapg.properties.has_text_tracks: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_copyright_restricted"]) -> MetaOapg.properties.is_copyright_restricted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_playable"]) -> MetaOapg.properties.is_playable: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'VideoMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin_variable_frame_resolution"]) -> MetaOapg.properties.origin_variable_frame_resolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["player_embed_url"]) -> MetaOapg.properties.player_embed_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> 'VideoPrivacy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rating_mod_locked"]) -> MetaOapg.properties.rating_mod_locked: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["release_time"]) -> MetaOapg.properties.release_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_review_page"]) -> MetaOapg.properties.show_review_page: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_svv_footer_banner"]) -> MetaOapg.properties.show_svv_footer_banner: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["show_svv_timecoded_comments"]) -> MetaOapg.properties.show_svv_timecoded_comments: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spatial"]) -> 'VideoSpatial': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stats"]) -> 'VideoStats': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transcode"]) -> 'VideoTranscode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transcript"]) -> 'VideoTranscript': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload"]) -> 'VideoUpload': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uploader"]) -> 'VideoUploader': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["version_transcode_status"]) -> 'VersionTranscodeStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vod"]) -> 'VideoVod': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description_rich"]) -> MetaOapg.properties.description_rich: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disabled_properties"]) -> 'DisabledVideoProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit_session"]) -> 'EditingSession': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_free"]) -> MetaOapg.properties.is_free: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_user_action_event_date"]) -> MetaOapg.properties.last_user_action_event_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["manage_link"]) -> MetaOapg.properties.manage_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_folder"]) -> 'Project': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["play"]) -> 'Play': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["tags", "description", "allowed_privacies", "app", "can_move_to_project", "categories", "content_rating", "content_rating_class", "context", "created_time", "custom_url", "description_html", "download", "duration", "embed", "files", "has_audio", "has_audio_tracks", "has_chapters", "has_interactive", "has_text_tracks", "height", "is_copyright_restricted", "is_playable", "language", "license", "link", "metadata", "modified_time", "name", "origin_variable_frame_resolution", "pictures", "player_embed_url", "privacy", "rating_mod_locked", "release_time", "resource_key", "show_review_page", "show_svv_footer_banner", "show_svv_timecoded_comments", "spatial", "stats", "status", "transcode", "transcript", "type", "upload", "uploader", "uri", "user", "version_transcode_status", "vod", "width", "description_rich", "disabled_properties", "edit_session", "is_free", "last_user_action_event_date", "manage_link", "parent_folder", "password", "play", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tags"]) -> MetaOapg.properties.tags: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_privacies"]) -> 'VideoAllowedPrivacies': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app"]) -> 'ApiApp': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_move_to_project"]) -> MetaOapg.properties.can_move_to_project: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["categories"]) -> MetaOapg.properties.categories: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_rating"]) -> 'VideoContentRating': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_rating_class"]) -> MetaOapg.properties.content_rating_class: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["context"]) -> 'VideoContext': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_url"]) -> MetaOapg.properties.custom_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description_html"]) -> MetaOapg.properties.description_html: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download"]) -> MetaOapg.properties.download: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embed"]) -> 'EmbedSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["files"]) -> MetaOapg.properties.files: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_audio"]) -> MetaOapg.properties.has_audio: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_audio_tracks"]) -> MetaOapg.properties.has_audio_tracks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_chapters"]) -> MetaOapg.properties.has_chapters: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_interactive"]) -> MetaOapg.properties.has_interactive: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_text_tracks"]) -> MetaOapg.properties.has_text_tracks: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["height"]) -> MetaOapg.properties.height: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_copyright_restricted"]) -> MetaOapg.properties.is_copyright_restricted: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_playable"]) -> MetaOapg.properties.is_playable: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["language"]) -> MetaOapg.properties.language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["license"]) -> MetaOapg.properties.license: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'VideoMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin_variable_frame_resolution"]) -> MetaOapg.properties.origin_variable_frame_resolution: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["player_embed_url"]) -> MetaOapg.properties.player_embed_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> 'VideoPrivacy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rating_mod_locked"]) -> MetaOapg.properties.rating_mod_locked: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["release_time"]) -> MetaOapg.properties.release_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_review_page"]) -> MetaOapg.properties.show_review_page: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_svv_footer_banner"]) -> MetaOapg.properties.show_svv_footer_banner: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["show_svv_timecoded_comments"]) -> MetaOapg.properties.show_svv_timecoded_comments: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spatial"]) -> 'VideoSpatial': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stats"]) -> 'VideoStats': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transcode"]) -> 'VideoTranscode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transcript"]) -> 'VideoTranscript': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload"]) -> 'VideoUpload': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uploader"]) -> 'VideoUploader': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["version_transcode_status"]) -> 'VersionTranscodeStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vod"]) -> 'VideoVod': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["width"]) -> MetaOapg.properties.width: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description_rich"]) -> typing.Union[MetaOapg.properties.description_rich, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disabled_properties"]) -> typing.Union['DisabledVideoProperties', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit_session"]) -> typing.Union['EditingSession', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_free"]) -> typing.Union[MetaOapg.properties.is_free, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_user_action_event_date"]) -> typing.Union[MetaOapg.properties.last_user_action_event_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["manage_link"]) -> typing.Union[MetaOapg.properties.manage_link, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_folder"]) -> typing.Union['Project', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["play"]) -> typing.Union['Play', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["tags", "description", "allowed_privacies", "app", "can_move_to_project", "categories", "content_rating", "content_rating_class", "context", "created_time", "custom_url", "description_html", "download", "duration", "embed", "files", "has_audio", "has_audio_tracks", "has_chapters", "has_interactive", "has_text_tracks", "height", "is_copyright_restricted", "is_playable", "language", "license", "link", "metadata", "modified_time", "name", "origin_variable_frame_resolution", "pictures", "player_embed_url", "privacy", "rating_mod_locked", "release_time", "resource_key", "show_review_page", "show_svv_footer_banner", "show_svv_timecoded_comments", "spatial", "stats", "status", "transcode", "transcript", "type", "upload", "uploader", "uri", "user", "version_transcode_status", "vod", "width", "description_rich", "disabled_properties", "edit_session", "is_free", "last_user_action_event_date", "manage_link", "parent_folder", "password", "play", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        metadata: 'VideoMetadata',
        upload: 'VideoUpload',
        language: typing.Union[MetaOapg.properties.language, None, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        content_rating_class: typing.Union[MetaOapg.properties.content_rating_class, str, ],
        download: typing.Union[MetaOapg.properties.download, list, tuple, ],
        stats: 'VideoStats',
        rating_mod_locked: typing.Union[MetaOapg.properties.rating_mod_locked, bool, ],
        context: 'VideoContext',
        show_svv_footer_banner: typing.Union[MetaOapg.properties.show_svv_footer_banner, None, bool, ],
        embed: 'EmbedSettings',
        spatial: 'VideoSpatial',
        custom_url: typing.Union[MetaOapg.properties.custom_url, None, str, ],
        height: typing.Union[MetaOapg.properties.height, decimal.Decimal, int, float, ],
        app: 'ApiApp',
        has_audio_tracks: typing.Union[MetaOapg.properties.has_audio_tracks, bool, ],
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        transcode: 'VideoTranscode',
        tags: typing.Union[MetaOapg.properties.tags, list, tuple, ],
        license: typing.Union[MetaOapg.properties.license, str, ],
        is_playable: typing.Union[MetaOapg.properties.is_playable, bool, ],
        resource_key: typing.Union[MetaOapg.properties.resource_key, str, ],
        has_text_tracks: typing.Union[MetaOapg.properties.has_text_tracks, bool, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        files: typing.Union[MetaOapg.properties.files, list, tuple, ],
        player_embed_url: typing.Union[MetaOapg.properties.player_embed_url, str, ],
        description_html: typing.Union[MetaOapg.properties.description_html, None, str, ],
        status: typing.Union[MetaOapg.properties.status, None, str, ],
        has_audio: typing.Union[MetaOapg.properties.has_audio, bool, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        description: typing.Union[MetaOapg.properties.description, None, str, ],
        privacy: 'VideoPrivacy',
        vod: 'VideoVod',
        pictures: 'Picture',
        duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, float, ],
        modified_time: typing.Union[MetaOapg.properties.modified_time, str, ],
        transcript: 'VideoTranscript',
        uploader: 'VideoUploader',
        can_move_to_project: typing.Union[MetaOapg.properties.can_move_to_project, None, bool, ],
        content_rating: 'VideoContentRating',
        categories: typing.Union[MetaOapg.properties.categories, list, tuple, ],
        release_time: typing.Union[MetaOapg.properties.release_time, str, ],
        show_review_page: typing.Union[MetaOapg.properties.show_review_page, None, bool, ],
        has_interactive: typing.Union[MetaOapg.properties.has_interactive, bool, ],
        origin_variable_frame_resolution: typing.Union[MetaOapg.properties.origin_variable_frame_resolution, bool, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        allowed_privacies: 'VideoAllowedPrivacies',
        has_chapters: typing.Union[MetaOapg.properties.has_chapters, bool, ],
        version_transcode_status: 'VersionTranscodeStatus',
        show_svv_timecoded_comments: typing.Union[MetaOapg.properties.show_svv_timecoded_comments, None, bool, ],
        width: typing.Union[MetaOapg.properties.width, decimal.Decimal, int, float, ],
        is_copyright_restricted: typing.Union[MetaOapg.properties.is_copyright_restricted, bool, ],
        user: 'User',
        description_rich: typing.Union[MetaOapg.properties.description_rich, str, schemas.Unset] = schemas.unset,
        disabled_properties: typing.Union['DisabledVideoProperties', schemas.Unset] = schemas.unset,
        edit_session: typing.Union['EditingSession', schemas.Unset] = schemas.unset,
        is_free: typing.Union[MetaOapg.properties.is_free, bool, schemas.Unset] = schemas.unset,
        last_user_action_event_date: typing.Union[MetaOapg.properties.last_user_action_event_date, None, str, schemas.Unset] = schemas.unset,
        manage_link: typing.Union[MetaOapg.properties.manage_link, str, schemas.Unset] = schemas.unset,
        parent_folder: typing.Union['Project', schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        play: typing.Union['Play', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Video':
        return super().__new__(
            cls,
            *args,
            metadata=metadata,
            upload=upload,
            language=language,
            type=type,
            content_rating_class=content_rating_class,
            download=download,
            stats=stats,
            rating_mod_locked=rating_mod_locked,
            context=context,
            show_svv_footer_banner=show_svv_footer_banner,
            embed=embed,
            spatial=spatial,
            custom_url=custom_url,
            height=height,
            app=app,
            has_audio_tracks=has_audio_tracks,
            created_time=created_time,
            transcode=transcode,
            tags=tags,
            license=license,
            is_playable=is_playable,
            resource_key=resource_key,
            has_text_tracks=has_text_tracks,
            name=name,
            files=files,
            player_embed_url=player_embed_url,
            description_html=description_html,
            status=status,
            has_audio=has_audio,
            link=link,
            description=description,
            privacy=privacy,
            vod=vod,
            pictures=pictures,
            duration=duration,
            modified_time=modified_time,
            transcript=transcript,
            uploader=uploader,
            can_move_to_project=can_move_to_project,
            content_rating=content_rating,
            categories=categories,
            release_time=release_time,
            show_review_page=show_review_page,
            has_interactive=has_interactive,
            origin_variable_frame_resolution=origin_variable_frame_resolution,
            uri=uri,
            allowed_privacies=allowed_privacies,
            has_chapters=has_chapters,
            version_transcode_status=version_transcode_status,
            show_svv_timecoded_comments=show_svv_timecoded_comments,
            width=width,
            is_copyright_restricted=is_copyright_restricted,
            user=user,
            description_rich=description_rich,
            disabled_properties=disabled_properties,
            edit_session=edit_session,
            is_free=is_free,
            last_user_action_event_date=last_user_action_event_date,
            manage_link=manage_link,
            parent_folder=parent_folder,
            password=password,
            play=play,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.api_app import ApiApp
from vimeo_python_sdk.model.category import Category
from vimeo_python_sdk.model.disabled_video_properties import DisabledVideoProperties
from vimeo_python_sdk.model.editing_session import EditingSession
from vimeo_python_sdk.model.embed_settings import EmbedSettings
from vimeo_python_sdk.model.picture import Picture
from vimeo_python_sdk.model.play import Play
from vimeo_python_sdk.model.project import Project
from vimeo_python_sdk.model.tag import Tag
from vimeo_python_sdk.model.user import User
from vimeo_python_sdk.model.version_transcode_status import VersionTranscodeStatus
from vimeo_python_sdk.model.video_allowed_privacies import VideoAllowedPrivacies
from vimeo_python_sdk.model.video_content_rating import VideoContentRating
from vimeo_python_sdk.model.video_context import VideoContext
from vimeo_python_sdk.model.video_file import VideoFile
from vimeo_python_sdk.model.video_metadata import VideoMetadata
from vimeo_python_sdk.model.video_privacy import VideoPrivacy
from vimeo_python_sdk.model.video_spatial import VideoSpatial
from vimeo_python_sdk.model.video_stats import VideoStats
from vimeo_python_sdk.model.video_transcode import VideoTranscode
from vimeo_python_sdk.model.video_transcript import VideoTranscript
from vimeo_python_sdk.model.video_upload import VideoUpload
from vimeo_python_sdk.model.video_uploader import VideoUploader
from vimeo_python_sdk.model.video_vod import VideoVod
