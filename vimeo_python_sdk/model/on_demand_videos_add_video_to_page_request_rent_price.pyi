# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class OnDemandVideosAddVideoToPageRequestRentPrice(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            AUD = schemas.NumberSchema
            CAD = schemas.NumberSchema
            CHF = schemas.NumberSchema
            DKK = schemas.NumberSchema
            EUR = schemas.NumberSchema
            GBP = schemas.NumberSchema
            JPY = schemas.NumberSchema
            KRW = schemas.NumberSchema
            NOK = schemas.NumberSchema
            PLN = schemas.NumberSchema
            SEK = schemas.NumberSchema
            USD = schemas.NumberSchema
            __annotations__ = {
                "AUD": AUD,
                "CAD": CAD,
                "CHF": CHF,
                "DKK": DKK,
                "EUR": EUR,
                "GBP": GBP,
                "JPY": JPY,
                "KRW": KRW,
                "NOK": NOK,
                "PLN": PLN,
                "SEK": SEK,
                "USD": USD,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AUD"]) -> MetaOapg.properties.AUD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CAD"]) -> MetaOapg.properties.CAD: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["CHF"]) -> MetaOapg.properties.CHF: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["DKK"]) -> MetaOapg.properties.DKK: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EUR"]) -> MetaOapg.properties.EUR: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["GBP"]) -> MetaOapg.properties.GBP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["JPY"]) -> MetaOapg.properties.JPY: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["KRW"]) -> MetaOapg.properties.KRW: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NOK"]) -> MetaOapg.properties.NOK: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PLN"]) -> MetaOapg.properties.PLN: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SEK"]) -> MetaOapg.properties.SEK: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["USD"]) -> MetaOapg.properties.USD: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["AUD", "CAD", "CHF", "DKK", "EUR", "GBP", "JPY", "KRW", "NOK", "PLN", "SEK", "USD", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AUD"]) -> typing.Union[MetaOapg.properties.AUD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CAD"]) -> typing.Union[MetaOapg.properties.CAD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["CHF"]) -> typing.Union[MetaOapg.properties.CHF, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["DKK"]) -> typing.Union[MetaOapg.properties.DKK, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EUR"]) -> typing.Union[MetaOapg.properties.EUR, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["GBP"]) -> typing.Union[MetaOapg.properties.GBP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["JPY"]) -> typing.Union[MetaOapg.properties.JPY, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["KRW"]) -> typing.Union[MetaOapg.properties.KRW, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NOK"]) -> typing.Union[MetaOapg.properties.NOK, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PLN"]) -> typing.Union[MetaOapg.properties.PLN, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SEK"]) -> typing.Union[MetaOapg.properties.SEK, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["USD"]) -> typing.Union[MetaOapg.properties.USD, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["AUD", "CAD", "CHF", "DKK", "EUR", "GBP", "JPY", "KRW", "NOK", "PLN", "SEK", "USD", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        AUD: typing.Union[MetaOapg.properties.AUD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        CAD: typing.Union[MetaOapg.properties.CAD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        CHF: typing.Union[MetaOapg.properties.CHF, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        DKK: typing.Union[MetaOapg.properties.DKK, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        EUR: typing.Union[MetaOapg.properties.EUR, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        GBP: typing.Union[MetaOapg.properties.GBP, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        JPY: typing.Union[MetaOapg.properties.JPY, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        KRW: typing.Union[MetaOapg.properties.KRW, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        NOK: typing.Union[MetaOapg.properties.NOK, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        PLN: typing.Union[MetaOapg.properties.PLN, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        SEK: typing.Union[MetaOapg.properties.SEK, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        USD: typing.Union[MetaOapg.properties.USD, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnDemandVideosAddVideoToPageRequestRentPrice':
        return super().__new__(
            cls,
            *args,
            AUD=AUD,
            CAD=CAD,
            CHF=CHF,
            DKK=DKK,
            EUR=EUR,
            GBP=GBP,
            JPY=JPY,
            KRW=KRW,
            NOK=NOK,
            PLN=PLN,
            SEK=SEK,
            USD=USD,
            _configuration=_configuration,
            **kwargs,
        )
