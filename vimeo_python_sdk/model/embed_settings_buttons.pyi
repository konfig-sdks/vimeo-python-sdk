# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class EmbedSettingsButtons(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A collection of information about the buttons that appear on the interface of the embeddable player.
    """


    class MetaOapg:
        required = {
            "scaling",
            "reaction",
            "fullscreen",
            "like",
            "watchlater",
            "share",
            "embed",
            "hd",
        }
        
        class properties:
            embed = schemas.BoolSchema
            fullscreen = schemas.BoolSchema
            hd = schemas.BoolSchema
            like = schemas.BoolSchema
            
            
            class reaction(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reaction':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            scaling = schemas.BoolSchema
            share = schemas.BoolSchema
            watchlater = schemas.BoolSchema
            __annotations__ = {
                "embed": embed,
                "fullscreen": fullscreen,
                "hd": hd,
                "like": like,
                "reaction": reaction,
                "scaling": scaling,
                "share": share,
                "watchlater": watchlater,
            }
    
    scaling: MetaOapg.properties.scaling
    reaction: MetaOapg.properties.reaction
    fullscreen: MetaOapg.properties.fullscreen
    like: MetaOapg.properties.like
    watchlater: MetaOapg.properties.watchlater
    share: MetaOapg.properties.share
    embed: MetaOapg.properties.embed
    hd: MetaOapg.properties.hd
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embed"]) -> MetaOapg.properties.embed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullscreen"]) -> MetaOapg.properties.fullscreen: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hd"]) -> MetaOapg.properties.hd: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["like"]) -> MetaOapg.properties.like: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reaction"]) -> MetaOapg.properties.reaction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scaling"]) -> MetaOapg.properties.scaling: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["share"]) -> MetaOapg.properties.share: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watchlater"]) -> MetaOapg.properties.watchlater: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["embed", "fullscreen", "hd", "like", "reaction", "scaling", "share", "watchlater", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embed"]) -> MetaOapg.properties.embed: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullscreen"]) -> MetaOapg.properties.fullscreen: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hd"]) -> MetaOapg.properties.hd: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["like"]) -> MetaOapg.properties.like: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reaction"]) -> MetaOapg.properties.reaction: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scaling"]) -> MetaOapg.properties.scaling: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["share"]) -> MetaOapg.properties.share: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watchlater"]) -> MetaOapg.properties.watchlater: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["embed", "fullscreen", "hd", "like", "reaction", "scaling", "share", "watchlater", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        scaling: typing.Union[MetaOapg.properties.scaling, bool, ],
        reaction: typing.Union[MetaOapg.properties.reaction, None, bool, ],
        fullscreen: typing.Union[MetaOapg.properties.fullscreen, bool, ],
        like: typing.Union[MetaOapg.properties.like, bool, ],
        watchlater: typing.Union[MetaOapg.properties.watchlater, bool, ],
        share: typing.Union[MetaOapg.properties.share, bool, ],
        embed: typing.Union[MetaOapg.properties.embed, bool, ],
        hd: typing.Union[MetaOapg.properties.hd, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EmbedSettingsButtons':
        return super().__new__(
            cls,
            *args,
            scaling=scaling,
            reaction=reaction,
            fullscreen=fullscreen,
            like=like,
            watchlater=watchlater,
            share=share,
            embed=embed,
            hd=hd,
            _configuration=_configuration,
            **kwargs,
        )
