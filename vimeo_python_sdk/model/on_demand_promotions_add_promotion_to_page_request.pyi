# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class OnDemandPromotionsAddPromotionToPageRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "download",
            "total",
            "type",
            "stream_period",
        }
        
        class properties:
            download = schemas.BoolSchema
            
            
            class stream_period(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def _1_WEEK(cls):
                    return cls("1_week")
                
                @schemas.classproperty
                def _1_YEAR(cls):
                    return cls("1_year")
                
                @schemas.classproperty
                def _24_HOUR(cls):
                    return cls("24_hour")
                
                @schemas.classproperty
                def _30_DAY(cls):
                    return cls("30_day")
                
                @schemas.classproperty
                def _3_MONTH(cls):
                    return cls("3_month")
                
                @schemas.classproperty
                def _48_HOUR(cls):
                    return cls("48_hour")
                
                @schemas.classproperty
                def _6_MONTH(cls):
                    return cls("6_month")
                
                @schemas.classproperty
                def _72_HOUR(cls):
                    return cls("72_hour")
            total = schemas.NumberSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def BATCH(cls):
                    return cls("batch")
                
                @schemas.classproperty
                def SINGLE(cls):
                    return cls("single")
            
            
            class access_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def DEFAULT(cls):
                    return cls("default")
                
                @schemas.classproperty
                def VIP(cls):
                    return cls("vip")
            code = schemas.StrSchema
            
            
            class discount_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def FREE(cls):
                    return cls("free")
                
                @schemas.classproperty
                def PERCENT(cls):
                    return cls("percent")
            end_time = schemas.StrSchema
            label = schemas.StrSchema
            percent_off = schemas.NumberSchema
            
            
            class product_type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ANY(cls):
                    return cls("any")
                
                @schemas.classproperty
                def BUY(cls):
                    return cls("buy")
                
                @schemas.classproperty
                def BUY_EPISODE(cls):
                    return cls("buy_episode")
                
                @schemas.classproperty
                def RENT(cls):
                    return cls("rent")
                
                @schemas.classproperty
                def RENT_EPISODE(cls):
                    return cls("rent_episode")
                
                @schemas.classproperty
                def SUBSCRIBE(cls):
                    return cls("subscribe")
            start_time = schemas.StrSchema
            __annotations__ = {
                "download": download,
                "stream_period": stream_period,
                "total": total,
                "type": type,
                "access_type": access_type,
                "code": code,
                "discount_type": discount_type,
                "end_time": end_time,
                "label": label,
                "percent_off": percent_off,
                "product_type": product_type,
                "start_time": start_time,
            }
    
    download: MetaOapg.properties.download
    total: MetaOapg.properties.total
    type: MetaOapg.properties.type
    stream_period: MetaOapg.properties.stream_period
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download"]) -> MetaOapg.properties.download: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_period"]) -> MetaOapg.properties.stream_period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["access_type"]) -> MetaOapg.properties.access_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discount_type"]) -> MetaOapg.properties.discount_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["label"]) -> MetaOapg.properties.label: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["percent_off"]) -> MetaOapg.properties.percent_off: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["product_type"]) -> MetaOapg.properties.product_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["download", "stream_period", "total", "type", "access_type", "code", "discount_type", "end_time", "label", "percent_off", "product_type", "start_time", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download"]) -> MetaOapg.properties.download: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_period"]) -> MetaOapg.properties.stream_period: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["access_type"]) -> typing.Union[MetaOapg.properties.access_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> typing.Union[MetaOapg.properties.code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discount_type"]) -> typing.Union[MetaOapg.properties.discount_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> typing.Union[MetaOapg.properties.end_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["label"]) -> typing.Union[MetaOapg.properties.label, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["percent_off"]) -> typing.Union[MetaOapg.properties.percent_off, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["product_type"]) -> typing.Union[MetaOapg.properties.product_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> typing.Union[MetaOapg.properties.start_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["download", "stream_period", "total", "type", "access_type", "code", "discount_type", "end_time", "label", "percent_off", "product_type", "start_time", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        download: typing.Union[MetaOapg.properties.download, bool, ],
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, float, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        stream_period: typing.Union[MetaOapg.properties.stream_period, str, ],
        access_type: typing.Union[MetaOapg.properties.access_type, str, schemas.Unset] = schemas.unset,
        code: typing.Union[MetaOapg.properties.code, str, schemas.Unset] = schemas.unset,
        discount_type: typing.Union[MetaOapg.properties.discount_type, str, schemas.Unset] = schemas.unset,
        end_time: typing.Union[MetaOapg.properties.end_time, str, schemas.Unset] = schemas.unset,
        label: typing.Union[MetaOapg.properties.label, str, schemas.Unset] = schemas.unset,
        percent_off: typing.Union[MetaOapg.properties.percent_off, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        product_type: typing.Union[MetaOapg.properties.product_type, str, schemas.Unset] = schemas.unset,
        start_time: typing.Union[MetaOapg.properties.start_time, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnDemandPromotionsAddPromotionToPageRequest':
        return super().__new__(
            cls,
            *args,
            download=download,
            total=total,
            type=type,
            stream_period=stream_period,
            access_type=access_type,
            code=code,
            discount_type=discount_type,
            end_time=end_time,
            label=label,
            percent_off=percent_off,
            product_type=product_type,
            start_time=start_time,
            _configuration=_configuration,
            **kwargs,
        )
