# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class LiveEventRecurringMetadataConnections(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A collection of information that is connected to this resource.
    """


    class MetaOapg:
        required = {
            "live_video",
            "team_member",
            "videos",
            "pre_live_video",
            "pictures",
        }
        
        class properties:
        
            @staticmethod
            def live_video() -> typing.Type['LiveEventRecurringMetadataConnectionsLiveVideo']:
                return LiveEventRecurringMetadataConnectionsLiveVideo
        
            @staticmethod
            def pictures() -> typing.Type['LiveEventRecurringMetadataConnectionsPictures']:
                return LiveEventRecurringMetadataConnectionsPictures
        
            @staticmethod
            def pre_live_video() -> typing.Type['LiveEventRecurringMetadataConnectionsPreLiveVideo']:
                return LiveEventRecurringMetadataConnectionsPreLiveVideo
        
            @staticmethod
            def team_member() -> typing.Type['LiveEventRecurringMetadataConnectionsTeamMember']:
                return LiveEventRecurringMetadataConnectionsTeamMember
        
            @staticmethod
            def videos() -> typing.Type['LiveEventRecurringMetadataConnectionsVideos']:
                return LiveEventRecurringMetadataConnectionsVideos
            __annotations__ = {
                "live_video": live_video,
                "pictures": pictures,
                "pre_live_video": pre_live_video,
                "team_member": team_member,
                "videos": videos,
            }
    
    live_video: 'LiveEventRecurringMetadataConnectionsLiveVideo'
    team_member: 'LiveEventRecurringMetadataConnectionsTeamMember'
    videos: 'LiveEventRecurringMetadataConnectionsVideos'
    pre_live_video: 'LiveEventRecurringMetadataConnectionsPreLiveVideo'
    pictures: 'LiveEventRecurringMetadataConnectionsPictures'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live_video"]) -> 'LiveEventRecurringMetadataConnectionsLiveVideo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'LiveEventRecurringMetadataConnectionsPictures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pre_live_video"]) -> 'LiveEventRecurringMetadataConnectionsPreLiveVideo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_member"]) -> 'LiveEventRecurringMetadataConnectionsTeamMember': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videos"]) -> 'LiveEventRecurringMetadataConnectionsVideos': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["live_video", "pictures", "pre_live_video", "team_member", "videos", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live_video"]) -> 'LiveEventRecurringMetadataConnectionsLiveVideo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'LiveEventRecurringMetadataConnectionsPictures': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pre_live_video"]) -> 'LiveEventRecurringMetadataConnectionsPreLiveVideo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_member"]) -> 'LiveEventRecurringMetadataConnectionsTeamMember': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videos"]) -> 'LiveEventRecurringMetadataConnectionsVideos': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["live_video", "pictures", "pre_live_video", "team_member", "videos", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        live_video: 'LiveEventRecurringMetadataConnectionsLiveVideo',
        team_member: 'LiveEventRecurringMetadataConnectionsTeamMember',
        videos: 'LiveEventRecurringMetadataConnectionsVideos',
        pre_live_video: 'LiveEventRecurringMetadataConnectionsPreLiveVideo',
        pictures: 'LiveEventRecurringMetadataConnectionsPictures',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LiveEventRecurringMetadataConnections':
        return super().__new__(
            cls,
            *args,
            live_video=live_video,
            team_member=team_member,
            videos=videos,
            pre_live_video=pre_live_video,
            pictures=pictures,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.live_event_recurring_metadata_connections_live_video import LiveEventRecurringMetadataConnectionsLiveVideo
from vimeo_python_sdk.model.live_event_recurring_metadata_connections_pictures import LiveEventRecurringMetadataConnectionsPictures
from vimeo_python_sdk.model.live_event_recurring_metadata_connections_pre_live_video import LiveEventRecurringMetadataConnectionsPreLiveVideo
from vimeo_python_sdk.model.live_event_recurring_metadata_connections_team_member import LiveEventRecurringMetadataConnectionsTeamMember
from vimeo_python_sdk.model.live_event_recurring_metadata_connections_videos import LiveEventRecurringMetadataConnectionsVideos
