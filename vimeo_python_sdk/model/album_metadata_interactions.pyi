# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class AlbumMetadataInteractions(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A list of resource URIs related to the showcase.
    """


    class MetaOapg:
        required = {
            "add_custom_thumbnails",
            "add_videos",
            "add_live_events",
            "add_logos",
            "add_to",
        }
        
        class properties:
        
            @staticmethod
            def add_custom_thumbnails() -> typing.Type['AlbumMetadataInteractionsAddCustomThumbnails']:
                return AlbumMetadataInteractionsAddCustomThumbnails
        
            @staticmethod
            def add_live_events() -> typing.Type['AlbumMetadataInteractionsAddLiveEvents']:
                return AlbumMetadataInteractionsAddLiveEvents
        
            @staticmethod
            def add_logos() -> typing.Type['AlbumMetadataInteractionsAddLogos']:
                return AlbumMetadataInteractionsAddLogos
        
            @staticmethod
            def add_to() -> typing.Type['AlbumMetadataInteractionsAddTo']:
                return AlbumMetadataInteractionsAddTo
        
            @staticmethod
            def add_videos() -> typing.Type['AlbumMetadataInteractionsAddVideos']:
                return AlbumMetadataInteractionsAddVideos
            __annotations__ = {
                "add_custom_thumbnails": add_custom_thumbnails,
                "add_live_events": add_live_events,
                "add_logos": add_logos,
                "add_to": add_to,
                "add_videos": add_videos,
            }

    
    add_custom_thumbnails: 'AlbumMetadataInteractionsAddCustomThumbnails'
    add_videos: 'AlbumMetadataInteractionsAddVideos'
    add_live_events: 'AlbumMetadataInteractionsAddLiveEvents'
    add_logos: 'AlbumMetadataInteractionsAddLogos'
    add_to: 'AlbumMetadataInteractionsAddTo'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_custom_thumbnails"]) -> 'AlbumMetadataInteractionsAddCustomThumbnails': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_live_events"]) -> 'AlbumMetadataInteractionsAddLiveEvents': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_logos"]) -> 'AlbumMetadataInteractionsAddLogos': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_to"]) -> 'AlbumMetadataInteractionsAddTo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_videos"]) -> 'AlbumMetadataInteractionsAddVideos': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["add_custom_thumbnails", "add_live_events", "add_logos", "add_to", "add_videos", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_custom_thumbnails"]) -> 'AlbumMetadataInteractionsAddCustomThumbnails': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_live_events"]) -> 'AlbumMetadataInteractionsAddLiveEvents': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_logos"]) -> 'AlbumMetadataInteractionsAddLogos': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_to"]) -> 'AlbumMetadataInteractionsAddTo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_videos"]) -> 'AlbumMetadataInteractionsAddVideos': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["add_custom_thumbnails", "add_live_events", "add_logos", "add_to", "add_videos", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AlbumMetadataInteractions':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.album_metadata_interactions_add_custom_thumbnails import AlbumMetadataInteractionsAddCustomThumbnails
from vimeo_python_sdk.model.album_metadata_interactions_add_live_events import AlbumMetadataInteractionsAddLiveEvents
from vimeo_python_sdk.model.album_metadata_interactions_add_logos import AlbumMetadataInteractionsAddLogos
from vimeo_python_sdk.model.album_metadata_interactions_add_to import AlbumMetadataInteractionsAddTo
from vimeo_python_sdk.model.album_metadata_interactions_add_videos import AlbumMetadataInteractionsAddVideos
