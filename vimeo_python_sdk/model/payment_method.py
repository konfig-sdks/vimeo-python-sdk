# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class PaymentMethod(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "account_id",
            "updated_at",
            "disabled_at",
            "created_at",
            "id",
            "is_default",
            "type",
        }
        
        class properties:
            account_id = schemas.StrSchema
            created_at = schemas.StrSchema
            disabled_at = schemas.StrSchema
            id = schemas.StrSchema
            is_default = schemas.BoolSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "0": "POSITIVE_0",
                        "1": "POSITIVE_1",
                        "2": "POSITIVE_2",
                        "3": "POSITIVE_3",
                        "4": "POSITIVE_4",
                        "5": "POSITIVE_5",
                    }
                
                @schemas.classproperty
                def POSITIVE_0(cls):
                    return cls("0")
                
                @schemas.classproperty
                def POSITIVE_1(cls):
                    return cls("1")
                
                @schemas.classproperty
                def POSITIVE_2(cls):
                    return cls("2")
                
                @schemas.classproperty
                def POSITIVE_3(cls):
                    return cls("3")
                
                @schemas.classproperty
                def POSITIVE_4(cls):
                    return cls("4")
                
                @schemas.classproperty
                def POSITIVE_5(cls):
                    return cls("5")
            updated_at = schemas.StrSchema
        
            @staticmethod
            def card() -> typing.Type['PaymentMethodCard']:
                return PaymentMethodCard
            __annotations__ = {
                "account_id": account_id,
                "created_at": created_at,
                "disabled_at": disabled_at,
                "id": id,
                "is_default": is_default,
                "type": type,
                "updated_at": updated_at,
                "card": card,
            }
    
    account_id: MetaOapg.properties.account_id
    updated_at: MetaOapg.properties.updated_at
    disabled_at: MetaOapg.properties.disabled_at
    created_at: MetaOapg.properties.created_at
    id: MetaOapg.properties.id
    is_default: MetaOapg.properties.is_default
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["disabled_at"]) -> MetaOapg.properties.disabled_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_default"]) -> MetaOapg.properties.is_default: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["card"]) -> 'PaymentMethodCard': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account_id", "created_at", "disabled_at", "id", "is_default", "type", "updated_at", "card", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account_id"]) -> MetaOapg.properties.account_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["disabled_at"]) -> MetaOapg.properties.disabled_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_default"]) -> MetaOapg.properties.is_default: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["card"]) -> typing.Union['PaymentMethodCard', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account_id", "created_at", "disabled_at", "id", "is_default", "type", "updated_at", "card", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        account_id: typing.Union[MetaOapg.properties.account_id, str, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        disabled_at: typing.Union[MetaOapg.properties.disabled_at, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        is_default: typing.Union[MetaOapg.properties.is_default, bool, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        card: typing.Union['PaymentMethodCard', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PaymentMethod':
        return super().__new__(
            cls,
            *args,
            account_id=account_id,
            updated_at=updated_at,
            disabled_at=disabled_at,
            created_at=created_at,
            id=id,
            is_default=is_default,
            type=type,
            card=card,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.payment_method_card import PaymentMethodCard
