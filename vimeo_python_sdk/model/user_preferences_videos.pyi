# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class UserPreferencesVideos(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "rating",
        }
        
        class properties:
        
            @staticmethod
            def rating() -> typing.Type['UserPreferencesVideosRating']:
                return UserPreferencesVideosRating
            password = schemas.StrSchema
        
            @staticmethod
            def privacy() -> typing.Type['UserPreferencesVideosPrivacy']:
                return UserPreferencesVideosPrivacy
            __annotations__ = {
                "rating": rating,
                "password": password,
                "privacy": privacy,
            }
    
    rating: 'UserPreferencesVideosRating'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rating"]) -> 'UserPreferencesVideosRating': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> 'UserPreferencesVideosPrivacy': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["rating", "password", "privacy", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rating"]) -> 'UserPreferencesVideosRating': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> typing.Union['UserPreferencesVideosPrivacy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["rating", "password", "privacy", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        rating: 'UserPreferencesVideosRating',
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        privacy: typing.Union['UserPreferencesVideosPrivacy', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserPreferencesVideos':
        return super().__new__(
            cls,
            *args,
            rating=rating,
            password=password,
            privacy=privacy,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.user_preferences_videos_privacy import UserPreferencesVideosPrivacy
from vimeo_python_sdk.model.user_preferences_videos_rating import UserPreferencesVideosRating
