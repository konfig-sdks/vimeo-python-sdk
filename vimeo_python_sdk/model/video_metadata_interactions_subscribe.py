# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideoMetadataInteractionsSubscribe(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Subscription information for an On Demand video.
    """


    class MetaOapg:
        
        class properties:
            drm = schemas.BoolSchema
            expires_time = schemas.StrSchema
            purchase_time = schemas.StrSchema
            stream = schemas.StrSchema
            __annotations__ = {
                "drm": drm,
                "expires_time": expires_time,
                "purchase_time": purchase_time,
                "stream": stream,
            }

    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["drm"]) -> MetaOapg.properties.drm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expires_time"]) -> MetaOapg.properties.expires_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["purchase_time"]) -> MetaOapg.properties.purchase_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream"]) -> MetaOapg.properties.stream: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["drm", "expires_time", "purchase_time", "stream", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["drm"]) -> typing.Union[MetaOapg.properties.drm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expires_time"]) -> typing.Union[MetaOapg.properties.expires_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["purchase_time"]) -> typing.Union[MetaOapg.properties.purchase_time, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream"]) -> typing.Union[MetaOapg.properties.stream, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["drm", "expires_time", "purchase_time", "stream", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        drm: typing.Union[MetaOapg.properties.drm, bool, schemas.Unset] = schemas.unset,
        expires_time: typing.Union[MetaOapg.properties.expires_time, str, schemas.Unset] = schemas.unset,
        purchase_time: typing.Union[MetaOapg.properties.purchase_time, str, schemas.Unset] = schemas.unset,
        stream: typing.Union[MetaOapg.properties.stream, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoMetadataInteractionsSubscribe':
        return super().__new__(
            cls,
            *args,
            drm=drm,
            expires_time=expires_time,
            purchase_time=purchase_time,
            stream=stream,
            _configuration=_configuration,
            **kwargs,
        )
