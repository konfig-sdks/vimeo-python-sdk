# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class WebinarEmailProviderListItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "is_active",
            "provider",
            "last_import_time",
            "list",
        }
        
        class properties:
            is_active = schemas.BoolSchema
            
            
            class last_import_time(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'last_import_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def _list() -> typing.Type['WebinarEmailProviderListItemList']:
                return WebinarEmailProviderListItemList
        
            @staticmethod
            def provider() -> typing.Type['WebinarEmailProviderListItemProvider']:
                return WebinarEmailProviderListItemProvider
            __annotations__ = {
                "is_active": is_active,
                "last_import_time": last_import_time,
                "list": _list,
                "provider": provider,
            }
    
    is_active: MetaOapg.properties.is_active
    provider: 'WebinarEmailProviderListItemProvider'
    last_import_time: MetaOapg.properties.last_import_time
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_import_time"]) -> MetaOapg.properties.last_import_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["list"]) -> 'WebinarEmailProviderListItemList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> 'WebinarEmailProviderListItemProvider': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["is_active", "last_import_time", "list", "provider", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_active"]) -> MetaOapg.properties.is_active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_import_time"]) -> MetaOapg.properties.last_import_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["list"]) -> 'WebinarEmailProviderListItemList': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> 'WebinarEmailProviderListItemProvider': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["is_active", "last_import_time", "list", "provider", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        is_active: typing.Union[MetaOapg.properties.is_active, bool, ],
        provider: 'WebinarEmailProviderListItemProvider',
        last_import_time: typing.Union[MetaOapg.properties.last_import_time, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarEmailProviderListItem':
        return super().__new__(
            cls,
            *args,
            is_active=is_active,
            provider=provider,
            last_import_time=last_import_time,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.webinar_email_provider_list_item_list import WebinarEmailProviderListItemList
from vimeo_python_sdk.model.webinar_email_provider_list_item_provider import WebinarEmailProviderListItemProvider
