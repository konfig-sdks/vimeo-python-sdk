# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideoVersion(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "app",
            "created_time",
            "has_interactive",
            "metadata",
            "origin_variable_frame_resolution",
            "upload",
            "transcode",
            "active",
            "filesize",
            "create_storyboard_id",
            "uri",
            "duration",
            "filename",
            "modified_time",
            "download_config",
            "user",
            "can_restore_create",
            "upload_date",
        }
        
        class properties:
            active = schemas.BoolSchema
        
            @staticmethod
            def app() -> typing.Type['ApiApp']:
                return ApiApp
            can_restore_create = schemas.BoolSchema
            create_storyboard_id = schemas.StrSchema
            created_time = schemas.StrSchema
            download_config = schemas.DictSchema
            
            
            class duration(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'duration':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            filename = schemas.StrSchema
            
            
            class filesize(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'filesize':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            has_interactive = schemas.BoolSchema
        
            @staticmethod
            def metadata() -> typing.Type['VideoVersionMetadata']:
                return VideoVersionMetadata
            modified_time = schemas.StrSchema
            origin_variable_frame_resolution = schemas.BoolSchema
        
            @staticmethod
            def transcode() -> typing.Type['VideoVersionTranscode']:
                return VideoVersionTranscode
        
            @staticmethod
            def upload() -> typing.Type['VideoVersionUpload']:
                return VideoVersionUpload
            
            
            class upload_date(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'upload_date':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            uri = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            description = schemas.StrSchema
        
            @staticmethod
            def play() -> typing.Type['Play']:
                return Play
            __annotations__ = {
                "active": active,
                "app": app,
                "can_restore_create": can_restore_create,
                "create_storyboard_id": create_storyboard_id,
                "created_time": created_time,
                "download_config": download_config,
                "duration": duration,
                "filename": filename,
                "filesize": filesize,
                "has_interactive": has_interactive,
                "metadata": metadata,
                "modified_time": modified_time,
                "origin_variable_frame_resolution": origin_variable_frame_resolution,
                "transcode": transcode,
                "upload": upload,
                "upload_date": upload_date,
                "uri": uri,
                "user": user,
                "description": description,
                "play": play,
            }
    
    app: 'ApiApp'
    created_time: MetaOapg.properties.created_time
    has_interactive: MetaOapg.properties.has_interactive
    metadata: 'VideoVersionMetadata'
    origin_variable_frame_resolution: MetaOapg.properties.origin_variable_frame_resolution
    upload: 'VideoVersionUpload'
    transcode: 'VideoVersionTranscode'
    active: MetaOapg.properties.active
    filesize: MetaOapg.properties.filesize
    create_storyboard_id: MetaOapg.properties.create_storyboard_id
    uri: MetaOapg.properties.uri
    duration: MetaOapg.properties.duration
    filename: MetaOapg.properties.filename
    modified_time: MetaOapg.properties.modified_time
    download_config: MetaOapg.properties.download_config
    user: 'User'
    can_restore_create: MetaOapg.properties.can_restore_create
    upload_date: MetaOapg.properties.upload_date
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["app"]) -> 'ApiApp': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_restore_create"]) -> MetaOapg.properties.can_restore_create: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_storyboard_id"]) -> MetaOapg.properties.create_storyboard_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["download_config"]) -> MetaOapg.properties.download_config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["filesize"]) -> MetaOapg.properties.filesize: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_interactive"]) -> MetaOapg.properties.has_interactive: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'VideoVersionMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["origin_variable_frame_resolution"]) -> MetaOapg.properties.origin_variable_frame_resolution: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transcode"]) -> 'VideoVersionTranscode': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload"]) -> 'VideoVersionUpload': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_date"]) -> MetaOapg.properties.upload_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["play"]) -> 'Play': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["active", "app", "can_restore_create", "create_storyboard_id", "created_time", "download_config", "duration", "filename", "filesize", "has_interactive", "metadata", "modified_time", "origin_variable_frame_resolution", "transcode", "upload", "upload_date", "uri", "user", "description", "play", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> MetaOapg.properties.active: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["app"]) -> 'ApiApp': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_restore_create"]) -> MetaOapg.properties.can_restore_create: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_storyboard_id"]) -> MetaOapg.properties.create_storyboard_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["download_config"]) -> MetaOapg.properties.download_config: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filename"]) -> MetaOapg.properties.filename: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["filesize"]) -> MetaOapg.properties.filesize: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_interactive"]) -> MetaOapg.properties.has_interactive: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'VideoVersionMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["origin_variable_frame_resolution"]) -> MetaOapg.properties.origin_variable_frame_resolution: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transcode"]) -> 'VideoVersionTranscode': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload"]) -> 'VideoVersionUpload': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_date"]) -> MetaOapg.properties.upload_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["play"]) -> typing.Union['Play', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["active", "app", "can_restore_create", "create_storyboard_id", "created_time", "download_config", "duration", "filename", "filesize", "has_interactive", "metadata", "modified_time", "origin_variable_frame_resolution", "transcode", "upload", "upload_date", "uri", "user", "description", "play", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        app: 'ApiApp',
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        has_interactive: typing.Union[MetaOapg.properties.has_interactive, bool, ],
        metadata: 'VideoVersionMetadata',
        origin_variable_frame_resolution: typing.Union[MetaOapg.properties.origin_variable_frame_resolution, bool, ],
        upload: 'VideoVersionUpload',
        transcode: 'VideoVersionTranscode',
        active: typing.Union[MetaOapg.properties.active, bool, ],
        filesize: typing.Union[MetaOapg.properties.filesize, None, decimal.Decimal, int, float, ],
        create_storyboard_id: typing.Union[MetaOapg.properties.create_storyboard_id, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        duration: typing.Union[MetaOapg.properties.duration, None, decimal.Decimal, int, float, ],
        filename: typing.Union[MetaOapg.properties.filename, str, ],
        modified_time: typing.Union[MetaOapg.properties.modified_time, str, ],
        download_config: typing.Union[MetaOapg.properties.download_config, dict, frozendict.frozendict, ],
        user: 'User',
        can_restore_create: typing.Union[MetaOapg.properties.can_restore_create, bool, ],
        upload_date: typing.Union[MetaOapg.properties.upload_date, None, str, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        play: typing.Union['Play', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoVersion':
        return super().__new__(
            cls,
            *args,
            app=app,
            created_time=created_time,
            has_interactive=has_interactive,
            metadata=metadata,
            origin_variable_frame_resolution=origin_variable_frame_resolution,
            upload=upload,
            transcode=transcode,
            active=active,
            filesize=filesize,
            create_storyboard_id=create_storyboard_id,
            uri=uri,
            duration=duration,
            filename=filename,
            modified_time=modified_time,
            download_config=download_config,
            user=user,
            can_restore_create=can_restore_create,
            upload_date=upload_date,
            description=description,
            play=play,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.api_app import ApiApp
from vimeo_python_sdk.model.play import Play
from vimeo_python_sdk.model.user import User
from vimeo_python_sdk.model.video_version_metadata import VideoVersionMetadata
from vimeo_python_sdk.model.video_version_transcode import VideoVersionTranscode
from vimeo_python_sdk.model.video_version_upload import VideoVersionUpload
