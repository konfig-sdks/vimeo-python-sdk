# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class TeamMembershipApplicablePermissionPolicies(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about permission policies that can apply to the team member.
    """


    class MetaOapg:
        required = {
            "folder",
            "regional_delivery",
            "video",
        }
        
        class properties:
            
            
            class folder(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PermissionPolicy']:
                        return PermissionPolicy
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PermissionPolicy'], typing.List['PermissionPolicy']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'folder':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PermissionPolicy':
                    return super().__getitem__(i)
            
            
            class regional_delivery(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PermissionPolicy']:
                        return PermissionPolicy
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PermissionPolicy'], typing.List['PermissionPolicy']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'regional_delivery':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PermissionPolicy':
                    return super().__getitem__(i)
            
            
            class video(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PermissionPolicy']:
                        return PermissionPolicy
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['PermissionPolicy'], typing.List['PermissionPolicy']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'video':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PermissionPolicy':
                    return super().__getitem__(i)
            __annotations__ = {
                "folder": folder,
                "regional_delivery": regional_delivery,
                "video": video,
            }
    
    folder: MetaOapg.properties.folder
    regional_delivery: MetaOapg.properties.regional_delivery
    video: MetaOapg.properties.video
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder"]) -> MetaOapg.properties.folder: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regional_delivery"]) -> MetaOapg.properties.regional_delivery: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video"]) -> MetaOapg.properties.video: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["folder", "regional_delivery", "video", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder"]) -> MetaOapg.properties.folder: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regional_delivery"]) -> MetaOapg.properties.regional_delivery: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video"]) -> MetaOapg.properties.video: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["folder", "regional_delivery", "video", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        folder: typing.Union[MetaOapg.properties.folder, list, tuple, ],
        regional_delivery: typing.Union[MetaOapg.properties.regional_delivery, list, tuple, ],
        video: typing.Union[MetaOapg.properties.video, list, tuple, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TeamMembershipApplicablePermissionPolicies':
        return super().__new__(
            cls,
            *args,
            folder=folder,
            regional_delivery=regional_delivery,
            video=video,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.permission_policy import PermissionPolicy
