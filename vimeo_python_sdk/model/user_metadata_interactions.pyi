# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class UserMetadataInteractions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "connected_apps",
            "report",
            "block",
            "follow",
        }
        
        class properties:
        
            @staticmethod
            def block() -> typing.Type['UserMetadataInteractionsBlock']:
                return UserMetadataInteractionsBlock
        
            @staticmethod
            def connected_apps() -> typing.Type['UserMetadataInteractionsConnectedApps']:
                return UserMetadataInteractionsConnectedApps
        
            @staticmethod
            def follow() -> typing.Type['UserMetadataInteractionsFollow']:
                return UserMetadataInteractionsFollow
        
            @staticmethod
            def report() -> typing.Type['UserMetadataInteractionsReport']:
                return UserMetadataInteractionsReport
        
            @staticmethod
            def add_privacy_user() -> typing.Type['UserMetadataInteractionsAddPrivacyUser']:
                return UserMetadataInteractionsAddPrivacyUser
            __annotations__ = {
                "block": block,
                "connected_apps": connected_apps,
                "follow": follow,
                "report": report,
                "add_privacy_user": add_privacy_user,
            }
    
    connected_apps: 'UserMetadataInteractionsConnectedApps'
    report: 'UserMetadataInteractionsReport'
    block: 'UserMetadataInteractionsBlock'
    follow: 'UserMetadataInteractionsFollow'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["block"]) -> 'UserMetadataInteractionsBlock': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["connected_apps"]) -> 'UserMetadataInteractionsConnectedApps': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["follow"]) -> 'UserMetadataInteractionsFollow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["report"]) -> 'UserMetadataInteractionsReport': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_privacy_user"]) -> 'UserMetadataInteractionsAddPrivacyUser': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["block", "connected_apps", "follow", "report", "add_privacy_user", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["block"]) -> 'UserMetadataInteractionsBlock': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["connected_apps"]) -> 'UserMetadataInteractionsConnectedApps': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["follow"]) -> 'UserMetadataInteractionsFollow': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["report"]) -> 'UserMetadataInteractionsReport': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_privacy_user"]) -> typing.Union['UserMetadataInteractionsAddPrivacyUser', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["block", "connected_apps", "follow", "report", "add_privacy_user", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        connected_apps: 'UserMetadataInteractionsConnectedApps',
        report: 'UserMetadataInteractionsReport',
        block: 'UserMetadataInteractionsBlock',
        follow: 'UserMetadataInteractionsFollow',
        add_privacy_user: typing.Union['UserMetadataInteractionsAddPrivacyUser', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'UserMetadataInteractions':
        return super().__new__(
            cls,
            *args,
            connected_apps=connected_apps,
            report=report,
            block=block,
            follow=follow,
            add_privacy_user=add_privacy_user,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.user_metadata_interactions_add_privacy_user import UserMetadataInteractionsAddPrivacyUser
from vimeo_python_sdk.model.user_metadata_interactions_block import UserMetadataInteractionsBlock
from vimeo_python_sdk.model.user_metadata_interactions_connected_apps import UserMetadataInteractionsConnectedApps
from vimeo_python_sdk.model.user_metadata_interactions_follow import UserMetadataInteractionsFollow
from vimeo_python_sdk.model.user_metadata_interactions_report import UserMetadataInteractionsReport
