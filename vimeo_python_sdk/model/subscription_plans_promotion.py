# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class SubscriptionPlansPromotion(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about the plan's promotion.
    """


    class MetaOapg:
        required = {
            "code",
            "price",
            "discount",
            "uri",
        }
        
        class properties:
            code = schemas.StrSchema
            discount = schemas.NumberSchema
        
            @staticmethod
            def price() -> typing.Type['SubscriptionPlansPromotionPrice']:
                return SubscriptionPlansPromotionPrice
        
            @staticmethod
            def uri() -> typing.Type['SubscriptionPlansPromotionUri']:
                return SubscriptionPlansPromotionUri
            __annotations__ = {
                "code": code,
                "discount": discount,
                "price": price,
                "uri": uri,
            }
    
    code: MetaOapg.properties.code
    price: 'SubscriptionPlansPromotionPrice'
    discount: MetaOapg.properties.discount
    uri: 'SubscriptionPlansPromotionUri'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["discount"]) -> MetaOapg.properties.discount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> 'SubscriptionPlansPromotionPrice': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> 'SubscriptionPlansPromotionUri': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["code", "discount", "price", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code"]) -> MetaOapg.properties.code: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["discount"]) -> MetaOapg.properties.discount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> 'SubscriptionPlansPromotionPrice': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> 'SubscriptionPlansPromotionUri': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["code", "discount", "price", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        code: typing.Union[MetaOapg.properties.code, str, ],
        price: 'SubscriptionPlansPromotionPrice',
        discount: typing.Union[MetaOapg.properties.discount, decimal.Decimal, int, float, ],
        uri: 'SubscriptionPlansPromotionUri',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubscriptionPlansPromotion':
        return super().__new__(
            cls,
            *args,
            code=code,
            price=price,
            discount=discount,
            uri=uri,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.subscription_plans_promotion_price import SubscriptionPlansPromotionPrice
from vimeo_python_sdk.model.subscription_plans_promotion_uri import SubscriptionPlansPromotionUri
