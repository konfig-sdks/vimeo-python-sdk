# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class WebinarEvent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "rtmp_link",
            "metadata",
            "allow_share_link",
            "next_occurrence_time",
            "auto_cc_language",
            "interaction_tools_settings",
            "rtmps_link",
            "parent_folder",
            "embed",
            "auto_cc_remaining",
            "webinar",
            "created_time",
            "dvr",
            "head_clip",
            "stream_password",
            "auto_cc_keywords",
            "auto_cc_enabled",
            "lead_uuid",
            "scheduled_playback",
            "status",
            "automatically_title_stream",
            "unlimited_duration",
            "completed_on",
            "stream_description",
            "latency",
            "playlist_sort",
            "link",
            "chat_enabled",
            "title",
            "unlimited_auto_cc",
            "pictures",
            "stream_privacy",
            "content_rating",
            "from_showcase",
            "live_destinations",
            "email_quota",
            "rtmp_preview",
            "streamable_clip",
            "album",
            "preferred_stream_method",
            "time_zone",
            "uri",
            "stream_key",
            "view_link",
            "schedule",
            "allowed_privacies",
            "stream_title",
            "stream_mode",
            "user",
            "live_clips",
            "low_latency",
        }
        
        class properties:
            title = schemas.StrSchema
        
            @staticmethod
            def album() -> typing.Type['WebinarEventAlbum']:
                return WebinarEventAlbum
            allow_share_link = schemas.BoolSchema
        
            @staticmethod
            def allowed_privacies() -> typing.Type['WebinarEventAllowedPrivacies']:
                return WebinarEventAllowedPrivacies
            
            
            class auto_cc_enabled(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auto_cc_enabled':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class auto_cc_keywords(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auto_cc_keywords':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class auto_cc_language(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "de-DE": "DEDE",
                        "en-US": "ENUS",
                        "es-ES": "ESES",
                        "fr-FR": "FRFR",
                        "pt-BR": "PTBR",
                    }
                
                @schemas.classproperty
                def DEDE(cls):
                    return cls("de-DE")
                
                @schemas.classproperty
                def ENUS(cls):
                    return cls("en-US")
                
                @schemas.classproperty
                def ESES(cls):
                    return cls("es-ES")
                
                @schemas.classproperty
                def FRFR(cls):
                    return cls("fr-FR")
                
                @schemas.classproperty
                def PTBR(cls):
                    return cls("pt-BR")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auto_cc_language':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class auto_cc_remaining(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auto_cc_remaining':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            automatically_title_stream = schemas.BoolSchema
            chat_enabled = schemas.BoolSchema
            completed_on = schemas.StrSchema
        
            @staticmethod
            def content_rating() -> typing.Type['WebinarEventContentRating']:
                return WebinarEventContentRating
            created_time = schemas.StrSchema
            dvr = schemas.BoolSchema
        
            @staticmethod
            def email_quota() -> typing.Type['WebinarEventEmailQuota']:
                return WebinarEventEmailQuota
        
            @staticmethod
            def embed() -> typing.Type['WebinarEventEmbed']:
                return WebinarEventEmbed
            from_showcase = schemas.BoolSchema
            
            
            class head_clip(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'head_clip':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def interaction_tools_settings() -> typing.Type['WebinarEventInteractionToolsSettings']:
                return WebinarEventInteractionToolsSettings
            
            
            class latency(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "fail-safe": "FAILSAFE",
                        "low": "LOW",
                        "standard": "STANDARD",
                    }
                
                @schemas.classproperty
                def FAILSAFE(cls):
                    return cls("fail-safe")
                
                @schemas.classproperty
                def LOW(cls):
                    return cls("low")
                
                @schemas.classproperty
                def STANDARD(cls):
                    return cls("standard")
            lead_uuid = schemas.StrSchema
            link = schemas.StrSchema
        
            @staticmethod
            def live_clips() -> typing.Type['WebinarEventLiveClips']:
                return WebinarEventLiveClips
        
            @staticmethod
            def live_destinations() -> typing.Type['WebinarEventLiveDestinations']:
                return WebinarEventLiveDestinations
            low_latency = schemas.BoolSchema
        
            @staticmethod
            def metadata() -> typing.Type['WebinarEventMetadata']:
                return WebinarEventMetadata
            
            
            class next_occurrence_time(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'next_occurrence_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def parent_folder() -> typing.Type['Project']:
                return Project
        
            @staticmethod
            def pictures() -> typing.Type['Picture']:
                return Picture
            
            
            class playlist_sort(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "added_first": "ADDED_FIRST",
                        "added_last": "ADDED_LAST",
                        "alphabetical": "ALPHABETICAL",
                        "arranged": "ARRANGED",
                        "comments": "COMMENTS",
                        "duration": "DURATION",
                        "likes": "LIKES",
                        "newest": "NEWEST",
                        "oldest": "OLDEST",
                        "plays": "PLAYS",
                    }
                
                @schemas.classproperty
                def ADDED_FIRST(cls):
                    return cls("added_first")
                
                @schemas.classproperty
                def ADDED_LAST(cls):
                    return cls("added_last")
                
                @schemas.classproperty
                def ALPHABETICAL(cls):
                    return cls("alphabetical")
                
                @schemas.classproperty
                def ARRANGED(cls):
                    return cls("arranged")
                
                @schemas.classproperty
                def COMMENTS(cls):
                    return cls("comments")
                
                @schemas.classproperty
                def DURATION(cls):
                    return cls("duration")
                
                @schemas.classproperty
                def LIKES(cls):
                    return cls("likes")
                
                @schemas.classproperty
                def NEWEST(cls):
                    return cls("newest")
                
                @schemas.classproperty
                def OLDEST(cls):
                    return cls("oldest")
                
                @schemas.classproperty
                def PLAYS(cls):
                    return cls("plays")
            
            
            class preferred_stream_method(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "browser": "BROWSER",
                        "encoder": "ENCODER",
                    }
                
                @schemas.classproperty
                def BROWSER(cls):
                    return cls("browser")
                
                @schemas.classproperty
                def ENCODER(cls):
                    return cls("encoder")
            
            
            class rtmp_link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rtmp_link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            rtmp_preview = schemas.BoolSchema
            
            
            class rtmps_link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'rtmps_link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def schedule() -> typing.Type['LiveEventSchedule']:
                return LiveEventSchedule
            scheduled_playback = schemas.BoolSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "ended": "ENDED",
                        "started": "STARTED",
                    }
                
                @schemas.classproperty
                def ENDED(cls):
                    return cls("ended")
                
                @schemas.classproperty
                def STARTED(cls):
                    return cls("started")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'status':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stream_description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stream_description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stream_key(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stream_key':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stream_mode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "live": "LIVE",
                        "record": "RECORD",
                        "simulive": "SIMULIVE",
                    }
                
                @schemas.classproperty
                def LIVE(cls):
                    return cls("live")
                
                @schemas.classproperty
                def RECORD(cls):
                    return cls("record")
                
                @schemas.classproperty
                def SIMULIVE(cls):
                    return cls("simulive")
            
            
            class stream_password(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stream_password':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def stream_privacy() -> typing.Type['WebinarEventStreamPrivacy']:
                return WebinarEventStreamPrivacy
            stream_title = schemas.StrSchema
            
            
            class streamable_clip(
                schemas.DictBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneFrozenDictMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[dict, frozendict.frozendict, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'streamable_clip':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            time_zone = schemas.StrSchema
            
            
            class unlimited_auto_cc(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'unlimited_auto_cc':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            unlimited_duration = schemas.BoolSchema
            uri = schemas.StrSchema
        
            @staticmethod
            def user() -> typing.Type['User']:
                return User
            view_link = schemas.StrSchema
        
            @staticmethod
            def webinar() -> typing.Type['WebinarEventWebinar']:
                return WebinarEventWebinar
            from_webinar = schemas.BoolSchema
            __annotations__ = {
                "title": title,
                "album": album,
                "allow_share_link": allow_share_link,
                "allowed_privacies": allowed_privacies,
                "auto_cc_enabled": auto_cc_enabled,
                "auto_cc_keywords": auto_cc_keywords,
                "auto_cc_language": auto_cc_language,
                "auto_cc_remaining": auto_cc_remaining,
                "automatically_title_stream": automatically_title_stream,
                "chat_enabled": chat_enabled,
                "completed_on": completed_on,
                "content_rating": content_rating,
                "created_time": created_time,
                "dvr": dvr,
                "email_quota": email_quota,
                "embed": embed,
                "from_showcase": from_showcase,
                "head_clip": head_clip,
                "interaction_tools_settings": interaction_tools_settings,
                "latency": latency,
                "lead_uuid": lead_uuid,
                "link": link,
                "live_clips": live_clips,
                "live_destinations": live_destinations,
                "low_latency": low_latency,
                "metadata": metadata,
                "next_occurrence_time": next_occurrence_time,
                "parent_folder": parent_folder,
                "pictures": pictures,
                "playlist_sort": playlist_sort,
                "preferred_stream_method": preferred_stream_method,
                "rtmp_link": rtmp_link,
                "rtmp_preview": rtmp_preview,
                "rtmps_link": rtmps_link,
                "schedule": schedule,
                "scheduled_playback": scheduled_playback,
                "status": status,
                "stream_description": stream_description,
                "stream_key": stream_key,
                "stream_mode": stream_mode,
                "stream_password": stream_password,
                "stream_privacy": stream_privacy,
                "stream_title": stream_title,
                "streamable_clip": streamable_clip,
                "time_zone": time_zone,
                "unlimited_auto_cc": unlimited_auto_cc,
                "unlimited_duration": unlimited_duration,
                "uri": uri,
                "user": user,
                "view_link": view_link,
                "webinar": webinar,
                "from_webinar": from_webinar,
            }
    
    rtmp_link: MetaOapg.properties.rtmp_link
    metadata: 'WebinarEventMetadata'
    allow_share_link: MetaOapg.properties.allow_share_link
    next_occurrence_time: MetaOapg.properties.next_occurrence_time
    auto_cc_language: MetaOapg.properties.auto_cc_language
    interaction_tools_settings: 'WebinarEventInteractionToolsSettings'
    rtmps_link: MetaOapg.properties.rtmps_link
    parent_folder: 'Project'
    embed: 'WebinarEventEmbed'
    auto_cc_remaining: MetaOapg.properties.auto_cc_remaining
    webinar: 'WebinarEventWebinar'
    created_time: MetaOapg.properties.created_time
    dvr: MetaOapg.properties.dvr
    head_clip: MetaOapg.properties.head_clip
    stream_password: MetaOapg.properties.stream_password
    auto_cc_keywords: MetaOapg.properties.auto_cc_keywords
    auto_cc_enabled: MetaOapg.properties.auto_cc_enabled
    lead_uuid: MetaOapg.properties.lead_uuid
    scheduled_playback: MetaOapg.properties.scheduled_playback
    status: MetaOapg.properties.status
    automatically_title_stream: MetaOapg.properties.automatically_title_stream
    unlimited_duration: MetaOapg.properties.unlimited_duration
    completed_on: MetaOapg.properties.completed_on
    stream_description: MetaOapg.properties.stream_description
    latency: MetaOapg.properties.latency
    playlist_sort: MetaOapg.properties.playlist_sort
    link: MetaOapg.properties.link
    chat_enabled: MetaOapg.properties.chat_enabled
    title: MetaOapg.properties.title
    unlimited_auto_cc: MetaOapg.properties.unlimited_auto_cc
    pictures: 'Picture'
    stream_privacy: 'WebinarEventStreamPrivacy'
    content_rating: 'WebinarEventContentRating'
    from_showcase: MetaOapg.properties.from_showcase
    live_destinations: 'WebinarEventLiveDestinations'
    email_quota: 'WebinarEventEmailQuota'
    rtmp_preview: MetaOapg.properties.rtmp_preview
    streamable_clip: MetaOapg.properties.streamable_clip
    album: 'WebinarEventAlbum'
    preferred_stream_method: MetaOapg.properties.preferred_stream_method
    time_zone: MetaOapg.properties.time_zone
    uri: MetaOapg.properties.uri
    stream_key: MetaOapg.properties.stream_key
    view_link: MetaOapg.properties.view_link
    schedule: 'LiveEventSchedule'
    allowed_privacies: 'WebinarEventAllowedPrivacies'
    stream_title: MetaOapg.properties.stream_title
    stream_mode: MetaOapg.properties.stream_mode
    user: 'User'
    live_clips: 'WebinarEventLiveClips'
    low_latency: MetaOapg.properties.low_latency
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["album"]) -> 'WebinarEventAlbum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allow_share_link"]) -> MetaOapg.properties.allow_share_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowed_privacies"]) -> 'WebinarEventAllowedPrivacies': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_cc_enabled"]) -> MetaOapg.properties.auto_cc_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_cc_keywords"]) -> MetaOapg.properties.auto_cc_keywords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_cc_language"]) -> MetaOapg.properties.auto_cc_language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_cc_remaining"]) -> MetaOapg.properties.auto_cc_remaining: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["automatically_title_stream"]) -> MetaOapg.properties.automatically_title_stream: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["chat_enabled"]) -> MetaOapg.properties.chat_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["completed_on"]) -> MetaOapg.properties.completed_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_rating"]) -> 'WebinarEventContentRating': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dvr"]) -> MetaOapg.properties.dvr: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_quota"]) -> 'WebinarEventEmailQuota': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embed"]) -> 'WebinarEventEmbed': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from_showcase"]) -> MetaOapg.properties.from_showcase: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["head_clip"]) -> MetaOapg.properties.head_clip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interaction_tools_settings"]) -> 'WebinarEventInteractionToolsSettings': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latency"]) -> MetaOapg.properties.latency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lead_uuid"]) -> MetaOapg.properties.lead_uuid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live_clips"]) -> 'WebinarEventLiveClips': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live_destinations"]) -> 'WebinarEventLiveDestinations': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["low_latency"]) -> MetaOapg.properties.low_latency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'WebinarEventMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["next_occurrence_time"]) -> MetaOapg.properties.next_occurrence_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["parent_folder"]) -> 'Project': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["playlist_sort"]) -> MetaOapg.properties.playlist_sort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferred_stream_method"]) -> MetaOapg.properties.preferred_stream_method: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtmp_link"]) -> MetaOapg.properties.rtmp_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtmp_preview"]) -> MetaOapg.properties.rtmp_preview: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rtmps_link"]) -> MetaOapg.properties.rtmps_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["schedule"]) -> 'LiveEventSchedule': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled_playback"]) -> MetaOapg.properties.scheduled_playback: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_description"]) -> MetaOapg.properties.stream_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_key"]) -> MetaOapg.properties.stream_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_mode"]) -> MetaOapg.properties.stream_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_password"]) -> MetaOapg.properties.stream_password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_privacy"]) -> 'WebinarEventStreamPrivacy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stream_title"]) -> MetaOapg.properties.stream_title: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["streamable_clip"]) -> MetaOapg.properties.streamable_clip: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["time_zone"]) -> MetaOapg.properties.time_zone: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unlimited_auto_cc"]) -> MetaOapg.properties.unlimited_auto_cc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unlimited_duration"]) -> MetaOapg.properties.unlimited_duration: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["view_link"]) -> MetaOapg.properties.view_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["webinar"]) -> 'WebinarEventWebinar': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from_webinar"]) -> MetaOapg.properties.from_webinar: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["title", "album", "allow_share_link", "allowed_privacies", "auto_cc_enabled", "auto_cc_keywords", "auto_cc_language", "auto_cc_remaining", "automatically_title_stream", "chat_enabled", "completed_on", "content_rating", "created_time", "dvr", "email_quota", "embed", "from_showcase", "head_clip", "interaction_tools_settings", "latency", "lead_uuid", "link", "live_clips", "live_destinations", "low_latency", "metadata", "next_occurrence_time", "parent_folder", "pictures", "playlist_sort", "preferred_stream_method", "rtmp_link", "rtmp_preview", "rtmps_link", "schedule", "scheduled_playback", "status", "stream_description", "stream_key", "stream_mode", "stream_password", "stream_privacy", "stream_title", "streamable_clip", "time_zone", "unlimited_auto_cc", "unlimited_duration", "uri", "user", "view_link", "webinar", "from_webinar", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["title"]) -> MetaOapg.properties.title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["album"]) -> 'WebinarEventAlbum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allow_share_link"]) -> MetaOapg.properties.allow_share_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowed_privacies"]) -> 'WebinarEventAllowedPrivacies': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_cc_enabled"]) -> MetaOapg.properties.auto_cc_enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_cc_keywords"]) -> MetaOapg.properties.auto_cc_keywords: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_cc_language"]) -> MetaOapg.properties.auto_cc_language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_cc_remaining"]) -> MetaOapg.properties.auto_cc_remaining: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["automatically_title_stream"]) -> MetaOapg.properties.automatically_title_stream: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["chat_enabled"]) -> MetaOapg.properties.chat_enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["completed_on"]) -> MetaOapg.properties.completed_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_rating"]) -> 'WebinarEventContentRating': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dvr"]) -> MetaOapg.properties.dvr: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_quota"]) -> 'WebinarEventEmailQuota': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embed"]) -> 'WebinarEventEmbed': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from_showcase"]) -> MetaOapg.properties.from_showcase: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["head_clip"]) -> MetaOapg.properties.head_clip: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interaction_tools_settings"]) -> 'WebinarEventInteractionToolsSettings': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latency"]) -> MetaOapg.properties.latency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lead_uuid"]) -> MetaOapg.properties.lead_uuid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live_clips"]) -> 'WebinarEventLiveClips': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live_destinations"]) -> 'WebinarEventLiveDestinations': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["low_latency"]) -> MetaOapg.properties.low_latency: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'WebinarEventMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["next_occurrence_time"]) -> MetaOapg.properties.next_occurrence_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["parent_folder"]) -> 'Project': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["playlist_sort"]) -> MetaOapg.properties.playlist_sort: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferred_stream_method"]) -> MetaOapg.properties.preferred_stream_method: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtmp_link"]) -> MetaOapg.properties.rtmp_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtmp_preview"]) -> MetaOapg.properties.rtmp_preview: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rtmps_link"]) -> MetaOapg.properties.rtmps_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["schedule"]) -> 'LiveEventSchedule': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled_playback"]) -> MetaOapg.properties.scheduled_playback: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_description"]) -> MetaOapg.properties.stream_description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_key"]) -> MetaOapg.properties.stream_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_mode"]) -> MetaOapg.properties.stream_mode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_password"]) -> MetaOapg.properties.stream_password: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_privacy"]) -> 'WebinarEventStreamPrivacy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stream_title"]) -> MetaOapg.properties.stream_title: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["streamable_clip"]) -> MetaOapg.properties.streamable_clip: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["time_zone"]) -> MetaOapg.properties.time_zone: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unlimited_auto_cc"]) -> MetaOapg.properties.unlimited_auto_cc: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unlimited_duration"]) -> MetaOapg.properties.unlimited_duration: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["user"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["view_link"]) -> MetaOapg.properties.view_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["webinar"]) -> 'WebinarEventWebinar': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from_webinar"]) -> typing.Union[MetaOapg.properties.from_webinar, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["title", "album", "allow_share_link", "allowed_privacies", "auto_cc_enabled", "auto_cc_keywords", "auto_cc_language", "auto_cc_remaining", "automatically_title_stream", "chat_enabled", "completed_on", "content_rating", "created_time", "dvr", "email_quota", "embed", "from_showcase", "head_clip", "interaction_tools_settings", "latency", "lead_uuid", "link", "live_clips", "live_destinations", "low_latency", "metadata", "next_occurrence_time", "parent_folder", "pictures", "playlist_sort", "preferred_stream_method", "rtmp_link", "rtmp_preview", "rtmps_link", "schedule", "scheduled_playback", "status", "stream_description", "stream_key", "stream_mode", "stream_password", "stream_privacy", "stream_title", "streamable_clip", "time_zone", "unlimited_auto_cc", "unlimited_duration", "uri", "user", "view_link", "webinar", "from_webinar", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        rtmp_link: typing.Union[MetaOapg.properties.rtmp_link, None, str, ],
        metadata: 'WebinarEventMetadata',
        allow_share_link: typing.Union[MetaOapg.properties.allow_share_link, bool, ],
        next_occurrence_time: typing.Union[MetaOapg.properties.next_occurrence_time, None, str, ],
        auto_cc_language: typing.Union[MetaOapg.properties.auto_cc_language, None, str, ],
        interaction_tools_settings: 'WebinarEventInteractionToolsSettings',
        rtmps_link: typing.Union[MetaOapg.properties.rtmps_link, None, str, ],
        parent_folder: 'Project',
        embed: 'WebinarEventEmbed',
        auto_cc_remaining: typing.Union[MetaOapg.properties.auto_cc_remaining, None, decimal.Decimal, int, float, ],
        webinar: 'WebinarEventWebinar',
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        dvr: typing.Union[MetaOapg.properties.dvr, bool, ],
        head_clip: typing.Union[MetaOapg.properties.head_clip, dict, frozendict.frozendict, None, ],
        stream_password: typing.Union[MetaOapg.properties.stream_password, None, str, ],
        auto_cc_keywords: typing.Union[MetaOapg.properties.auto_cc_keywords, None, str, ],
        auto_cc_enabled: typing.Union[MetaOapg.properties.auto_cc_enabled, None, bool, ],
        lead_uuid: typing.Union[MetaOapg.properties.lead_uuid, str, ],
        scheduled_playback: typing.Union[MetaOapg.properties.scheduled_playback, bool, ],
        status: typing.Union[MetaOapg.properties.status, None, str, ],
        automatically_title_stream: typing.Union[MetaOapg.properties.automatically_title_stream, bool, ],
        unlimited_duration: typing.Union[MetaOapg.properties.unlimited_duration, bool, ],
        completed_on: typing.Union[MetaOapg.properties.completed_on, str, ],
        stream_description: typing.Union[MetaOapg.properties.stream_description, None, str, ],
        latency: typing.Union[MetaOapg.properties.latency, str, ],
        playlist_sort: typing.Union[MetaOapg.properties.playlist_sort, str, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        chat_enabled: typing.Union[MetaOapg.properties.chat_enabled, bool, ],
        title: typing.Union[MetaOapg.properties.title, str, ],
        unlimited_auto_cc: typing.Union[MetaOapg.properties.unlimited_auto_cc, None, bool, ],
        pictures: 'Picture',
        stream_privacy: 'WebinarEventStreamPrivacy',
        content_rating: 'WebinarEventContentRating',
        from_showcase: typing.Union[MetaOapg.properties.from_showcase, bool, ],
        live_destinations: 'WebinarEventLiveDestinations',
        email_quota: 'WebinarEventEmailQuota',
        rtmp_preview: typing.Union[MetaOapg.properties.rtmp_preview, bool, ],
        streamable_clip: typing.Union[MetaOapg.properties.streamable_clip, dict, frozendict.frozendict, None, ],
        album: 'WebinarEventAlbum',
        preferred_stream_method: typing.Union[MetaOapg.properties.preferred_stream_method, str, ],
        time_zone: typing.Union[MetaOapg.properties.time_zone, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        stream_key: typing.Union[MetaOapg.properties.stream_key, None, str, ],
        view_link: typing.Union[MetaOapg.properties.view_link, str, ],
        schedule: 'LiveEventSchedule',
        allowed_privacies: 'WebinarEventAllowedPrivacies',
        stream_title: typing.Union[MetaOapg.properties.stream_title, str, ],
        stream_mode: typing.Union[MetaOapg.properties.stream_mode, str, ],
        user: 'User',
        live_clips: 'WebinarEventLiveClips',
        low_latency: typing.Union[MetaOapg.properties.low_latency, bool, ],
        from_webinar: typing.Union[MetaOapg.properties.from_webinar, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarEvent':
        return super().__new__(
            cls,
            *args,
            rtmp_link=rtmp_link,
            metadata=metadata,
            allow_share_link=allow_share_link,
            next_occurrence_time=next_occurrence_time,
            auto_cc_language=auto_cc_language,
            interaction_tools_settings=interaction_tools_settings,
            rtmps_link=rtmps_link,
            parent_folder=parent_folder,
            embed=embed,
            auto_cc_remaining=auto_cc_remaining,
            webinar=webinar,
            created_time=created_time,
            dvr=dvr,
            head_clip=head_clip,
            stream_password=stream_password,
            auto_cc_keywords=auto_cc_keywords,
            auto_cc_enabled=auto_cc_enabled,
            lead_uuid=lead_uuid,
            scheduled_playback=scheduled_playback,
            status=status,
            automatically_title_stream=automatically_title_stream,
            unlimited_duration=unlimited_duration,
            completed_on=completed_on,
            stream_description=stream_description,
            latency=latency,
            playlist_sort=playlist_sort,
            link=link,
            chat_enabled=chat_enabled,
            title=title,
            unlimited_auto_cc=unlimited_auto_cc,
            pictures=pictures,
            stream_privacy=stream_privacy,
            content_rating=content_rating,
            from_showcase=from_showcase,
            live_destinations=live_destinations,
            email_quota=email_quota,
            rtmp_preview=rtmp_preview,
            streamable_clip=streamable_clip,
            album=album,
            preferred_stream_method=preferred_stream_method,
            time_zone=time_zone,
            uri=uri,
            stream_key=stream_key,
            view_link=view_link,
            schedule=schedule,
            allowed_privacies=allowed_privacies,
            stream_title=stream_title,
            stream_mode=stream_mode,
            user=user,
            live_clips=live_clips,
            low_latency=low_latency,
            from_webinar=from_webinar,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.live_event_schedule import LiveEventSchedule
from vimeo_python_sdk.model.picture import Picture
from vimeo_python_sdk.model.project import Project
from vimeo_python_sdk.model.user import User
from vimeo_python_sdk.model.webinar_event_album import WebinarEventAlbum
from vimeo_python_sdk.model.webinar_event_allowed_privacies import WebinarEventAllowedPrivacies
from vimeo_python_sdk.model.webinar_event_content_rating import WebinarEventContentRating
from vimeo_python_sdk.model.webinar_event_email_quota import WebinarEventEmailQuota
from vimeo_python_sdk.model.webinar_event_embed import WebinarEventEmbed
from vimeo_python_sdk.model.webinar_event_interaction_tools_settings import WebinarEventInteractionToolsSettings
from vimeo_python_sdk.model.webinar_event_live_clips import WebinarEventLiveClips
from vimeo_python_sdk.model.webinar_event_live_destinations import WebinarEventLiveDestinations
from vimeo_python_sdk.model.webinar_event_metadata import WebinarEventMetadata
from vimeo_python_sdk.model.webinar_event_stream_privacy import WebinarEventStreamPrivacy
from vimeo_python_sdk.model.webinar_event_webinar import WebinarEventWebinar
