# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class LiveEventAutomatedClosedCaptions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "auto_cc_language",
            "auto_cc_enabled",
            "event_id",
            "auto_cc_is_unlimited",
            "auto_cc_keywords",
            "auto_cc_remaining",
            "auto_cc_can_be_enabled",
        }
        
        class properties:
            auto_cc_can_be_enabled = schemas.BoolSchema
            auto_cc_enabled = schemas.BoolSchema
            auto_cc_is_unlimited = schemas.BoolSchema
            auto_cc_keywords = schemas.StrSchema
            
            
            class auto_cc_language(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'auto_cc_language':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            auto_cc_remaining = schemas.NumberSchema
            event_id = schemas.NumberSchema
            __annotations__ = {
                "auto_cc_can_be_enabled": auto_cc_can_be_enabled,
                "auto_cc_enabled": auto_cc_enabled,
                "auto_cc_is_unlimited": auto_cc_is_unlimited,
                "auto_cc_keywords": auto_cc_keywords,
                "auto_cc_language": auto_cc_language,
                "auto_cc_remaining": auto_cc_remaining,
                "event_id": event_id,
            }
    
    auto_cc_language: MetaOapg.properties.auto_cc_language
    auto_cc_enabled: MetaOapg.properties.auto_cc_enabled
    event_id: MetaOapg.properties.event_id
    auto_cc_is_unlimited: MetaOapg.properties.auto_cc_is_unlimited
    auto_cc_keywords: MetaOapg.properties.auto_cc_keywords
    auto_cc_remaining: MetaOapg.properties.auto_cc_remaining
    auto_cc_can_be_enabled: MetaOapg.properties.auto_cc_can_be_enabled
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_cc_can_be_enabled"]) -> MetaOapg.properties.auto_cc_can_be_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_cc_enabled"]) -> MetaOapg.properties.auto_cc_enabled: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_cc_is_unlimited"]) -> MetaOapg.properties.auto_cc_is_unlimited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_cc_keywords"]) -> MetaOapg.properties.auto_cc_keywords: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_cc_language"]) -> MetaOapg.properties.auto_cc_language: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["auto_cc_remaining"]) -> MetaOapg.properties.auto_cc_remaining: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["event_id"]) -> MetaOapg.properties.event_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["auto_cc_can_be_enabled", "auto_cc_enabled", "auto_cc_is_unlimited", "auto_cc_keywords", "auto_cc_language", "auto_cc_remaining", "event_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_cc_can_be_enabled"]) -> MetaOapg.properties.auto_cc_can_be_enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_cc_enabled"]) -> MetaOapg.properties.auto_cc_enabled: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_cc_is_unlimited"]) -> MetaOapg.properties.auto_cc_is_unlimited: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_cc_keywords"]) -> MetaOapg.properties.auto_cc_keywords: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_cc_language"]) -> MetaOapg.properties.auto_cc_language: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["auto_cc_remaining"]) -> MetaOapg.properties.auto_cc_remaining: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["event_id"]) -> MetaOapg.properties.event_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["auto_cc_can_be_enabled", "auto_cc_enabled", "auto_cc_is_unlimited", "auto_cc_keywords", "auto_cc_language", "auto_cc_remaining", "event_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        auto_cc_language: typing.Union[MetaOapg.properties.auto_cc_language, None, str, ],
        auto_cc_enabled: typing.Union[MetaOapg.properties.auto_cc_enabled, bool, ],
        event_id: typing.Union[MetaOapg.properties.event_id, decimal.Decimal, int, float, ],
        auto_cc_is_unlimited: typing.Union[MetaOapg.properties.auto_cc_is_unlimited, bool, ],
        auto_cc_keywords: typing.Union[MetaOapg.properties.auto_cc_keywords, str, ],
        auto_cc_remaining: typing.Union[MetaOapg.properties.auto_cc_remaining, decimal.Decimal, int, float, ],
        auto_cc_can_be_enabled: typing.Union[MetaOapg.properties.auto_cc_can_be_enabled, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LiveEventAutomatedClosedCaptions':
        return super().__new__(
            cls,
            *args,
            auto_cc_language=auto_cc_language,
            auto_cc_enabled=auto_cc_enabled,
            event_id=event_id,
            auto_cc_is_unlimited=auto_cc_is_unlimited,
            auto_cc_keywords=auto_cc_keywords,
            auto_cc_remaining=auto_cc_remaining,
            auto_cc_can_be_enabled=auto_cc_can_be_enabled,
            _configuration=_configuration,
            **kwargs,
        )
