# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class User(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created_time",
            "metadata",
            "preferences",
            "capabilities",
            "clients",
            "gender",
            "can_work_remotely",
            "short_bio",
            "available_for_hire",
            "link",
            "bio",
            "upload_quota",
            "uri",
            "is_expert",
            "pictures",
            "skills",
            "has_invalid_email",
            "location_details",
            "resource_key",
            "name",
            "location",
            "websites",
            "account",
        }
        
        class properties:
            
            
            class account(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ADVANCED(cls):
                    return cls("advanced")
                
                @schemas.classproperty
                def BASIC(cls):
                    return cls("basic")
                
                @schemas.classproperty
                def BUSINESS(cls):
                    return cls("business")
                
                @schemas.classproperty
                def ENTERPRISE(cls):
                    return cls("enterprise")
                
                @schemas.classproperty
                def FREE(cls):
                    return cls("free")
                
                @schemas.classproperty
                def LIVE_BUSINESS(cls):
                    return cls("live_business")
                
                @schemas.classproperty
                def LIVE_PREMIUM(cls):
                    return cls("live_premium")
                
                @schemas.classproperty
                def LIVE_PRO(cls):
                    return cls("live_pro")
                
                @schemas.classproperty
                def PLUS(cls):
                    return cls("plus")
                
                @schemas.classproperty
                def PRO(cls):
                    return cls("pro")
                
                @schemas.classproperty
                def PRO_UNLIMITED(cls):
                    return cls("pro_unlimited")
                
                @schemas.classproperty
                def PRODUCER(cls):
                    return cls("producer")
                
                @schemas.classproperty
                def STANDARD(cls):
                    return cls("standard")
                
                @schemas.classproperty
                def STARTER(cls):
                    return cls("starter")
            available_for_hire = schemas.BoolSchema
            
            
            class bio(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'bio':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            can_work_remotely = schemas.BoolSchema
            capabilities = schemas.DictSchema
            clients = schemas.StrSchema
            created_time = schemas.StrSchema
            
            
            class gender(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'gender':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            has_invalid_email = schemas.BoolSchema
            is_expert = schemas.BoolSchema
            link = schemas.StrSchema
            
            
            class location(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'location':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def location_details() -> typing.Type['Location']:
                return Location
        
            @staticmethod
            def metadata() -> typing.Type['UserMetadata']:
                return UserMetadata
            name = schemas.StrSchema
        
            @staticmethod
            def pictures() -> typing.Type['Picture']:
                return Picture
        
            @staticmethod
            def preferences() -> typing.Type['UserPreferences']:
                return UserPreferences
            resource_key = schemas.StrSchema
            
            
            class short_bio(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'short_bio':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class skills(
                schemas.ListBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneTupleMixin
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Skill']:
                        return Skill
            
            
                def __new__(
                    cls,
                    *args: typing.Union[list, tuple, None, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'skills':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def upload_quota() -> typing.Type['UserUploadQuota']:
                return UserUploadQuota
            uri = schemas.StrSchema
        
            @staticmethod
            def websites() -> typing.Type['UserWebsites']:
                return UserWebsites
        
            @staticmethod
            def content_filter() -> typing.Type['UserContentFilter']:
                return UserContentFilter
            __annotations__ = {
                "account": account,
                "available_for_hire": available_for_hire,
                "bio": bio,
                "can_work_remotely": can_work_remotely,
                "capabilities": capabilities,
                "clients": clients,
                "created_time": created_time,
                "gender": gender,
                "has_invalid_email": has_invalid_email,
                "is_expert": is_expert,
                "link": link,
                "location": location,
                "location_details": location_details,
                "metadata": metadata,
                "name": name,
                "pictures": pictures,
                "preferences": preferences,
                "resource_key": resource_key,
                "short_bio": short_bio,
                "skills": skills,
                "upload_quota": upload_quota,
                "uri": uri,
                "websites": websites,
                "content_filter": content_filter,
            }
    
    created_time: MetaOapg.properties.created_time
    metadata: 'UserMetadata'
    preferences: 'UserPreferences'
    capabilities: MetaOapg.properties.capabilities
    clients: MetaOapg.properties.clients
    gender: MetaOapg.properties.gender
    can_work_remotely: MetaOapg.properties.can_work_remotely
    short_bio: MetaOapg.properties.short_bio
    available_for_hire: MetaOapg.properties.available_for_hire
    link: MetaOapg.properties.link
    bio: MetaOapg.properties.bio
    upload_quota: 'UserUploadQuota'
    uri: MetaOapg.properties.uri
    is_expert: MetaOapg.properties.is_expert
    pictures: 'Picture'
    skills: MetaOapg.properties.skills
    has_invalid_email: MetaOapg.properties.has_invalid_email
    location_details: 'Location'
    resource_key: MetaOapg.properties.resource_key
    name: MetaOapg.properties.name
    location: MetaOapg.properties.location
    websites: 'UserWebsites'
    account: MetaOapg.properties.account
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_for_hire"]) -> MetaOapg.properties.available_for_hire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bio"]) -> MetaOapg.properties.bio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_work_remotely"]) -> MetaOapg.properties.can_work_remotely: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capabilities"]) -> MetaOapg.properties.capabilities: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clients"]) -> MetaOapg.properties.clients: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_invalid_email"]) -> MetaOapg.properties.has_invalid_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_expert"]) -> MetaOapg.properties.is_expert: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location_details"]) -> 'Location': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'UserMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["preferences"]) -> 'UserPreferences': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["short_bio"]) -> MetaOapg.properties.short_bio: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skills"]) -> MetaOapg.properties.skills: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upload_quota"]) -> 'UserUploadQuota': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["websites"]) -> 'UserWebsites': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_filter"]) -> 'UserContentFilter': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["account", "available_for_hire", "bio", "can_work_remotely", "capabilities", "clients", "created_time", "gender", "has_invalid_email", "is_expert", "link", "location", "location_details", "metadata", "name", "pictures", "preferences", "resource_key", "short_bio", "skills", "upload_quota", "uri", "websites", "content_filter", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["account"]) -> MetaOapg.properties.account: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_for_hire"]) -> MetaOapg.properties.available_for_hire: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bio"]) -> MetaOapg.properties.bio: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_work_remotely"]) -> MetaOapg.properties.can_work_remotely: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capabilities"]) -> MetaOapg.properties.capabilities: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clients"]) -> MetaOapg.properties.clients: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gender"]) -> MetaOapg.properties.gender: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_invalid_email"]) -> MetaOapg.properties.has_invalid_email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_expert"]) -> MetaOapg.properties.is_expert: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> MetaOapg.properties.location: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location_details"]) -> 'Location': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'UserMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["preferences"]) -> 'UserPreferences': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resource_key"]) -> MetaOapg.properties.resource_key: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["short_bio"]) -> MetaOapg.properties.short_bio: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skills"]) -> MetaOapg.properties.skills: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upload_quota"]) -> 'UserUploadQuota': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["websites"]) -> 'UserWebsites': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_filter"]) -> typing.Union['UserContentFilter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["account", "available_for_hire", "bio", "can_work_remotely", "capabilities", "clients", "created_time", "gender", "has_invalid_email", "is_expert", "link", "location", "location_details", "metadata", "name", "pictures", "preferences", "resource_key", "short_bio", "skills", "upload_quota", "uri", "websites", "content_filter", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        metadata: 'UserMetadata',
        preferences: 'UserPreferences',
        capabilities: typing.Union[MetaOapg.properties.capabilities, dict, frozendict.frozendict, ],
        clients: typing.Union[MetaOapg.properties.clients, str, ],
        gender: typing.Union[MetaOapg.properties.gender, None, str, ],
        can_work_remotely: typing.Union[MetaOapg.properties.can_work_remotely, bool, ],
        short_bio: typing.Union[MetaOapg.properties.short_bio, None, str, ],
        available_for_hire: typing.Union[MetaOapg.properties.available_for_hire, bool, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        bio: typing.Union[MetaOapg.properties.bio, None, str, ],
        upload_quota: 'UserUploadQuota',
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        is_expert: typing.Union[MetaOapg.properties.is_expert, bool, ],
        pictures: 'Picture',
        skills: typing.Union[MetaOapg.properties.skills, list, tuple, None, ],
        has_invalid_email: typing.Union[MetaOapg.properties.has_invalid_email, bool, ],
        location_details: 'Location',
        resource_key: typing.Union[MetaOapg.properties.resource_key, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        location: typing.Union[MetaOapg.properties.location, None, str, ],
        websites: 'UserWebsites',
        account: typing.Union[MetaOapg.properties.account, str, ],
        content_filter: typing.Union['UserContentFilter', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'User':
        return super().__new__(
            cls,
            *args,
            created_time=created_time,
            metadata=metadata,
            preferences=preferences,
            capabilities=capabilities,
            clients=clients,
            gender=gender,
            can_work_remotely=can_work_remotely,
            short_bio=short_bio,
            available_for_hire=available_for_hire,
            link=link,
            bio=bio,
            upload_quota=upload_quota,
            uri=uri,
            is_expert=is_expert,
            pictures=pictures,
            skills=skills,
            has_invalid_email=has_invalid_email,
            location_details=location_details,
            resource_key=resource_key,
            name=name,
            location=location,
            websites=websites,
            account=account,
            content_filter=content_filter,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.location import Location
from vimeo_python_sdk.model.picture import Picture
from vimeo_python_sdk.model.skill import Skill
from vimeo_python_sdk.model.user_content_filter import UserContentFilter
from vimeo_python_sdk.model.user_metadata import UserMetadata
from vimeo_python_sdk.model.user_preferences import UserPreferences
from vimeo_python_sdk.model.user_upload_quota import UserUploadQuota
from vimeo_python_sdk.model.user_websites import UserWebsites
