# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideoMetadataInteractionsCanRequestTeamRoleUpgradeProperties(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    An object of suggested fields to be used for this interaction.
    """


    class MetaOapg:
        required = {
            "upgrade_to_role",
            "folder_uri",
            "status",
        }
        
        class properties:
        
            @staticmethod
            def folder_uri() -> typing.Type['VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesFolderUri']:
                return VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesFolderUri
        
            @staticmethod
            def status() -> typing.Type['VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesStatus']:
                return VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesStatus
        
            @staticmethod
            def upgrade_to_role() -> typing.Type['VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole']:
                return VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole
            __annotations__ = {
                "folder_uri": folder_uri,
                "status": status,
                "upgrade_to_role": upgrade_to_role,
            }
    
    upgrade_to_role: 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole'
    folder_uri: 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesFolderUri'
    status: 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesStatus'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder_uri"]) -> 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesFolderUri': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesStatus': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upgrade_to_role"]) -> 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["folder_uri", "status", "upgrade_to_role", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder_uri"]) -> 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesFolderUri': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesStatus': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upgrade_to_role"]) -> 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["folder_uri", "status", "upgrade_to_role", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        upgrade_to_role: 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole',
        folder_uri: 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesFolderUri',
        status: 'VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesStatus',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoMetadataInteractionsCanRequestTeamRoleUpgradeProperties':
        return super().__new__(
            cls,
            *args,
            upgrade_to_role=upgrade_to_role,
            folder_uri=folder_uri,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.video_metadata_interactions_can_request_team_role_upgrade_properties_folder_uri import VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesFolderUri
from vimeo_python_sdk.model.video_metadata_interactions_can_request_team_role_upgrade_properties_status import VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesStatus
from vimeo_python_sdk.model.video_metadata_interactions_can_request_team_role_upgrade_properties_upgrade_to_role import VideoMetadataInteractionsCanRequestTeamRoleUpgradePropertiesUpgradeToRole
