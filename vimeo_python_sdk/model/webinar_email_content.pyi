# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class WebinarEmailContent(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "use_custom_link",
            "modified_time",
            "subject",
            "use_calender",
            "header",
            "button_link",
            "button_text",
            "body",
            "type",
        }
        
        class properties:
            body = schemas.StrSchema
            button_link = schemas.StrSchema
            button_text = schemas.StrSchema
            header = schemas.StrSchema
            modified_time = schemas.StrSchema
            subject = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def EVENT_REMINDER_24_HRS(cls):
                    return cls("email_event_reminder_24_hrs")
                
                @schemas.classproperty
                def POST_EVENT_THANK_YOU(cls):
                    return cls("email_post_event_thank_you")
                
                @schemas.classproperty
                def REGISTRATION_CONFIRMATION(cls):
                    return cls("email_registration_confirmation")
            use_calender = schemas.BoolSchema
            use_custom_link = schemas.BoolSchema
            __annotations__ = {
                "body": body,
                "button_link": button_link,
                "button_text": button_text,
                "header": header,
                "modified_time": modified_time,
                "subject": subject,
                "type": type,
                "use_calender": use_calender,
                "use_custom_link": use_custom_link,
            }
    
    use_custom_link: MetaOapg.properties.use_custom_link
    modified_time: MetaOapg.properties.modified_time
    subject: MetaOapg.properties.subject
    use_calender: MetaOapg.properties.use_calender
    header: MetaOapg.properties.header
    button_link: MetaOapg.properties.button_link
    button_text: MetaOapg.properties.button_text
    body: MetaOapg.properties.body
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["button_link"]) -> MetaOapg.properties.button_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["button_text"]) -> MetaOapg.properties.button_text: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["header"]) -> MetaOapg.properties.header: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_calender"]) -> MetaOapg.properties.use_calender: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_custom_link"]) -> MetaOapg.properties.use_custom_link: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["body", "button_link", "button_text", "header", "modified_time", "subject", "type", "use_calender", "use_custom_link", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["body"]) -> MetaOapg.properties.body: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["button_link"]) -> MetaOapg.properties.button_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["button_text"]) -> MetaOapg.properties.button_text: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["header"]) -> MetaOapg.properties.header: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subject"]) -> MetaOapg.properties.subject: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_calender"]) -> MetaOapg.properties.use_calender: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_custom_link"]) -> MetaOapg.properties.use_custom_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["body", "button_link", "button_text", "header", "modified_time", "subject", "type", "use_calender", "use_custom_link", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        use_custom_link: typing.Union[MetaOapg.properties.use_custom_link, bool, ],
        modified_time: typing.Union[MetaOapg.properties.modified_time, str, ],
        subject: typing.Union[MetaOapg.properties.subject, str, ],
        use_calender: typing.Union[MetaOapg.properties.use_calender, bool, ],
        header: typing.Union[MetaOapg.properties.header, str, ],
        button_link: typing.Union[MetaOapg.properties.button_link, str, ],
        button_text: typing.Union[MetaOapg.properties.button_text, str, ],
        body: typing.Union[MetaOapg.properties.body, str, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarEmailContent':
        return super().__new__(
            cls,
            *args,
            use_custom_link=use_custom_link,
            modified_time=modified_time,
            subject=subject,
            use_calender=use_calender,
            header=header,
            button_link=button_link,
            button_text=button_text,
            body=body,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )
