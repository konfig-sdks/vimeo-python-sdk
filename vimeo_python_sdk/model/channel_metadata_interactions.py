# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class ChannelMetadataInteractions(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A list of resource URIs related to the channel.
    """


    class MetaOapg:
        required = {
            "add_moderators",
            "moderate_videos",
            "follow",
            "add_to",
        }
        
        class properties:
        
            @staticmethod
            def add_moderators() -> typing.Type['ChannelMetadataInteractionsAddModerators']:
                return ChannelMetadataInteractionsAddModerators
        
            @staticmethod
            def add_to() -> typing.Type['ChannelMetadataInteractionsAddTo']:
                return ChannelMetadataInteractionsAddTo
        
            @staticmethod
            def follow() -> typing.Type['ChannelMetadataInteractionsFollow']:
                return ChannelMetadataInteractionsFollow
        
            @staticmethod
            def moderate_videos() -> typing.Type['ChannelMetadataInteractionsModerateVideos']:
                return ChannelMetadataInteractionsModerateVideos
            __annotations__ = {
                "add_moderators": add_moderators,
                "add_to": add_to,
                "follow": follow,
                "moderate_videos": moderate_videos,
            }

    
    add_moderators: 'ChannelMetadataInteractionsAddModerators'
    moderate_videos: 'ChannelMetadataInteractionsModerateVideos'
    follow: 'ChannelMetadataInteractionsFollow'
    add_to: 'ChannelMetadataInteractionsAddTo'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_moderators"]) -> 'ChannelMetadataInteractionsAddModerators': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["add_to"]) -> 'ChannelMetadataInteractionsAddTo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["follow"]) -> 'ChannelMetadataInteractionsFollow': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["moderate_videos"]) -> 'ChannelMetadataInteractionsModerateVideos': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["add_moderators", "add_to", "follow", "moderate_videos", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_moderators"]) -> 'ChannelMetadataInteractionsAddModerators': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["add_to"]) -> 'ChannelMetadataInteractionsAddTo': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["follow"]) -> 'ChannelMetadataInteractionsFollow': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["moderate_videos"]) -> 'ChannelMetadataInteractionsModerateVideos': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["add_moderators", "add_to", "follow", "moderate_videos", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ChannelMetadataInteractions':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.channel_metadata_interactions_add_moderators import ChannelMetadataInteractionsAddModerators
from vimeo_python_sdk.model.channel_metadata_interactions_add_to import ChannelMetadataInteractionsAddTo
from vimeo_python_sdk.model.channel_metadata_interactions_follow import ChannelMetadataInteractionsFollow
from vimeo_python_sdk.model.channel_metadata_interactions_moderate_videos import ChannelMetadataInteractionsModerateVideos
