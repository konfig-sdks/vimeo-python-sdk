# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class WebinarSchedule(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The description of the time or times that the webinar is expected to be live.
    """


    class MetaOapg:
        required = {
            "start_time",
            "daily_time",
            "weekdays",
            "end_time",
            "scheduled_time",
            "type",
        }
        
        class properties:
            daily_time = schemas.StrSchema
            end_time = schemas.StrSchema
            
            
            class scheduled_time(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scheduled_time':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            start_time = schemas.StrSchema
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def SINGLE(cls):
                    return cls("single")
                
                @schemas.classproperty
                def WEEKLY(cls):
                    return cls("weekly")
        
            @staticmethod
            def weekdays() -> typing.Type['WebinarScheduleWeekdays']:
                return WebinarScheduleWeekdays
            __annotations__ = {
                "daily_time": daily_time,
                "end_time": end_time,
                "scheduled_time": scheduled_time,
                "start_time": start_time,
                "type": type,
                "weekdays": weekdays,
            }

    
    start_time: MetaOapg.properties.start_time
    daily_time: MetaOapg.properties.daily_time
    weekdays: 'WebinarScheduleWeekdays'
    end_time: MetaOapg.properties.end_time
    scheduled_time: MetaOapg.properties.scheduled_time
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["daily_time"]) -> MetaOapg.properties.daily_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scheduled_time"]) -> MetaOapg.properties.scheduled_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["weekdays"]) -> 'WebinarScheduleWeekdays': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["daily_time", "end_time", "scheduled_time", "start_time", "type", "weekdays", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["daily_time"]) -> MetaOapg.properties.daily_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_time"]) -> MetaOapg.properties.end_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scheduled_time"]) -> MetaOapg.properties.scheduled_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_time"]) -> MetaOapg.properties.start_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["weekdays"]) -> 'WebinarScheduleWeekdays': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["daily_time", "end_time", "scheduled_time", "start_time", "type", "weekdays", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, None, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarSchedule':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.webinar_schedule_weekdays import WebinarScheduleWeekdays
