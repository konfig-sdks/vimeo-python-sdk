# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class OttDestination(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "ott_channel_name",
            "ott_channel_subdomain",
            "ott_channel_id",
            "ott_event_id",
            "id",
            "recurring_live_event_id",
        }
        
        class properties:
            id = schemas.StrSchema
            ott_channel_id = schemas.NumberSchema
            ott_channel_name = schemas.StrSchema
            ott_channel_subdomain = schemas.StrSchema
            ott_event_id = schemas.NumberSchema
            recurring_live_event_id = schemas.NumberSchema
            __annotations__ = {
                "id": id,
                "ott_channel_id": ott_channel_id,
                "ott_channel_name": ott_channel_name,
                "ott_channel_subdomain": ott_channel_subdomain,
                "ott_event_id": ott_event_id,
                "recurring_live_event_id": recurring_live_event_id,
            }
    
    ott_channel_name: MetaOapg.properties.ott_channel_name
    ott_channel_subdomain: MetaOapg.properties.ott_channel_subdomain
    ott_channel_id: MetaOapg.properties.ott_channel_id
    ott_event_id: MetaOapg.properties.ott_event_id
    id: MetaOapg.properties.id
    recurring_live_event_id: MetaOapg.properties.recurring_live_event_id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ott_channel_id"]) -> MetaOapg.properties.ott_channel_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ott_channel_name"]) -> MetaOapg.properties.ott_channel_name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ott_channel_subdomain"]) -> MetaOapg.properties.ott_channel_subdomain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ott_event_id"]) -> MetaOapg.properties.ott_event_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["recurring_live_event_id"]) -> MetaOapg.properties.recurring_live_event_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "ott_channel_id", "ott_channel_name", "ott_channel_subdomain", "ott_event_id", "recurring_live_event_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ott_channel_id"]) -> MetaOapg.properties.ott_channel_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ott_channel_name"]) -> MetaOapg.properties.ott_channel_name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ott_channel_subdomain"]) -> MetaOapg.properties.ott_channel_subdomain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ott_event_id"]) -> MetaOapg.properties.ott_event_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["recurring_live_event_id"]) -> MetaOapg.properties.recurring_live_event_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "ott_channel_id", "ott_channel_name", "ott_channel_subdomain", "ott_event_id", "recurring_live_event_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ott_channel_name: typing.Union[MetaOapg.properties.ott_channel_name, str, ],
        ott_channel_subdomain: typing.Union[MetaOapg.properties.ott_channel_subdomain, str, ],
        ott_channel_id: typing.Union[MetaOapg.properties.ott_channel_id, decimal.Decimal, int, float, ],
        ott_event_id: typing.Union[MetaOapg.properties.ott_event_id, decimal.Decimal, int, float, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        recurring_live_event_id: typing.Union[MetaOapg.properties.recurring_live_event_id, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OttDestination':
        return super().__new__(
            cls,
            *args,
            ott_channel_name=ott_channel_name,
            ott_channel_subdomain=ott_channel_subdomain,
            ott_channel_id=ott_channel_id,
            ott_event_id=ott_event_id,
            id=id,
            recurring_live_event_id=recurring_live_event_id,
            _configuration=_configuration,
            **kwargs,
        )
