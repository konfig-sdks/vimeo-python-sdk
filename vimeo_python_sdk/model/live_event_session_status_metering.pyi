# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class LiveEventSessionStatusMetering(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The metering status of the live video.
    """


    class MetaOapg:
        required = {
            "seconds_remaining",
            "seconds_max",
        }
        
        class properties:
            seconds_max = schemas.NumberSchema
            seconds_remaining = schemas.NumberSchema
            __annotations__ = {
                "seconds_max": seconds_max,
                "seconds_remaining": seconds_remaining,
            }
    
    seconds_remaining: MetaOapg.properties.seconds_remaining
    seconds_max: MetaOapg.properties.seconds_max
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seconds_max"]) -> MetaOapg.properties.seconds_max: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seconds_remaining"]) -> MetaOapg.properties.seconds_remaining: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["seconds_max", "seconds_remaining", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seconds_max"]) -> MetaOapg.properties.seconds_max: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seconds_remaining"]) -> MetaOapg.properties.seconds_remaining: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["seconds_max", "seconds_remaining", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        seconds_remaining: typing.Union[MetaOapg.properties.seconds_remaining, decimal.Decimal, int, float, ],
        seconds_max: typing.Union[MetaOapg.properties.seconds_max, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'LiveEventSessionStatusMetering':
        return super().__new__(
            cls,
            *args,
            seconds_remaining=seconds_remaining,
            seconds_max=seconds_max,
            _configuration=_configuration,
            **kwargs,
        )
