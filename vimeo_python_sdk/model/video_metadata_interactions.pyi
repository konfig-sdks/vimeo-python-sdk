# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideoMetadataInteractions(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    A list of resource URIs related to the video.
    """


    class MetaOapg:
        required = {
            "buy",
            "channel",
            "rent",
            "delete",
            "edit_privacy",
            "legal_hold",
            "can_request_team_role_upgrade",
            "ask_ai_viewer",
            "transcript_video_editor",
            "trim",
            "validate",
            "summary",
            "ask_ai",
            "can_update_privacy_to_public",
            "edit",
            "like",
            "album",
            "view_privacy",
            "watchlater",
            "view_team_members",
            "set_content_rating",
            "has_restricted_privacy_options",
            "team_mentions",
            "watched",
            "highlights",
            "report",
            "create_editor",
            "invite",
        }
        
        class properties:
        
            @staticmethod
            def summary() -> typing.Type['VideoMetadataInteractionsSummary']:
                return VideoMetadataInteractionsSummary
        
            @staticmethod
            def album() -> typing.Type['VideoMetadataInteractionsAlbum']:
                return VideoMetadataInteractionsAlbum
        
            @staticmethod
            def ask_ai() -> typing.Type['VideoMetadataInteractionsAskAi']:
                return VideoMetadataInteractionsAskAi
        
            @staticmethod
            def ask_ai_viewer() -> typing.Type['VideoMetadataInteractionsAskAiViewer']:
                return VideoMetadataInteractionsAskAiViewer
        
            @staticmethod
            def buy() -> typing.Type['VideoMetadataInteractionsBuy']:
                return VideoMetadataInteractionsBuy
        
            @staticmethod
            def can_request_team_role_upgrade() -> typing.Type['VideoMetadataInteractionsCanRequestTeamRoleUpgrade']:
                return VideoMetadataInteractionsCanRequestTeamRoleUpgrade
        
            @staticmethod
            def can_update_privacy_to_public() -> typing.Type['VideoMetadataInteractionsCanUpdatePrivacyToPublic']:
                return VideoMetadataInteractionsCanUpdatePrivacyToPublic
        
            @staticmethod
            def channel() -> typing.Type['VideoMetadataInteractionsChannel']:
                return VideoMetadataInteractionsChannel
        
            @staticmethod
            def create_editor() -> typing.Type['VideoMetadataInteractionsCreateEditor']:
                return VideoMetadataInteractionsCreateEditor
        
            @staticmethod
            def delete() -> typing.Type['VideoMetadataInteractionsDelete']:
                return VideoMetadataInteractionsDelete
        
            @staticmethod
            def edit() -> typing.Type['VideoMetadataInteractionsEdit']:
                return VideoMetadataInteractionsEdit
        
            @staticmethod
            def edit_privacy() -> typing.Type['VideoMetadataInteractionsEditPrivacy']:
                return VideoMetadataInteractionsEditPrivacy
        
            @staticmethod
            def has_restricted_privacy_options() -> typing.Type['VideoMetadataInteractionsHasRestrictedPrivacyOptions']:
                return VideoMetadataInteractionsHasRestrictedPrivacyOptions
        
            @staticmethod
            def highlights() -> typing.Type['VideoMetadataInteractionsHighlights']:
                return VideoMetadataInteractionsHighlights
        
            @staticmethod
            def invite() -> typing.Type['VideoMetadataInteractionsInvite']:
                return VideoMetadataInteractionsInvite
        
            @staticmethod
            def legal_hold() -> typing.Type['VideoMetadataInteractionsLegalHold']:
                return VideoMetadataInteractionsLegalHold
        
            @staticmethod
            def like() -> typing.Type['VideoMetadataInteractionsLike']:
                return VideoMetadataInteractionsLike
        
            @staticmethod
            def rent() -> typing.Type['VideoMetadataInteractionsRent']:
                return VideoMetadataInteractionsRent
        
            @staticmethod
            def report() -> typing.Type['VideoMetadataInteractionsReport']:
                return VideoMetadataInteractionsReport
        
            @staticmethod
            def set_content_rating() -> typing.Type['VideoMetadataInteractionsSetContentRating']:
                return VideoMetadataInteractionsSetContentRating
        
            @staticmethod
            def team_mentions() -> typing.Type['VideoMetadataInteractionsTeamMentions']:
                return VideoMetadataInteractionsTeamMentions
        
            @staticmethod
            def transcript_video_editor() -> typing.Type['VideoMetadataInteractionsTranscriptVideoEditor']:
                return VideoMetadataInteractionsTranscriptVideoEditor
        
            @staticmethod
            def trim() -> typing.Type['VideoMetadataInteractionsTrim']:
                return VideoMetadataInteractionsTrim
        
            @staticmethod
            def validate() -> typing.Type['VideoMetadataInteractionsValidate']:
                return VideoMetadataInteractionsValidate
        
            @staticmethod
            def view_privacy() -> typing.Type['VideoMetadataInteractionsViewPrivacy']:
                return VideoMetadataInteractionsViewPrivacy
        
            @staticmethod
            def view_team_members() -> typing.Type['VideoMetadataInteractionsViewTeamMembers']:
                return VideoMetadataInteractionsViewTeamMembers
        
            @staticmethod
            def watched() -> typing.Type['VideoMetadataInteractionsWatched']:
                return VideoMetadataInteractionsWatched
        
            @staticmethod
            def watchlater() -> typing.Type['VideoMetadataInteractionsWatchlater']:
                return VideoMetadataInteractionsWatchlater
        
            @staticmethod
            def subscribe() -> typing.Type['VideoMetadataInteractionsSubscribe']:
                return VideoMetadataInteractionsSubscribe
            __annotations__ = {
                "summary": summary,
                "album": album,
                "ask_ai": ask_ai,
                "ask_ai_viewer": ask_ai_viewer,
                "buy": buy,
                "can_request_team_role_upgrade": can_request_team_role_upgrade,
                "can_update_privacy_to_public": can_update_privacy_to_public,
                "channel": channel,
                "create_editor": create_editor,
                "delete": delete,
                "edit": edit,
                "edit_privacy": edit_privacy,
                "has_restricted_privacy_options": has_restricted_privacy_options,
                "highlights": highlights,
                "invite": invite,
                "legal_hold": legal_hold,
                "like": like,
                "rent": rent,
                "report": report,
                "set_content_rating": set_content_rating,
                "team_mentions": team_mentions,
                "transcript_video_editor": transcript_video_editor,
                "trim": trim,
                "validate": validate,
                "view_privacy": view_privacy,
                "view_team_members": view_team_members,
                "watched": watched,
                "watchlater": watchlater,
                "subscribe": subscribe,
            }
    
    buy: 'VideoMetadataInteractionsBuy'
    channel: 'VideoMetadataInteractionsChannel'
    rent: 'VideoMetadataInteractionsRent'
    delete: 'VideoMetadataInteractionsDelete'
    edit_privacy: 'VideoMetadataInteractionsEditPrivacy'
    legal_hold: 'VideoMetadataInteractionsLegalHold'
    can_request_team_role_upgrade: 'VideoMetadataInteractionsCanRequestTeamRoleUpgrade'
    ask_ai_viewer: 'VideoMetadataInteractionsAskAiViewer'
    transcript_video_editor: 'VideoMetadataInteractionsTranscriptVideoEditor'
    trim: 'VideoMetadataInteractionsTrim'
    validate: 'VideoMetadataInteractionsValidate'
    summary: 'VideoMetadataInteractionsSummary'
    ask_ai: 'VideoMetadataInteractionsAskAi'
    can_update_privacy_to_public: 'VideoMetadataInteractionsCanUpdatePrivacyToPublic'
    edit: 'VideoMetadataInteractionsEdit'
    like: 'VideoMetadataInteractionsLike'
    album: 'VideoMetadataInteractionsAlbum'
    view_privacy: 'VideoMetadataInteractionsViewPrivacy'
    watchlater: 'VideoMetadataInteractionsWatchlater'
    view_team_members: 'VideoMetadataInteractionsViewTeamMembers'
    set_content_rating: 'VideoMetadataInteractionsSetContentRating'
    has_restricted_privacy_options: 'VideoMetadataInteractionsHasRestrictedPrivacyOptions'
    team_mentions: 'VideoMetadataInteractionsTeamMentions'
    watched: 'VideoMetadataInteractionsWatched'
    highlights: 'VideoMetadataInteractionsHighlights'
    report: 'VideoMetadataInteractionsReport'
    create_editor: 'VideoMetadataInteractionsCreateEditor'
    invite: 'VideoMetadataInteractionsInvite'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> 'VideoMetadataInteractionsSummary': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["album"]) -> 'VideoMetadataInteractionsAlbum': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ask_ai"]) -> 'VideoMetadataInteractionsAskAi': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ask_ai_viewer"]) -> 'VideoMetadataInteractionsAskAiViewer': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["buy"]) -> 'VideoMetadataInteractionsBuy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_request_team_role_upgrade"]) -> 'VideoMetadataInteractionsCanRequestTeamRoleUpgrade': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_update_privacy_to_public"]) -> 'VideoMetadataInteractionsCanUpdatePrivacyToPublic': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["channel"]) -> 'VideoMetadataInteractionsChannel': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["create_editor"]) -> 'VideoMetadataInteractionsCreateEditor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["delete"]) -> 'VideoMetadataInteractionsDelete': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit"]) -> 'VideoMetadataInteractionsEdit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["edit_privacy"]) -> 'VideoMetadataInteractionsEditPrivacy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["has_restricted_privacy_options"]) -> 'VideoMetadataInteractionsHasRestrictedPrivacyOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["highlights"]) -> 'VideoMetadataInteractionsHighlights': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invite"]) -> 'VideoMetadataInteractionsInvite': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["legal_hold"]) -> 'VideoMetadataInteractionsLegalHold': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["like"]) -> 'VideoMetadataInteractionsLike': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rent"]) -> 'VideoMetadataInteractionsRent': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["report"]) -> 'VideoMetadataInteractionsReport': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["set_content_rating"]) -> 'VideoMetadataInteractionsSetContentRating': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_mentions"]) -> 'VideoMetadataInteractionsTeamMentions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transcript_video_editor"]) -> 'VideoMetadataInteractionsTranscriptVideoEditor': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trim"]) -> 'VideoMetadataInteractionsTrim': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validate"]) -> 'VideoMetadataInteractionsValidate': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["view_privacy"]) -> 'VideoMetadataInteractionsViewPrivacy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["view_team_members"]) -> 'VideoMetadataInteractionsViewTeamMembers': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watched"]) -> 'VideoMetadataInteractionsWatched': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["watchlater"]) -> 'VideoMetadataInteractionsWatchlater': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subscribe"]) -> 'VideoMetadataInteractionsSubscribe': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["summary", "album", "ask_ai", "ask_ai_viewer", "buy", "can_request_team_role_upgrade", "can_update_privacy_to_public", "channel", "create_editor", "delete", "edit", "edit_privacy", "has_restricted_privacy_options", "highlights", "invite", "legal_hold", "like", "rent", "report", "set_content_rating", "team_mentions", "transcript_video_editor", "trim", "validate", "view_privacy", "view_team_members", "watched", "watchlater", "subscribe", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> 'VideoMetadataInteractionsSummary': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["album"]) -> 'VideoMetadataInteractionsAlbum': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ask_ai"]) -> 'VideoMetadataInteractionsAskAi': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ask_ai_viewer"]) -> 'VideoMetadataInteractionsAskAiViewer': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["buy"]) -> 'VideoMetadataInteractionsBuy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_request_team_role_upgrade"]) -> 'VideoMetadataInteractionsCanRequestTeamRoleUpgrade': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_update_privacy_to_public"]) -> 'VideoMetadataInteractionsCanUpdatePrivacyToPublic': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["channel"]) -> 'VideoMetadataInteractionsChannel': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["create_editor"]) -> 'VideoMetadataInteractionsCreateEditor': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["delete"]) -> 'VideoMetadataInteractionsDelete': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit"]) -> 'VideoMetadataInteractionsEdit': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["edit_privacy"]) -> 'VideoMetadataInteractionsEditPrivacy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["has_restricted_privacy_options"]) -> 'VideoMetadataInteractionsHasRestrictedPrivacyOptions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["highlights"]) -> 'VideoMetadataInteractionsHighlights': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invite"]) -> 'VideoMetadataInteractionsInvite': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["legal_hold"]) -> 'VideoMetadataInteractionsLegalHold': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["like"]) -> 'VideoMetadataInteractionsLike': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rent"]) -> 'VideoMetadataInteractionsRent': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["report"]) -> 'VideoMetadataInteractionsReport': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["set_content_rating"]) -> 'VideoMetadataInteractionsSetContentRating': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_mentions"]) -> 'VideoMetadataInteractionsTeamMentions': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transcript_video_editor"]) -> 'VideoMetadataInteractionsTranscriptVideoEditor': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trim"]) -> 'VideoMetadataInteractionsTrim': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validate"]) -> 'VideoMetadataInteractionsValidate': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["view_privacy"]) -> 'VideoMetadataInteractionsViewPrivacy': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["view_team_members"]) -> 'VideoMetadataInteractionsViewTeamMembers': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watched"]) -> 'VideoMetadataInteractionsWatched': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["watchlater"]) -> 'VideoMetadataInteractionsWatchlater': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subscribe"]) -> typing.Union['VideoMetadataInteractionsSubscribe', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["summary", "album", "ask_ai", "ask_ai_viewer", "buy", "can_request_team_role_upgrade", "can_update_privacy_to_public", "channel", "create_editor", "delete", "edit", "edit_privacy", "has_restricted_privacy_options", "highlights", "invite", "legal_hold", "like", "rent", "report", "set_content_rating", "team_mentions", "transcript_video_editor", "trim", "validate", "view_privacy", "view_team_members", "watched", "watchlater", "subscribe", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        buy: 'VideoMetadataInteractionsBuy',
        channel: 'VideoMetadataInteractionsChannel',
        rent: 'VideoMetadataInteractionsRent',
        delete: 'VideoMetadataInteractionsDelete',
        edit_privacy: 'VideoMetadataInteractionsEditPrivacy',
        legal_hold: 'VideoMetadataInteractionsLegalHold',
        can_request_team_role_upgrade: 'VideoMetadataInteractionsCanRequestTeamRoleUpgrade',
        ask_ai_viewer: 'VideoMetadataInteractionsAskAiViewer',
        transcript_video_editor: 'VideoMetadataInteractionsTranscriptVideoEditor',
        trim: 'VideoMetadataInteractionsTrim',
        validate: 'VideoMetadataInteractionsValidate',
        summary: 'VideoMetadataInteractionsSummary',
        ask_ai: 'VideoMetadataInteractionsAskAi',
        can_update_privacy_to_public: 'VideoMetadataInteractionsCanUpdatePrivacyToPublic',
        edit: 'VideoMetadataInteractionsEdit',
        like: 'VideoMetadataInteractionsLike',
        album: 'VideoMetadataInteractionsAlbum',
        view_privacy: 'VideoMetadataInteractionsViewPrivacy',
        watchlater: 'VideoMetadataInteractionsWatchlater',
        view_team_members: 'VideoMetadataInteractionsViewTeamMembers',
        set_content_rating: 'VideoMetadataInteractionsSetContentRating',
        has_restricted_privacy_options: 'VideoMetadataInteractionsHasRestrictedPrivacyOptions',
        team_mentions: 'VideoMetadataInteractionsTeamMentions',
        watched: 'VideoMetadataInteractionsWatched',
        highlights: 'VideoMetadataInteractionsHighlights',
        report: 'VideoMetadataInteractionsReport',
        create_editor: 'VideoMetadataInteractionsCreateEditor',
        invite: 'VideoMetadataInteractionsInvite',
        subscribe: typing.Union['VideoMetadataInteractionsSubscribe', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoMetadataInteractions':
        return super().__new__(
            cls,
            *args,
            buy=buy,
            channel=channel,
            rent=rent,
            delete=delete,
            edit_privacy=edit_privacy,
            legal_hold=legal_hold,
            can_request_team_role_upgrade=can_request_team_role_upgrade,
            ask_ai_viewer=ask_ai_viewer,
            transcript_video_editor=transcript_video_editor,
            trim=trim,
            validate=validate,
            summary=summary,
            ask_ai=ask_ai,
            can_update_privacy_to_public=can_update_privacy_to_public,
            edit=edit,
            like=like,
            album=album,
            view_privacy=view_privacy,
            watchlater=watchlater,
            view_team_members=view_team_members,
            set_content_rating=set_content_rating,
            has_restricted_privacy_options=has_restricted_privacy_options,
            team_mentions=team_mentions,
            watched=watched,
            highlights=highlights,
            report=report,
            create_editor=create_editor,
            invite=invite,
            subscribe=subscribe,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.video_metadata_interactions_album import VideoMetadataInteractionsAlbum
from vimeo_python_sdk.model.video_metadata_interactions_ask_ai import VideoMetadataInteractionsAskAi
from vimeo_python_sdk.model.video_metadata_interactions_ask_ai_viewer import VideoMetadataInteractionsAskAiViewer
from vimeo_python_sdk.model.video_metadata_interactions_buy import VideoMetadataInteractionsBuy
from vimeo_python_sdk.model.video_metadata_interactions_can_request_team_role_upgrade import VideoMetadataInteractionsCanRequestTeamRoleUpgrade
from vimeo_python_sdk.model.video_metadata_interactions_can_update_privacy_to_public import VideoMetadataInteractionsCanUpdatePrivacyToPublic
from vimeo_python_sdk.model.video_metadata_interactions_channel import VideoMetadataInteractionsChannel
from vimeo_python_sdk.model.video_metadata_interactions_create_editor import VideoMetadataInteractionsCreateEditor
from vimeo_python_sdk.model.video_metadata_interactions_delete import VideoMetadataInteractionsDelete
from vimeo_python_sdk.model.video_metadata_interactions_edit import VideoMetadataInteractionsEdit
from vimeo_python_sdk.model.video_metadata_interactions_edit_privacy import VideoMetadataInteractionsEditPrivacy
from vimeo_python_sdk.model.video_metadata_interactions_has_restricted_privacy_options import VideoMetadataInteractionsHasRestrictedPrivacyOptions
from vimeo_python_sdk.model.video_metadata_interactions_highlights import VideoMetadataInteractionsHighlights
from vimeo_python_sdk.model.video_metadata_interactions_invite import VideoMetadataInteractionsInvite
from vimeo_python_sdk.model.video_metadata_interactions_legal_hold import VideoMetadataInteractionsLegalHold
from vimeo_python_sdk.model.video_metadata_interactions_like import VideoMetadataInteractionsLike
from vimeo_python_sdk.model.video_metadata_interactions_rent import VideoMetadataInteractionsRent
from vimeo_python_sdk.model.video_metadata_interactions_report import VideoMetadataInteractionsReport
from vimeo_python_sdk.model.video_metadata_interactions_set_content_rating import VideoMetadataInteractionsSetContentRating
from vimeo_python_sdk.model.video_metadata_interactions_subscribe import VideoMetadataInteractionsSubscribe
from vimeo_python_sdk.model.video_metadata_interactions_summary import VideoMetadataInteractionsSummary
from vimeo_python_sdk.model.video_metadata_interactions_team_mentions import VideoMetadataInteractionsTeamMentions
from vimeo_python_sdk.model.video_metadata_interactions_transcript_video_editor import VideoMetadataInteractionsTranscriptVideoEditor
from vimeo_python_sdk.model.video_metadata_interactions_trim import VideoMetadataInteractionsTrim
from vimeo_python_sdk.model.video_metadata_interactions_validate import VideoMetadataInteractionsValidate
from vimeo_python_sdk.model.video_metadata_interactions_view_privacy import VideoMetadataInteractionsViewPrivacy
from vimeo_python_sdk.model.video_metadata_interactions_view_team_members import VideoMetadataInteractionsViewTeamMembers
from vimeo_python_sdk.model.video_metadata_interactions_watched import VideoMetadataInteractionsWatched
from vimeo_python_sdk.model.video_metadata_interactions_watchlater import VideoMetadataInteractionsWatchlater
