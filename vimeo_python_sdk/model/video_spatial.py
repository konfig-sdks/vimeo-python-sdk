# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class VideoSpatial(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The video's 360 spatial data.
    """


    class MetaOapg:
        required = {
            "stereo_format",
            "projection",
            "director_timeline",
            "field_of_view",
        }
        
        class properties:
        
            @staticmethod
            def director_timeline() -> typing.Type['VideoSpatialDirectorTimeline']:
                return VideoSpatialDirectorTimeline
            
            
            class field_of_view(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'field_of_view':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class projection(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "cubical": "CUBICAL",
                        "cylindrical": "CYLINDRICAL",
                        "dome": "DOME",
                        "equirectangular": "EQUIRECTANGULAR",
                        "pyramid": "PYRAMID",
                    }
                
                @schemas.classproperty
                def CUBICAL(cls):
                    return cls("cubical")
                
                @schemas.classproperty
                def CYLINDRICAL(cls):
                    return cls("cylindrical")
                
                @schemas.classproperty
                def DOME(cls):
                    return cls("dome")
                
                @schemas.classproperty
                def EQUIRECTANGULAR(cls):
                    return cls("equirectangular")
                
                @schemas.classproperty
                def PYRAMID(cls):
                    return cls("pyramid")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'projection':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class stereo_format(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "left-right": "LEFTRIGHT",
                        "mono": "MONO",
                        "top-bottom": "TOPBOTTOM",
                    }
                
                @schemas.classproperty
                def LEFTRIGHT(cls):
                    return cls("left-right")
                
                @schemas.classproperty
                def MONO(cls):
                    return cls("mono")
                
                @schemas.classproperty
                def TOPBOTTOM(cls):
                    return cls("top-bottom")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'stereo_format':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "director_timeline": director_timeline,
                "field_of_view": field_of_view,
                "projection": projection,
                "stereo_format": stereo_format,
            }
    
    stereo_format: MetaOapg.properties.stereo_format
    projection: MetaOapg.properties.projection
    director_timeline: 'VideoSpatialDirectorTimeline'
    field_of_view: MetaOapg.properties.field_of_view
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["director_timeline"]) -> 'VideoSpatialDirectorTimeline': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["field_of_view"]) -> MetaOapg.properties.field_of_view: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projection"]) -> MetaOapg.properties.projection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stereo_format"]) -> MetaOapg.properties.stereo_format: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["director_timeline", "field_of_view", "projection", "stereo_format", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["director_timeline"]) -> 'VideoSpatialDirectorTimeline': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["field_of_view"]) -> MetaOapg.properties.field_of_view: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projection"]) -> MetaOapg.properties.projection: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stereo_format"]) -> MetaOapg.properties.stereo_format: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["director_timeline", "field_of_view", "projection", "stereo_format", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        stereo_format: typing.Union[MetaOapg.properties.stereo_format, None, str, ],
        projection: typing.Union[MetaOapg.properties.projection, None, str, ],
        director_timeline: 'VideoSpatialDirectorTimeline',
        field_of_view: typing.Union[MetaOapg.properties.field_of_view, None, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'VideoSpatial':
        return super().__new__(
            cls,
            *args,
            stereo_format=stereo_format,
            projection=projection,
            director_timeline=director_timeline,
            field_of_view=field_of_view,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.video_spatial_director_timeline import VideoSpatialDirectorTimeline
