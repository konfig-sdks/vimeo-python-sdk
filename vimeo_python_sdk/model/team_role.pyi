# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class TeamRole(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "permission_level",
            "role",
            "uri",
        }
        
        class properties:
            
            
            class permission_level(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Admin": "ADMIN",
                        "Contributor": "CONTRIBUTOR",
                        "Contributor Plus": "CONTRIBUTOR_PLUS",
                        "Owner": "OWNER",
                        "Uploader": "UPLOADER",
                        "Viewer": "VIEWER",
                    }
                
                @schemas.classproperty
                def ADMIN(cls):
                    return cls("Admin")
                
                @schemas.classproperty
                def CONTRIBUTOR(cls):
                    return cls("Contributor")
                
                @schemas.classproperty
                def CONTRIBUTOR_PLUS(cls):
                    return cls("Contributor Plus")
                
                @schemas.classproperty
                def OWNER(cls):
                    return cls("Owner")
                
                @schemas.classproperty
                def UPLOADER(cls):
                    return cls("Uploader")
                
                @schemas.classproperty
                def VIEWER(cls):
                    return cls("Viewer")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'permission_level':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class role(
                schemas.EnumBase,
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "Admin": "ADMIN",
                        "Contributor": "CONTRIBUTOR",
                        "Contributor Plus": "CONTRIBUTOR_PLUS",
                        "Owner": "OWNER",
                        "Uploader": "UPLOADER",
                        "Viewer": "VIEWER",
                    }
                
                @schemas.classproperty
                def ADMIN(cls):
                    return cls("Admin")
                
                @schemas.classproperty
                def CONTRIBUTOR(cls):
                    return cls("Contributor")
                
                @schemas.classproperty
                def CONTRIBUTOR_PLUS(cls):
                    return cls("Contributor Plus")
                
                @schemas.classproperty
                def OWNER(cls):
                    return cls("Owner")
                
                @schemas.classproperty
                def UPLOADER(cls):
                    return cls("Uploader")
                
                @schemas.classproperty
                def VIEWER(cls):
                    return cls("Viewer")
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'role':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            uri = schemas.StrSchema
        
            @staticmethod
            def applicable_permission_policies() -> typing.Type['TeamRoleApplicablePermissionPolicies']:
                return TeamRoleApplicablePermissionPolicies
            count = schemas.NumberSchema
            display_description = schemas.StrSchema
            display_name = schemas.StrSchema
            __annotations__ = {
                "permission_level": permission_level,
                "role": role,
                "uri": uri,
                "applicable_permission_policies": applicable_permission_policies,
                "count": count,
                "display_description": display_description,
                "display_name": display_name,
            }
    
    permission_level: MetaOapg.properties.permission_level
    role: MetaOapg.properties.role
    uri: MetaOapg.properties.uri
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["permission_level"]) -> MetaOapg.properties.permission_level: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["applicable_permission_policies"]) -> 'TeamRoleApplicablePermissionPolicies': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["count"]) -> MetaOapg.properties.count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_description"]) -> MetaOapg.properties.display_description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["display_name"]) -> MetaOapg.properties.display_name: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["permission_level", "role", "uri", "applicable_permission_policies", "count", "display_description", "display_name", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["permission_level"]) -> MetaOapg.properties.permission_level: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role"]) -> MetaOapg.properties.role: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["applicable_permission_policies"]) -> typing.Union['TeamRoleApplicablePermissionPolicies', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["count"]) -> typing.Union[MetaOapg.properties.count, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_description"]) -> typing.Union[MetaOapg.properties.display_description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["display_name"]) -> typing.Union[MetaOapg.properties.display_name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["permission_level", "role", "uri", "applicable_permission_policies", "count", "display_description", "display_name", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        permission_level: typing.Union[MetaOapg.properties.permission_level, None, str, ],
        role: typing.Union[MetaOapg.properties.role, None, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        applicable_permission_policies: typing.Union['TeamRoleApplicablePermissionPolicies', schemas.Unset] = schemas.unset,
        count: typing.Union[MetaOapg.properties.count, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        display_description: typing.Union[MetaOapg.properties.display_description, str, schemas.Unset] = schemas.unset,
        display_name: typing.Union[MetaOapg.properties.display_name, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TeamRole':
        return super().__new__(
            cls,
            *args,
            permission_level=permission_level,
            role=role,
            uri=uri,
            applicable_permission_policies=applicable_permission_policies,
            count=count,
            display_description=display_description,
            display_name=display_name,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.team_role_applicable_permission_policies import TeamRoleApplicablePermissionPolicies
