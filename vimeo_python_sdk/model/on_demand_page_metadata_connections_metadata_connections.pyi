# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class OnDemandPageMetadataConnectionsMetadataConnections(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "seasons",
            "comments",
            "genres",
            "videos",
            "pictures",
            "likes",
        }
        
        class properties:
        
            @staticmethod
            def comments() -> typing.Type['OnDemandPageMetadataConnectionsMetadataConnectionsComments']:
                return OnDemandPageMetadataConnectionsMetadataConnectionsComments
        
            @staticmethod
            def genres() -> typing.Type['OnDemandPageMetadataConnectionsMetadataConnectionsGenres']:
                return OnDemandPageMetadataConnectionsMetadataConnectionsGenres
        
            @staticmethod
            def likes() -> typing.Type['OnDemandPageMetadataConnectionsMetadataConnectionsLikes']:
                return OnDemandPageMetadataConnectionsMetadataConnectionsLikes
        
            @staticmethod
            def pictures() -> typing.Type['OnDemandPageMetadataConnectionsMetadataConnectionsPictures']:
                return OnDemandPageMetadataConnectionsMetadataConnectionsPictures
        
            @staticmethod
            def seasons() -> typing.Type['OnDemandPageMetadataConnectionsMetadataConnectionsSeasons']:
                return OnDemandPageMetadataConnectionsMetadataConnectionsSeasons
        
            @staticmethod
            def videos() -> typing.Type['OnDemandPageMetadataConnectionsMetadataConnectionsVideos']:
                return OnDemandPageMetadataConnectionsMetadataConnectionsVideos
            __annotations__ = {
                "comments": comments,
                "genres": genres,
                "likes": likes,
                "pictures": pictures,
                "seasons": seasons,
                "videos": videos,
            }
    
    seasons: 'OnDemandPageMetadataConnectionsMetadataConnectionsSeasons'
    comments: 'OnDemandPageMetadataConnectionsMetadataConnectionsComments'
    genres: 'OnDemandPageMetadataConnectionsMetadataConnectionsGenres'
    videos: 'OnDemandPageMetadataConnectionsMetadataConnectionsVideos'
    pictures: 'OnDemandPageMetadataConnectionsMetadataConnectionsPictures'
    likes: 'OnDemandPageMetadataConnectionsMetadataConnectionsLikes'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["comments"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsComments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["genres"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsGenres': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["likes"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsLikes': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsPictures': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["seasons"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsSeasons': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videos"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsVideos': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["comments", "genres", "likes", "pictures", "seasons", "videos", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["comments"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsComments': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["genres"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsGenres': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["likes"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsLikes': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsPictures': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["seasons"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsSeasons': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videos"]) -> 'OnDemandPageMetadataConnectionsMetadataConnectionsVideos': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["comments", "genres", "likes", "pictures", "seasons", "videos", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        seasons: 'OnDemandPageMetadataConnectionsMetadataConnectionsSeasons',
        comments: 'OnDemandPageMetadataConnectionsMetadataConnectionsComments',
        genres: 'OnDemandPageMetadataConnectionsMetadataConnectionsGenres',
        videos: 'OnDemandPageMetadataConnectionsMetadataConnectionsVideos',
        pictures: 'OnDemandPageMetadataConnectionsMetadataConnectionsPictures',
        likes: 'OnDemandPageMetadataConnectionsMetadataConnectionsLikes',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'OnDemandPageMetadataConnectionsMetadataConnections':
        return super().__new__(
            cls,
            *args,
            seasons=seasons,
            comments=comments,
            genres=genres,
            videos=videos,
            pictures=pictures,
            likes=likes,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.on_demand_page_metadata_connections_metadata_connections_comments import OnDemandPageMetadataConnectionsMetadataConnectionsComments
from vimeo_python_sdk.model.on_demand_page_metadata_connections_metadata_connections_genres import OnDemandPageMetadataConnectionsMetadataConnectionsGenres
from vimeo_python_sdk.model.on_demand_page_metadata_connections_metadata_connections_likes import OnDemandPageMetadataConnectionsMetadataConnectionsLikes
from vimeo_python_sdk.model.on_demand_page_metadata_connections_metadata_connections_pictures import OnDemandPageMetadataConnectionsMetadataConnectionsPictures
from vimeo_python_sdk.model.on_demand_page_metadata_connections_metadata_connections_seasons import OnDemandPageMetadataConnectionsMetadataConnectionsSeasons
from vimeo_python_sdk.model.on_demand_page_metadata_connections_metadata_connections_videos import OnDemandPageMetadataConnectionsMetadataConnectionsVideos
