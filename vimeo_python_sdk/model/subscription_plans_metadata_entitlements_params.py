# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class SubscriptionPlansMetadataEntitlementsParams(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    The list of entitlement parameters corresponding to the tier.
    """


    class MetaOapg:
        required = {
            "video_storage_periodic_quota",
            "video_storage_quota_cap",
            "video_storage_quota_period",
            "video_storage_quota_unit",
            "team_seats",
        }
        
        class properties:
            
            
            class team_seats(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'team_seats':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class video_storage_periodic_quota(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'video_storage_periodic_quota':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class video_storage_quota_cap(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'video_storage_quota_cap':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class video_storage_quota_period(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "lifetime": "LIFETIME",
                        "month": "MONTH",
                        "week": "WEEK",
                        "year": "YEAR",
                    }
                
                @schemas.classproperty
                def LIFETIME(cls):
                    return cls("lifetime")
                
                @schemas.classproperty
                def MONTH(cls):
                    return cls("month")
                
                @schemas.classproperty
                def WEEK(cls):
                    return cls("week")
                
                @schemas.classproperty
                def YEAR(cls):
                    return cls("year")
            
            
            class video_storage_quota_unit(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "video_count": "COUNT",
                        "video_size": "SIZE",
                    }
                
                @schemas.classproperty
                def COUNT(cls):
                    return cls("video_count")
                
                @schemas.classproperty
                def SIZE(cls):
                    return cls("video_size")
            __annotations__ = {
                "team_seats": team_seats,
                "video_storage_periodic_quota": video_storage_periodic_quota,
                "video_storage_quota_cap": video_storage_quota_cap,
                "video_storage_quota_period": video_storage_quota_period,
                "video_storage_quota_unit": video_storage_quota_unit,
            }
    
    video_storage_periodic_quota: MetaOapg.properties.video_storage_periodic_quota
    video_storage_quota_cap: MetaOapg.properties.video_storage_quota_cap
    video_storage_quota_period: MetaOapg.properties.video_storage_quota_period
    video_storage_quota_unit: MetaOapg.properties.video_storage_quota_unit
    team_seats: MetaOapg.properties.team_seats
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["team_seats"]) -> MetaOapg.properties.team_seats: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video_storage_periodic_quota"]) -> MetaOapg.properties.video_storage_periodic_quota: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video_storage_quota_cap"]) -> MetaOapg.properties.video_storage_quota_cap: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video_storage_quota_period"]) -> MetaOapg.properties.video_storage_quota_period: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video_storage_quota_unit"]) -> MetaOapg.properties.video_storage_quota_unit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["team_seats", "video_storage_periodic_quota", "video_storage_quota_cap", "video_storage_quota_period", "video_storage_quota_unit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["team_seats"]) -> MetaOapg.properties.team_seats: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video_storage_periodic_quota"]) -> MetaOapg.properties.video_storage_periodic_quota: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video_storage_quota_cap"]) -> MetaOapg.properties.video_storage_quota_cap: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video_storage_quota_period"]) -> MetaOapg.properties.video_storage_quota_period: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video_storage_quota_unit"]) -> MetaOapg.properties.video_storage_quota_unit: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["team_seats", "video_storage_periodic_quota", "video_storage_quota_cap", "video_storage_quota_period", "video_storage_quota_unit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        video_storage_periodic_quota: typing.Union[MetaOapg.properties.video_storage_periodic_quota, None, str, ],
        video_storage_quota_cap: typing.Union[MetaOapg.properties.video_storage_quota_cap, None, str, ],
        video_storage_quota_period: typing.Union[MetaOapg.properties.video_storage_quota_period, str, ],
        video_storage_quota_unit: typing.Union[MetaOapg.properties.video_storage_quota_unit, str, ],
        team_seats: typing.Union[MetaOapg.properties.team_seats, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubscriptionPlansMetadataEntitlementsParams':
        return super().__new__(
            cls,
            *args,
            video_storage_periodic_quota=video_storage_periodic_quota,
            video_storage_quota_cap=video_storage_quota_cap,
            video_storage_quota_period=video_storage_quota_period,
            video_storage_quota_unit=video_storage_quota_unit,
            team_seats=team_seats,
            _configuration=_configuration,
            **kwargs,
        )
