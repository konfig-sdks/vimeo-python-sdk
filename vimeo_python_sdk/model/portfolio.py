# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Portfolio(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created_time",
            "metadata",
            "modified_time",
            "link",
            "name",
            "description",
            "sort",
            "uri",
        }
        
        class properties:
            
            
            class description(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'description':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            created_time = schemas.StrSchema
            link = schemas.StrSchema
        
            @staticmethod
            def metadata() -> typing.Type['PortfolioMetadata']:
                return PortfolioMetadata
            modified_time = schemas.StrSchema
            name = schemas.StrSchema
            
            
            class sort(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "alphabetical": "ALPHABETICAL",
                        "clips": "CLIPS",
                        "modified": "MODIFIED",
                        "recent": "RECENT",
                    }
                
                @schemas.classproperty
                def ALPHABETICAL(cls):
                    return cls("alphabetical")
                
                @schemas.classproperty
                def CLIPS(cls):
                    return cls("clips")
                
                @schemas.classproperty
                def MODIFIED(cls):
                    return cls("modified")
                
                @schemas.classproperty
                def RECENT(cls):
                    return cls("recent")
            uri = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "created_time": created_time,
                "link": link,
                "metadata": metadata,
                "modified_time": modified_time,
                "name": name,
                "sort": sort,
                "uri": uri,
            }
    
    created_time: MetaOapg.properties.created_time
    metadata: 'PortfolioMetadata'
    modified_time: MetaOapg.properties.modified_time
    link: MetaOapg.properties.link
    name: MetaOapg.properties.name
    description: MetaOapg.properties.description
    sort: MetaOapg.properties.sort
    uri: MetaOapg.properties.uri
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'PortfolioMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "created_time", "link", "metadata", "modified_time", "name", "sort", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_time"]) -> MetaOapg.properties.created_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["link"]) -> MetaOapg.properties.link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'PortfolioMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["modified_time"]) -> MetaOapg.properties.modified_time: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "created_time", "link", "metadata", "modified_time", "name", "sort", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_time: typing.Union[MetaOapg.properties.created_time, str, ],
        metadata: 'PortfolioMetadata',
        modified_time: typing.Union[MetaOapg.properties.modified_time, str, ],
        link: typing.Union[MetaOapg.properties.link, str, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        description: typing.Union[MetaOapg.properties.description, None, str, ],
        sort: typing.Union[MetaOapg.properties.sort, str, ],
        uri: typing.Union[MetaOapg.properties.uri, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Portfolio':
        return super().__new__(
            cls,
            *args,
            created_time=created_time,
            metadata=metadata,
            modified_time=modified_time,
            link=link,
            name=name,
            description=description,
            sort=sort,
            uri=uri,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.portfolio_metadata import PortfolioMetadata
