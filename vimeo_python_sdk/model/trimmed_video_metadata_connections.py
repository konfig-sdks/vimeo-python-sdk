# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class TrimmedVideoMetadataConnections(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "created_version",
            "video",
            "root_version",
        }
        
        class properties:
        
            @staticmethod
            def created_version() -> typing.Type['TrimmedVideoMetadataConnectionsCreatedVersion']:
                return TrimmedVideoMetadataConnectionsCreatedVersion
        
            @staticmethod
            def root_version() -> typing.Type['TrimmedVideoMetadataConnectionsRootVersion']:
                return TrimmedVideoMetadataConnectionsRootVersion
        
            @staticmethod
            def video() -> typing.Type['TrimmedVideoMetadataConnectionsVideo']:
                return TrimmedVideoMetadataConnectionsVideo
            __annotations__ = {
                "created_version": created_version,
                "root_version": root_version,
                "video": video,
            }
    
    created_version: 'TrimmedVideoMetadataConnectionsCreatedVersion'
    video: 'TrimmedVideoMetadataConnectionsVideo'
    root_version: 'TrimmedVideoMetadataConnectionsRootVersion'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_version"]) -> 'TrimmedVideoMetadataConnectionsCreatedVersion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["root_version"]) -> 'TrimmedVideoMetadataConnectionsRootVersion': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video"]) -> 'TrimmedVideoMetadataConnectionsVideo': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["created_version", "root_version", "video", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_version"]) -> 'TrimmedVideoMetadataConnectionsCreatedVersion': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["root_version"]) -> 'TrimmedVideoMetadataConnectionsRootVersion': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video"]) -> 'TrimmedVideoMetadataConnectionsVideo': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["created_version", "root_version", "video", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        created_version: 'TrimmedVideoMetadataConnectionsCreatedVersion',
        video: 'TrimmedVideoMetadataConnectionsVideo',
        root_version: 'TrimmedVideoMetadataConnectionsRootVersion',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TrimmedVideoMetadataConnections':
        return super().__new__(
            cls,
            *args,
            created_version=created_version,
            video=video,
            root_version=root_version,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.trimmed_video_metadata_connections_created_version import TrimmedVideoMetadataConnectionsCreatedVersion
from vimeo_python_sdk.model.trimmed_video_metadata_connections_root_version import TrimmedVideoMetadataConnectionsRootVersion
from vimeo_python_sdk.model.trimmed_video_metadata_connections_video import TrimmedVideoMetadataConnectionsVideo
