# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class WebinarRegistrationData(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Registration data about the webinar owner.
    """


    class MetaOapg:
        required = {
            "lower_limit",
            "total",
            "capping",
            "upper_limit",
            "is_unlimited",
        }
        
        class properties:
            capping = schemas.NumberSchema
            is_unlimited = schemas.BoolSchema
            lower_limit = schemas.NumberSchema
            total = schemas.NumberSchema
            upper_limit = schemas.NumberSchema
            __annotations__ = {
                "capping": capping,
                "is_unlimited": is_unlimited,
                "lower_limit": lower_limit,
                "total": total,
                "upper_limit": upper_limit,
            }
    
    lower_limit: MetaOapg.properties.lower_limit
    total: MetaOapg.properties.total
    capping: MetaOapg.properties.capping
    upper_limit: MetaOapg.properties.upper_limit
    is_unlimited: MetaOapg.properties.is_unlimited
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capping"]) -> MetaOapg.properties.capping: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["is_unlimited"]) -> MetaOapg.properties.is_unlimited: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lower_limit"]) -> MetaOapg.properties.lower_limit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["upper_limit"]) -> MetaOapg.properties.upper_limit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["capping", "is_unlimited", "lower_limit", "total", "upper_limit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capping"]) -> MetaOapg.properties.capping: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["is_unlimited"]) -> MetaOapg.properties.is_unlimited: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lower_limit"]) -> MetaOapg.properties.lower_limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total"]) -> MetaOapg.properties.total: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["upper_limit"]) -> MetaOapg.properties.upper_limit: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["capping", "is_unlimited", "lower_limit", "total", "upper_limit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        lower_limit: typing.Union[MetaOapg.properties.lower_limit, decimal.Decimal, int, float, ],
        total: typing.Union[MetaOapg.properties.total, decimal.Decimal, int, float, ],
        capping: typing.Union[MetaOapg.properties.capping, decimal.Decimal, int, float, ],
        upper_limit: typing.Union[MetaOapg.properties.upper_limit, decimal.Decimal, int, float, ],
        is_unlimited: typing.Union[MetaOapg.properties.is_unlimited, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarRegistrationData':
        return super().__new__(
            cls,
            *args,
            lower_limit=lower_limit,
            total=total,
            capping=capping,
            upper_limit=upper_limit,
            is_unlimited=is_unlimited,
            _configuration=_configuration,
            **kwargs,
        )
