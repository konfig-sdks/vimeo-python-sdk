# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class WebinarEmailSettings(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "use_custom_link",
            "custom_link",
            "follow_up_sender",
            "follow_up_send_on",
            "email_post_event_thank_you",
            "logo_uri",
            "email_registration_confirmation",
            "email_event_reminder_24_hrs",
            "pictures",
            "use_sender_address",
            "accent_color",
            "sender_address",
            "reply_email",
            "use_reply_email",
            "from",
            "use_sender_policy_url",
            "email_preferences",
            "sender_policy_url",
        }
        
        class properties:
            accent_color = schemas.StrSchema
            
            
            class custom_link(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'custom_link':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def email_event_reminder_24_hrs() -> typing.Type['WebinarEmailSettingsEmailEventReminder24Hrs']:
                return WebinarEmailSettingsEmailEventReminder24Hrs
        
            @staticmethod
            def email_post_event_thank_you() -> typing.Type['WebinarEmailSettingsEmailPostEventThankYou']:
                return WebinarEmailSettingsEmailPostEventThankYou
        
            @staticmethod
            def email_preferences() -> typing.Type['WebinarEmailSettingsEmailPreferences']:
                return WebinarEmailSettingsEmailPreferences
        
            @staticmethod
            def email_registration_confirmation() -> typing.Type['WebinarEmailSettingsEmailRegistrationConfirmation']:
                return WebinarEmailSettingsEmailRegistrationConfirmation
            follow_up_send_on = schemas.StrSchema
        
            @staticmethod
            def follow_up_sender() -> typing.Type['User']:
                return User
            _from = schemas.StrSchema
            
            
            class logo_uri(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'logo_uri':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def pictures() -> typing.Type['Picture']:
                return Picture
            
            
            class reply_email(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reply_email':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sender_address(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sender_address':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class sender_policy_url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'sender_policy_url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            use_custom_link = schemas.BoolSchema
            use_reply_email = schemas.BoolSchema
            use_sender_address = schemas.BoolSchema
            use_sender_policy_url = schemas.BoolSchema
            __annotations__ = {
                "accent_color": accent_color,
                "custom_link": custom_link,
                "email_event_reminder_24_hrs": email_event_reminder_24_hrs,
                "email_post_event_thank_you": email_post_event_thank_you,
                "email_preferences": email_preferences,
                "email_registration_confirmation": email_registration_confirmation,
                "follow_up_send_on": follow_up_send_on,
                "follow_up_sender": follow_up_sender,
                "from": _from,
                "logo_uri": logo_uri,
                "pictures": pictures,
                "reply_email": reply_email,
                "sender_address": sender_address,
                "sender_policy_url": sender_policy_url,
                "use_custom_link": use_custom_link,
                "use_reply_email": use_reply_email,
                "use_sender_address": use_sender_address,
                "use_sender_policy_url": use_sender_policy_url,
            }
    
    use_custom_link: MetaOapg.properties.use_custom_link
    custom_link: MetaOapg.properties.custom_link
    follow_up_sender: 'User'
    follow_up_send_on: MetaOapg.properties.follow_up_send_on
    email_post_event_thank_you: 'WebinarEmailSettingsEmailPostEventThankYou'
    logo_uri: MetaOapg.properties.logo_uri
    email_registration_confirmation: 'WebinarEmailSettingsEmailRegistrationConfirmation'
    email_event_reminder_24_hrs: 'WebinarEmailSettingsEmailEventReminder24Hrs'
    pictures: 'Picture'
    use_sender_address: MetaOapg.properties.use_sender_address
    accent_color: MetaOapg.properties.accent_color
    sender_address: MetaOapg.properties.sender_address
    reply_email: MetaOapg.properties.reply_email
    use_reply_email: MetaOapg.properties.use_reply_email
    use_sender_policy_url: MetaOapg.properties.use_sender_policy_url
    email_preferences: 'WebinarEmailSettingsEmailPreferences'
    sender_policy_url: MetaOapg.properties.sender_policy_url
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accent_color"]) -> MetaOapg.properties.accent_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["custom_link"]) -> MetaOapg.properties.custom_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_event_reminder_24_hrs"]) -> 'WebinarEmailSettingsEmailEventReminder24Hrs': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_post_event_thank_you"]) -> 'WebinarEmailSettingsEmailPostEventThankYou': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_preferences"]) -> 'WebinarEmailSettingsEmailPreferences': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email_registration_confirmation"]) -> 'WebinarEmailSettingsEmailRegistrationConfirmation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["follow_up_send_on"]) -> MetaOapg.properties.follow_up_send_on: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["follow_up_sender"]) -> 'User': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["logo_uri"]) -> MetaOapg.properties.logo_uri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reply_email"]) -> MetaOapg.properties.reply_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sender_address"]) -> MetaOapg.properties.sender_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sender_policy_url"]) -> MetaOapg.properties.sender_policy_url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_custom_link"]) -> MetaOapg.properties.use_custom_link: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_reply_email"]) -> MetaOapg.properties.use_reply_email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_sender_address"]) -> MetaOapg.properties.use_sender_address: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_sender_policy_url"]) -> MetaOapg.properties.use_sender_policy_url: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["accent_color", "custom_link", "email_event_reminder_24_hrs", "email_post_event_thank_you", "email_preferences", "email_registration_confirmation", "follow_up_send_on", "follow_up_sender", "from", "logo_uri", "pictures", "reply_email", "sender_address", "sender_policy_url", "use_custom_link", "use_reply_email", "use_sender_address", "use_sender_policy_url", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accent_color"]) -> MetaOapg.properties.accent_color: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["custom_link"]) -> MetaOapg.properties.custom_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_event_reminder_24_hrs"]) -> 'WebinarEmailSettingsEmailEventReminder24Hrs': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_post_event_thank_you"]) -> 'WebinarEmailSettingsEmailPostEventThankYou': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_preferences"]) -> 'WebinarEmailSettingsEmailPreferences': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email_registration_confirmation"]) -> 'WebinarEmailSettingsEmailRegistrationConfirmation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["follow_up_send_on"]) -> MetaOapg.properties.follow_up_send_on: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["follow_up_sender"]) -> 'User': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["from"]) -> MetaOapg.properties._from: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["logo_uri"]) -> MetaOapg.properties.logo_uri: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pictures"]) -> 'Picture': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reply_email"]) -> MetaOapg.properties.reply_email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sender_address"]) -> MetaOapg.properties.sender_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sender_policy_url"]) -> MetaOapg.properties.sender_policy_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_custom_link"]) -> MetaOapg.properties.use_custom_link: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_reply_email"]) -> MetaOapg.properties.use_reply_email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_sender_address"]) -> MetaOapg.properties.use_sender_address: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_sender_policy_url"]) -> MetaOapg.properties.use_sender_policy_url: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["accent_color", "custom_link", "email_event_reminder_24_hrs", "email_post_event_thank_you", "email_preferences", "email_registration_confirmation", "follow_up_send_on", "follow_up_sender", "from", "logo_uri", "pictures", "reply_email", "sender_address", "sender_policy_url", "use_custom_link", "use_reply_email", "use_sender_address", "use_sender_policy_url", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        use_custom_link: typing.Union[MetaOapg.properties.use_custom_link, bool, ],
        custom_link: typing.Union[MetaOapg.properties.custom_link, None, str, ],
        follow_up_sender: 'User',
        follow_up_send_on: typing.Union[MetaOapg.properties.follow_up_send_on, str, ],
        email_post_event_thank_you: 'WebinarEmailSettingsEmailPostEventThankYou',
        logo_uri: typing.Union[MetaOapg.properties.logo_uri, None, str, ],
        email_registration_confirmation: 'WebinarEmailSettingsEmailRegistrationConfirmation',
        email_event_reminder_24_hrs: 'WebinarEmailSettingsEmailEventReminder24Hrs',
        pictures: 'Picture',
        use_sender_address: typing.Union[MetaOapg.properties.use_sender_address, bool, ],
        accent_color: typing.Union[MetaOapg.properties.accent_color, str, ],
        sender_address: typing.Union[MetaOapg.properties.sender_address, None, str, ],
        reply_email: typing.Union[MetaOapg.properties.reply_email, None, str, ],
        use_reply_email: typing.Union[MetaOapg.properties.use_reply_email, bool, ],
        use_sender_policy_url: typing.Union[MetaOapg.properties.use_sender_policy_url, bool, ],
        email_preferences: 'WebinarEmailSettingsEmailPreferences',
        sender_policy_url: typing.Union[MetaOapg.properties.sender_policy_url, None, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'WebinarEmailSettings':
        return super().__new__(
            cls,
            *args,
            use_custom_link=use_custom_link,
            custom_link=custom_link,
            follow_up_sender=follow_up_sender,
            follow_up_send_on=follow_up_send_on,
            email_post_event_thank_you=email_post_event_thank_you,
            logo_uri=logo_uri,
            email_registration_confirmation=email_registration_confirmation,
            email_event_reminder_24_hrs=email_event_reminder_24_hrs,
            pictures=pictures,
            use_sender_address=use_sender_address,
            accent_color=accent_color,
            sender_address=sender_address,
            reply_email=reply_email,
            use_reply_email=use_reply_email,
            use_sender_policy_url=use_sender_policy_url,
            email_preferences=email_preferences,
            sender_policy_url=sender_policy_url,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.picture import Picture
from vimeo_python_sdk.model.user import User
from vimeo_python_sdk.model.webinar_email_settings_email_event_reminder24_hrs import WebinarEmailSettingsEmailEventReminder24Hrs
from vimeo_python_sdk.model.webinar_email_settings_email_post_event_thank_you import WebinarEmailSettingsEmailPostEventThankYou
from vimeo_python_sdk.model.webinar_email_settings_email_preferences import WebinarEmailSettingsEmailPreferences
from vimeo_python_sdk.model.webinar_email_settings_email_registration_confirmation import WebinarEmailSettingsEmailRegistrationConfirmation
