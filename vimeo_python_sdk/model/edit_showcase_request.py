# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class EditShowcaseRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            brand_color = schemas.StrSchema
            
            
            class domain(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'domain':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            hide_nav = schemas.BoolSchema
            hide_upcoming = schemas.BoolSchema
            
            
            class layout(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "grid": "GRID",
                        "player": "PLAYER",
                    }
                
                @schemas.classproperty
                def GRID(cls):
                    return cls("grid")
                
                @schemas.classproperty
                def PLAYER(cls):
                    return cls("player")
            name = schemas.StrSchema
            password = schemas.StrSchema
            
            
            class privacy(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "anybody": "ANYBODY",
                        "embed_only": "EMBED_ONLY",
                        "nobody": "NOBODY",
                        "password": "PASSWORD",
                        "team": "TEAM",
                        "unlisted": "UNLISTED",
                    }
                
                @schemas.classproperty
                def ANYBODY(cls):
                    return cls("anybody")
                
                @schemas.classproperty
                def EMBED_ONLY(cls):
                    return cls("embed_only")
                
                @schemas.classproperty
                def NOBODY(cls):
                    return cls("nobody")
                
                @schemas.classproperty
                def PASSWORD(cls):
                    return cls("password")
                
                @schemas.classproperty
                def TEAM(cls):
                    return cls("team")
                
                @schemas.classproperty
                def UNLISTED(cls):
                    return cls("unlisted")
            review_mode = schemas.BoolSchema
            
            
            class sort(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "added_first": "ADDED_FIRST",
                        "added_last": "ADDED_LAST",
                        "alphabetical": "ALPHABETICAL",
                        "arranged": "ARRANGED",
                        "comments": "COMMENTS",
                        "likes": "LIKES",
                        "newest": "NEWEST",
                        "oldest": "OLDEST",
                        "plays": "PLAYS",
                    }
                
                @schemas.classproperty
                def ADDED_FIRST(cls):
                    return cls("added_first")
                
                @schemas.classproperty
                def ADDED_LAST(cls):
                    return cls("added_last")
                
                @schemas.classproperty
                def ALPHABETICAL(cls):
                    return cls("alphabetical")
                
                @schemas.classproperty
                def ARRANGED(cls):
                    return cls("arranged")
                
                @schemas.classproperty
                def COMMENTS(cls):
                    return cls("comments")
                
                @schemas.classproperty
                def LIKES(cls):
                    return cls("likes")
                
                @schemas.classproperty
                def NEWEST(cls):
                    return cls("newest")
                
                @schemas.classproperty
                def OLDEST(cls):
                    return cls("oldest")
                
                @schemas.classproperty
                def PLAYS(cls):
                    return cls("plays")
            
            
            class theme(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "dark": "DARK",
                        "standard": "STANDARD",
                    }
                
                @schemas.classproperty
                def DARK(cls):
                    return cls("dark")
                
                @schemas.classproperty
                def STANDARD(cls):
                    return cls("standard")
            
            
            class url(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'url':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            use_custom_domain = schemas.BoolSchema
            __annotations__ = {
                "description": description,
                "brand_color": brand_color,
                "domain": domain,
                "hide_nav": hide_nav,
                "hide_upcoming": hide_upcoming,
                "layout": layout,
                "name": name,
                "password": password,
                "privacy": privacy,
                "review_mode": review_mode,
                "sort": sort,
                "theme": theme,
                "url": url,
                "use_custom_domain": use_custom_domain,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["brand_color"]) -> MetaOapg.properties.brand_color: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["domain"]) -> MetaOapg.properties.domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hide_nav"]) -> MetaOapg.properties.hide_nav: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hide_upcoming"]) -> MetaOapg.properties.hide_upcoming: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["layout"]) -> MetaOapg.properties.layout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["password"]) -> MetaOapg.properties.password: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["privacy"]) -> MetaOapg.properties.privacy: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["review_mode"]) -> MetaOapg.properties.review_mode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sort"]) -> MetaOapg.properties.sort: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["theme"]) -> MetaOapg.properties.theme: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["url"]) -> MetaOapg.properties.url: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["use_custom_domain"]) -> MetaOapg.properties.use_custom_domain: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "brand_color", "domain", "hide_nav", "hide_upcoming", "layout", "name", "password", "privacy", "review_mode", "sort", "theme", "url", "use_custom_domain", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["brand_color"]) -> typing.Union[MetaOapg.properties.brand_color, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["domain"]) -> typing.Union[MetaOapg.properties.domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hide_nav"]) -> typing.Union[MetaOapg.properties.hide_nav, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hide_upcoming"]) -> typing.Union[MetaOapg.properties.hide_upcoming, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["layout"]) -> typing.Union[MetaOapg.properties.layout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["password"]) -> typing.Union[MetaOapg.properties.password, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["privacy"]) -> typing.Union[MetaOapg.properties.privacy, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["review_mode"]) -> typing.Union[MetaOapg.properties.review_mode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sort"]) -> typing.Union[MetaOapg.properties.sort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["theme"]) -> typing.Union[MetaOapg.properties.theme, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["url"]) -> typing.Union[MetaOapg.properties.url, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["use_custom_domain"]) -> typing.Union[MetaOapg.properties.use_custom_domain, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "brand_color", "domain", "hide_nav", "hide_upcoming", "layout", "name", "password", "privacy", "review_mode", "sort", "theme", "url", "use_custom_domain", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        brand_color: typing.Union[MetaOapg.properties.brand_color, str, schemas.Unset] = schemas.unset,
        domain: typing.Union[MetaOapg.properties.domain, None, str, schemas.Unset] = schemas.unset,
        hide_nav: typing.Union[MetaOapg.properties.hide_nav, bool, schemas.Unset] = schemas.unset,
        hide_upcoming: typing.Union[MetaOapg.properties.hide_upcoming, bool, schemas.Unset] = schemas.unset,
        layout: typing.Union[MetaOapg.properties.layout, str, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        password: typing.Union[MetaOapg.properties.password, str, schemas.Unset] = schemas.unset,
        privacy: typing.Union[MetaOapg.properties.privacy, str, schemas.Unset] = schemas.unset,
        review_mode: typing.Union[MetaOapg.properties.review_mode, bool, schemas.Unset] = schemas.unset,
        sort: typing.Union[MetaOapg.properties.sort, str, schemas.Unset] = schemas.unset,
        theme: typing.Union[MetaOapg.properties.theme, str, schemas.Unset] = schemas.unset,
        url: typing.Union[MetaOapg.properties.url, None, str, schemas.Unset] = schemas.unset,
        use_custom_domain: typing.Union[MetaOapg.properties.use_custom_domain, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EditShowcaseRequest':
        return super().__new__(
            cls,
            *args,
            description=description,
            brand_color=brand_color,
            domain=domain,
            hide_nav=hide_nav,
            hide_upcoming=hide_upcoming,
            layout=layout,
            name=name,
            password=password,
            privacy=privacy,
            review_mode=review_mode,
            sort=sort,
            theme=theme,
            url=url,
            use_custom_domain=use_custom_domain,
            _configuration=_configuration,
            **kwargs,
        )
