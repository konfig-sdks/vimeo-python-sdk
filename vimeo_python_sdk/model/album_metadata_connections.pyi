# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class AlbumMetadataConnections(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about showcase connections.
    """


    class MetaOapg:
        required = {
            "available_videos",
            "requested_clip",
            "videos",
        }
        
        class properties:
        
            @staticmethod
            def available_videos() -> typing.Type['AlbumMetadataConnectionsAvailableVideos']:
                return AlbumMetadataConnectionsAvailableVideos
        
            @staticmethod
            def requested_clip() -> typing.Type['AlbumMetadataConnectionsRequestedClip']:
                return AlbumMetadataConnectionsRequestedClip
        
            @staticmethod
            def videos() -> typing.Type['AlbumMetadataConnectionsVideos']:
                return AlbumMetadataConnectionsVideos
            __annotations__ = {
                "available_videos": available_videos,
                "requested_clip": requested_clip,
                "videos": videos,
            }
    
    available_videos: 'AlbumMetadataConnectionsAvailableVideos'
    requested_clip: 'AlbumMetadataConnectionsRequestedClip'
    videos: 'AlbumMetadataConnectionsVideos'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["available_videos"]) -> 'AlbumMetadataConnectionsAvailableVideos': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["requested_clip"]) -> 'AlbumMetadataConnectionsRequestedClip': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["videos"]) -> 'AlbumMetadataConnectionsVideos': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["available_videos", "requested_clip", "videos", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["available_videos"]) -> 'AlbumMetadataConnectionsAvailableVideos': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["requested_clip"]) -> 'AlbumMetadataConnectionsRequestedClip': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["videos"]) -> 'AlbumMetadataConnectionsVideos': ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["available_videos", "requested_clip", "videos", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        available_videos: 'AlbumMetadataConnectionsAvailableVideos',
        requested_clip: 'AlbumMetadataConnectionsRequestedClip',
        videos: 'AlbumMetadataConnectionsVideos',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AlbumMetadataConnections':
        return super().__new__(
            cls,
            *args,
            available_videos=available_videos,
            requested_clip=requested_clip,
            videos=videos,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.album_metadata_connections_available_videos import AlbumMetadataConnectionsAvailableVideos
from vimeo_python_sdk.model.album_metadata_connections_requested_clip import AlbumMetadataConnectionsRequestedClip
from vimeo_python_sdk.model.album_metadata_connections_videos import AlbumMetadataConnectionsVideos
