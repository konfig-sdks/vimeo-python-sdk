# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class ProjectItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "type",
        }
        
        class properties:
            
            
            class type(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "folder": "FOLDER",
                        "live_event": "LIVE_EVENT",
                        "video": "VIDEO",
                    }
                
                @schemas.classproperty
                def FOLDER(cls):
                    return cls("folder")
                
                @schemas.classproperty
                def LIVE_EVENT(cls):
                    return cls("live_event")
                
                @schemas.classproperty
                def VIDEO(cls):
                    return cls("video")
        
            @staticmethod
            def folder() -> typing.Type['Project']:
                return Project
        
            @staticmethod
            def live_event() -> typing.Type['LiveEventRecurring']:
                return LiveEventRecurring
        
            @staticmethod
            def video() -> typing.Type['Video']:
                return Video
            __annotations__ = {
                "type": type,
                "folder": folder,
                "live_event": live_event,
                "video": video,
            }
    
    type: MetaOapg.properties.type
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["folder"]) -> 'Project': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["live_event"]) -> 'LiveEventRecurring': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["video"]) -> 'Video': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "folder", "live_event", "video", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["folder"]) -> typing.Union['Project', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["live_event"]) -> typing.Union['LiveEventRecurring', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["video"]) -> typing.Union['Video', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "folder", "live_event", "video", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, ],
        folder: typing.Union['Project', schemas.Unset] = schemas.unset,
        live_event: typing.Union['LiveEventRecurring', schemas.Unset] = schemas.unset,
        video: typing.Union['Video', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectItem':
        return super().__new__(
            cls,
            *args,
            type=type,
            folder=folder,
            live_event=live_event,
            video=video,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.live_event_recurring import LiveEventRecurring
from vimeo_python_sdk.model.project import Project
from vimeo_python_sdk.model.video import Video
