# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class ProjectMetadataInteractionsAddSubfolder(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Information about adding a subfolder to the current folder.
    """


    class MetaOapg:
        required = {
            "subfolder_depth_limit_reached",
            "can_add_subfolders",
        }
        
        class properties:
            can_add_subfolders = schemas.BoolSchema
            subfolder_depth_limit_reached = schemas.BoolSchema
            content_type = schemas.StrSchema
        
            @staticmethod
            def options() -> typing.Type['ProjectMetadataInteractionsAddSubfolderOptions']:
                return ProjectMetadataInteractionsAddSubfolderOptions
        
            @staticmethod
            def properties() -> typing.Type['ProjectMetadataInteractionsAddSubfolderProperties']:
                return ProjectMetadataInteractionsAddSubfolderProperties
            uri = schemas.StrSchema
            __annotations__ = {
                "can_add_subfolders": can_add_subfolders,
                "subfolder_depth_limit_reached": subfolder_depth_limit_reached,
                "content_type": content_type,
                "options": options,
                "properties": properties,
                "uri": uri,
            }
    
    subfolder_depth_limit_reached: MetaOapg.properties.subfolder_depth_limit_reached
    can_add_subfolders: MetaOapg.properties.can_add_subfolders
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["can_add_subfolders"]) -> MetaOapg.properties.can_add_subfolders: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subfolder_depth_limit_reached"]) -> MetaOapg.properties.subfolder_depth_limit_reached: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["content_type"]) -> MetaOapg.properties.content_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["options"]) -> 'ProjectMetadataInteractionsAddSubfolderOptions': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["properties"]) -> 'ProjectMetadataInteractionsAddSubfolderProperties': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uri"]) -> MetaOapg.properties.uri: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["can_add_subfolders", "subfolder_depth_limit_reached", "content_type", "options", "properties", "uri", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["can_add_subfolders"]) -> MetaOapg.properties.can_add_subfolders: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subfolder_depth_limit_reached"]) -> MetaOapg.properties.subfolder_depth_limit_reached: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["content_type"]) -> typing.Union[MetaOapg.properties.content_type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["options"]) -> typing.Union['ProjectMetadataInteractionsAddSubfolderOptions', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["properties"]) -> typing.Union['ProjectMetadataInteractionsAddSubfolderProperties', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uri"]) -> typing.Union[MetaOapg.properties.uri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["can_add_subfolders", "subfolder_depth_limit_reached", "content_type", "options", "properties", "uri", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        subfolder_depth_limit_reached: typing.Union[MetaOapg.properties.subfolder_depth_limit_reached, bool, ],
        can_add_subfolders: typing.Union[MetaOapg.properties.can_add_subfolders, bool, ],
        content_type: typing.Union[MetaOapg.properties.content_type, str, schemas.Unset] = schemas.unset,
        options: typing.Union['ProjectMetadataInteractionsAddSubfolderOptions', schemas.Unset] = schemas.unset,
        properties: typing.Union['ProjectMetadataInteractionsAddSubfolderProperties', schemas.Unset] = schemas.unset,
        uri: typing.Union[MetaOapg.properties.uri, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProjectMetadataInteractionsAddSubfolder':
        return super().__new__(
            cls,
            *args,
            subfolder_depth_limit_reached=subfolder_depth_limit_reached,
            can_add_subfolders=can_add_subfolders,
            content_type=content_type,
            options=options,
            properties=properties,
            uri=uri,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.project_metadata_interactions_add_subfolder_options import ProjectMetadataInteractionsAddSubfolderOptions
from vimeo_python_sdk.model.project_metadata_interactions_add_subfolder_properties import ProjectMetadataInteractionsAddSubfolderProperties
