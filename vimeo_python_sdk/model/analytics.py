# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class Analytics(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "end_date",
            "country",
            "metadata",
            "average_time_watched",
            "embed_domain",
            "unique_impressions",
            "device_type",
            "impressions",
            "average_percent_watched",
            "downloads",
            "finishes",
            "total_time_watched",
            "views",
            "start_date",
            "unique_viewers",
        }
        
        class properties:
            average_percent_watched = schemas.NumberSchema
            average_time_watched = schemas.NumberSchema
        
            @staticmethod
            def country() -> typing.Type['AnalyticsCountry']:
                return AnalyticsCountry
            device_type = schemas.StrSchema
            downloads = schemas.NumberSchema
            embed_domain = schemas.StrSchema
            end_date = schemas.StrSchema
            finishes = schemas.NumberSchema
            impressions = schemas.NumberSchema
        
            @staticmethod
            def metadata() -> typing.Type['AnalyticsMetadata']:
                return AnalyticsMetadata
            start_date = schemas.StrSchema
            total_time_watched = schemas.NumberSchema
            unique_impressions = schemas.NumberSchema
            unique_viewers = schemas.NumberSchema
            views = schemas.NumberSchema
            __annotations__ = {
                "average_percent_watched": average_percent_watched,
                "average_time_watched": average_time_watched,
                "country": country,
                "device_type": device_type,
                "downloads": downloads,
                "embed_domain": embed_domain,
                "end_date": end_date,
                "finishes": finishes,
                "impressions": impressions,
                "metadata": metadata,
                "start_date": start_date,
                "total_time_watched": total_time_watched,
                "unique_impressions": unique_impressions,
                "unique_viewers": unique_viewers,
                "views": views,
            }
    
    end_date: MetaOapg.properties.end_date
    country: 'AnalyticsCountry'
    metadata: 'AnalyticsMetadata'
    average_time_watched: MetaOapg.properties.average_time_watched
    embed_domain: MetaOapg.properties.embed_domain
    unique_impressions: MetaOapg.properties.unique_impressions
    device_type: MetaOapg.properties.device_type
    impressions: MetaOapg.properties.impressions
    average_percent_watched: MetaOapg.properties.average_percent_watched
    downloads: MetaOapg.properties.downloads
    finishes: MetaOapg.properties.finishes
    total_time_watched: MetaOapg.properties.total_time_watched
    views: MetaOapg.properties.views
    start_date: MetaOapg.properties.start_date
    unique_viewers: MetaOapg.properties.unique_viewers
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["average_percent_watched"]) -> MetaOapg.properties.average_percent_watched: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["average_time_watched"]) -> MetaOapg.properties.average_time_watched: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> 'AnalyticsCountry': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["downloads"]) -> MetaOapg.properties.downloads: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["embed_domain"]) -> MetaOapg.properties.embed_domain: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["finishes"]) -> MetaOapg.properties.finishes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["impressions"]) -> MetaOapg.properties.impressions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> 'AnalyticsMetadata': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["total_time_watched"]) -> MetaOapg.properties.total_time_watched: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unique_impressions"]) -> MetaOapg.properties.unique_impressions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unique_viewers"]) -> MetaOapg.properties.unique_viewers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["views"]) -> MetaOapg.properties.views: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["average_percent_watched", "average_time_watched", "country", "device_type", "downloads", "embed_domain", "end_date", "finishes", "impressions", "metadata", "start_date", "total_time_watched", "unique_impressions", "unique_viewers", "views", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["average_percent_watched"]) -> MetaOapg.properties.average_percent_watched: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["average_time_watched"]) -> MetaOapg.properties.average_time_watched: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> 'AnalyticsCountry': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["device_type"]) -> MetaOapg.properties.device_type: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["downloads"]) -> MetaOapg.properties.downloads: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["embed_domain"]) -> MetaOapg.properties.embed_domain: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["end_date"]) -> MetaOapg.properties.end_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["finishes"]) -> MetaOapg.properties.finishes: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["impressions"]) -> MetaOapg.properties.impressions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> 'AnalyticsMetadata': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["start_date"]) -> MetaOapg.properties.start_date: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["total_time_watched"]) -> MetaOapg.properties.total_time_watched: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unique_impressions"]) -> MetaOapg.properties.unique_impressions: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unique_viewers"]) -> MetaOapg.properties.unique_viewers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["views"]) -> MetaOapg.properties.views: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["average_percent_watched", "average_time_watched", "country", "device_type", "downloads", "embed_domain", "end_date", "finishes", "impressions", "metadata", "start_date", "total_time_watched", "unique_impressions", "unique_viewers", "views", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        end_date: typing.Union[MetaOapg.properties.end_date, str, ],
        country: 'AnalyticsCountry',
        metadata: 'AnalyticsMetadata',
        average_time_watched: typing.Union[MetaOapg.properties.average_time_watched, decimal.Decimal, int, float, ],
        embed_domain: typing.Union[MetaOapg.properties.embed_domain, str, ],
        unique_impressions: typing.Union[MetaOapg.properties.unique_impressions, decimal.Decimal, int, float, ],
        device_type: typing.Union[MetaOapg.properties.device_type, str, ],
        impressions: typing.Union[MetaOapg.properties.impressions, decimal.Decimal, int, float, ],
        average_percent_watched: typing.Union[MetaOapg.properties.average_percent_watched, decimal.Decimal, int, float, ],
        downloads: typing.Union[MetaOapg.properties.downloads, decimal.Decimal, int, float, ],
        finishes: typing.Union[MetaOapg.properties.finishes, decimal.Decimal, int, float, ],
        total_time_watched: typing.Union[MetaOapg.properties.total_time_watched, decimal.Decimal, int, float, ],
        views: typing.Union[MetaOapg.properties.views, decimal.Decimal, int, float, ],
        start_date: typing.Union[MetaOapg.properties.start_date, str, ],
        unique_viewers: typing.Union[MetaOapg.properties.unique_viewers, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Analytics':
        return super().__new__(
            cls,
            *args,
            end_date=end_date,
            country=country,
            metadata=metadata,
            average_time_watched=average_time_watched,
            embed_domain=embed_domain,
            unique_impressions=unique_impressions,
            device_type=device_type,
            impressions=impressions,
            average_percent_watched=average_percent_watched,
            downloads=downloads,
            finishes=finishes,
            total_time_watched=total_time_watched,
            views=views,
            start_date=start_date,
            unique_viewers=unique_viewers,
            _configuration=_configuration,
            **kwargs,
        )

from vimeo_python_sdk.model.analytics_country import AnalyticsCountry
from vimeo_python_sdk.model.analytics_metadata import AnalyticsMetadata
