# coding: utf-8

"""
    Vimeo API

    Build something great. Vimeo's API supports flexible, high-quality video integration with your custom apps.

    The version of the OpenAPI document: 3.4
    Created by: https://developer.vimeo.com/help
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from vimeo_python_sdk import schemas  # noqa: F401


class SubscriptionItemsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "quantity",
            "updated_at",
            "created_at",
            "id",
            "billing_plan_id",
            "synced_at",
        }
        
        class properties:
            billing_plan_id = schemas.StrSchema
            created_at = schemas.StrSchema
            id = schemas.StrSchema
            quantity = schemas.NumberSchema
            synced_at = schemas.StrSchema
            updated_at = schemas.StrSchema
            metadata = schemas.DictSchema
            promo_code = schemas.StrSchema
            promo_code_id = schemas.StrSchema
            __annotations__ = {
                "billing_plan_id": billing_plan_id,
                "created_at": created_at,
                "id": id,
                "quantity": quantity,
                "synced_at": synced_at,
                "updated_at": updated_at,
                "metadata": metadata,
                "promo_code": promo_code,
                "promo_code_id": promo_code_id,
            }
    
    quantity: MetaOapg.properties.quantity
    updated_at: MetaOapg.properties.updated_at
    created_at: MetaOapg.properties.created_at
    id: MetaOapg.properties.id
    billing_plan_id: MetaOapg.properties.billing_plan_id
    synced_at: MetaOapg.properties.synced_at
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billing_plan_id"]) -> MetaOapg.properties.billing_plan_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["synced_at"]) -> MetaOapg.properties.synced_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["metadata"]) -> MetaOapg.properties.metadata: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promo_code"]) -> MetaOapg.properties.promo_code: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["promo_code_id"]) -> MetaOapg.properties.promo_code_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["billing_plan_id", "created_at", "id", "quantity", "synced_at", "updated_at", "metadata", "promo_code", "promo_code_id", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billing_plan_id"]) -> MetaOapg.properties.billing_plan_id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["quantity"]) -> MetaOapg.properties.quantity: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["synced_at"]) -> MetaOapg.properties.synced_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["metadata"]) -> typing.Union[MetaOapg.properties.metadata, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promo_code"]) -> typing.Union[MetaOapg.properties.promo_code, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["promo_code_id"]) -> typing.Union[MetaOapg.properties.promo_code_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["billing_plan_id", "created_at", "id", "quantity", "synced_at", "updated_at", "metadata", "promo_code", "promo_code_id", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        quantity: typing.Union[MetaOapg.properties.quantity, decimal.Decimal, int, float, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        billing_plan_id: typing.Union[MetaOapg.properties.billing_plan_id, str, ],
        synced_at: typing.Union[MetaOapg.properties.synced_at, str, ],
        metadata: typing.Union[MetaOapg.properties.metadata, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        promo_code: typing.Union[MetaOapg.properties.promo_code, str, schemas.Unset] = schemas.unset,
        promo_code_id: typing.Union[MetaOapg.properties.promo_code_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubscriptionItemsItem':
        return super().__new__(
            cls,
            *args,
            quantity=quantity,
            updated_at=updated_at,
            created_at=created_at,
            id=id,
            billing_plan_id=billing_plan_id,
            synced_at=synced_at,
            metadata=metadata,
            promo_code=promo_code,
            promo_code_id=promo_code_id,
            _configuration=_configuration,
            **kwargs,
        )
